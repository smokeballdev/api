{
  "openapi": "3.0.1",
  "info": {
    "title": "API",
    "version": "1.0"
  },
  "paths": {
    "/bankaccountbalances/{id}": {
      "get": {
        "tags": [
          "BankAccountBalances"
        ],
        "summary": "Get a bank account balance",
        "description": "Retrieves a specified bank account balance.",
        "operationId": "GetBankAccountBalanceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the bank account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'BankAccountBalance' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountBalance"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountBalance"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountBalance"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When bank account balance with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When bank account balance with specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/bankaccounts/{id}": {
      "get": {
        "tags": [
          "BankAccounts"
        ],
        "summary": "Get a bank account",
        "description": "Retrieves a specified bank account.",
        "operationId": "GetBankAccountById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'BankAccount' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When bank account with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When bank account with specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/bankaccounts": {
      "get": {
        "tags": [
          "BankAccounts"
        ],
        "summary": "Get bank accounts",
        "description": "Returns a list of bank accounts.",
        "operationId": "GetBankAccounts",
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'BankAccount' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCollection"
                }
              }
            }
          }
        }
      }
    },
    "/activitycodes/{id}": {
      "get": {
        "tags": [
          "ActivityCodes"
        ],
        "summary": "Get activity code",
        "description": "Retrieves a specified activity code.",
        "operationId": "GetActivityCodeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'ActivityCode' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "403": {
            "description": "When activity code with specified id is not associated with authenticated client.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When activity code with specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ActivityCodes"
        ],
        "summary": "Update an activity code",
        "description": "Updates a specified activity code.",
        "operationId": "UpdateActivityCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the activity code to be updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When activity code with specified id is not associated with authenticated client."
          }
        }
      },
      "delete": {
        "tags": [
          "ActivityCodes"
        ],
        "summary": "Delete an activity code",
        "description": "Deletes a specified activity code.",
        "operationId": "DeleteActivityCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the activity code to be deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When activity code with specified id is not associated with authenticated client."
          }
        }
      }
    },
    "/activitycodes": {
      "get": {
        "tags": [
          "ActivityCodes"
        ],
        "summary": "Get activity codes",
        "description": "Returns a list of activity codes.",
        "operationId": "GetActivityCodes",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns expenses updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'ActivityCode' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ActivityCodes"
        ],
        "summary": "Create an activity code",
        "description": "Creates an activity code.",
        "operationId": "CreateActivityCode",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the activity code to be created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contacts",
        "description": "Returns a list of contacts.",
        "operationId": "GetContacts",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns contacts updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Terms",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchTerm"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Contact' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact",
        "description": "Creates a contact.",
        "operationId": "CreateContact",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact",
        "description": "Retrieves a specified contact.",
        "operationId": "GetContactById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Contact' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact",
        "description": "Updates a specified contact.",
        "operationId": "UpdateContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "description": "Deletes a specified contact.",
        "operationId": "DeleteContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      }
    },
    "/contacts/{contactId}/relations": {
      "get": {
        "tags": [
          "Relations"
        ],
        "summary": "Get contact relations",
        "description": "Returns a list of relations for a specified contact if associated with the authenticated client.",
        "operationId": "GetRelations",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Link' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkPagedCollection"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "Create a contact relation",
        "description": "Creates a relation for a specified contact.",
        "operationId": "CreateRelation",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRelationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRelationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRelationDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact relation to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When related contact id is not provided"
          }
        }
      }
    },
    "/contacts/{contactId}/relations/{relatedContactId}": {
      "get": {
        "tags": [
          "Relations"
        ],
        "summary": "Get a contact relation",
        "description": "Retrieves a relation for a specified contact if associated with the authenticated client.",
        "operationId": "GetRelationById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedContactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Link' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "Relations"
        ],
        "summary": "Update a contact relation",
        "description": "Updates a relation for a specified contact.",
        "operationId": "UpdateRelation",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedContactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRelationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRelationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRelationDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact relation to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Relations"
        ],
        "summary": "Delete a contact relation",
        "description": "Deletes a relation for a specified contact.",
        "operationId": "DeleteRelation",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedContactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact relation to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      }
    },
    "/matters/{matterId}/documents/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get files on a matter",
        "description": "Returns a list of files associated with a matter.",
        "operationId": "GetFiles",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'File' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilePagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePagedCollection"
                }
              }
            }
          },
          "403": {
            "description": "When the requested matter does not belong to the account making the request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Add file to a matter",
        "description": "Uploads a new file for the specified matter.",
        "operationId": "AddFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a 'UploadFileInfo' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              }
            }
          },
          "400": {
            "description": "When the file name does not contain valid XML characters or an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get a file",
        "description": "Retrieves a specified file.",
        "operationId": "GetFileById",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'File' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When file with the specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Upload/update version or metadata of a file",
        "description": "Updates the metadata for a file or uploads a new version of the file",
        "operationId": "UpdateFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a 'UploadFileInfo' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              }
            }
          },
          "400": {
            "description": "When the file name does not contain valid XML characters or an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete a file",
        "description": "Deletes a specified matter file.",
        "operationId": "DeleteFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the file to be deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When the requested file does not belong to the specified matter.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/download": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get download url for a file",
        "description": "Retrieves download details for a specified matter file.",
        "operationId": "DownloadFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'DownloadFileInfo' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFileInfo"
                }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/upload": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get upload url for a file",
        "description": "Retrieves upload details for a specified matter file.",
        "operationId": "UploadFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'UploadFileInfo' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get folders/files under root folder",
        "description": "Returns a list of sub folders and files under the root folder of a matter",
        "operationId": "GetFolders",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'FolderListing' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Create a folder",
        "description": "Creates a new folder under the specified matter.",
        "operationId": "CreateRootFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When folder name is not provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/folders/{folderId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get folders/files under a folder",
        "description": "Returns a list of sub folders and files under a specified folder of a matter",
        "operationId": "GetFolderById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'FolderListing' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              }
            }
          },
          "404": {
            "description": "When folder with the specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Folders"
        ],
        "summary": "Update a folder",
        "description": "Updates a folder belonging to the specified matter.",
        "operationId": "UpdateFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When folder name is not provided or folder does not belong to the specified matter.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When folder with the specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Delete a folder",
        "description": "Deletes a folder belonging to the specified matter.",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When the folder does not belong to the specified matter.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/expenses": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Get expenses",
        "description": "Returns a list of expenses.",
        "operationId": "GetExpenses",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns expenses updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Expense' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Expenses"
        ],
        "summary": "Create an expense on the matter",
        "description": "Creates an expense.",
        "operationId": "CreateExpense",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/expenses/{id}": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Get a expense",
        "description": "Retrieves a specified expense.",
        "operationId": "GetExpenseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Expense' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When expense with specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Expenses"
        ],
        "summary": "Update an expense on a matter",
        "description": "Updates a specified expense.",
        "operationId": "UpdateExpense",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client."
          }
        }
      },
      "delete": {
        "tags": [
          "Expenses"
        ],
        "summary": "Delete an expense",
        "description": "Deletes a specified expense.",
        "operationId": "DeleteExpense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client."
          }
        }
      }
    },
    "/matters/{matterId}/expenses/{expenseId}/attachment": {
      "post": {
        "tags": [
          "Expenses"
        ],
        "summary": "Gets the upload url for uploading an expense",
        "operationId": "PostAttachment",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The id of the matter the expense belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expenseId",
            "in": "path",
            "description": "The id of the expense which should have the attachment added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An object containing details about the attachment (e.g. file name).",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddAttachmentDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAttachmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAttachmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddAttachmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the file upload url.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddAttachmentInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAttachmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Expense not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/expenses/upload": {
      "post": {
        "tags": [
          "Expenses"
        ],
        "operationId": "UploadAttachment",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddAttachmentInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAttachmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/fees": {
      "get": {
        "tags": [
          "Fees"
        ],
        "summary": "Get fees",
        "description": "Returns a list of fees.",
        "operationId": "GetFees",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns fees updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Fee' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeePagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fees"
        ],
        "summary": "Create a fee",
        "description": "Creates a fee.",
        "operationId": "CreateFee",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FeeDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FeeDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/fees/{id}": {
      "get": {
        "tags": [
          "Fees"
        ],
        "summary": "Get a fee",
        "description": "Retrieves a specified fee.",
        "operationId": "GetFeeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Fee' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fee"
                }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When fee with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Fees"
        ],
        "summary": "Update a fee on a matter",
        "description": "Updates a specified fee.",
        "operationId": "UpdateFee",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FeeDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FeeDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client."
          }
        }
      },
      "delete": {
        "tags": [
          "Fees"
        ],
        "summary": "Delete a fee",
        "description": "Deletes a specified fee.",
        "operationId": "DeleteFee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client."
          }
        }
      }
    },
    "/firm": {
      "get": {
        "tags": [
          "Firm"
        ],
        "summary": "Get firm",
        "description": "Retrieves the details of the firm associated with the authenticated client.",
        "operationId": "GetFirm",
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Firm' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Firm"
                }
              }
            }
          },
          "404": {
            "description": "When firm does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "Firm"
        ],
        "summary": "Create firm",
        "description": "Creates a firm for the current authenticated client and registers an existing user as a staff member and firm owner.",
        "operationId": "CreateFirm",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFirmDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFirmDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFirmDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the firm to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When staff user does not exist or is already associated with another firm."
          }
        }
      },
      "put": {
        "tags": [
          "Firm"
        ],
        "summary": "Update firm",
        "description": "Updates firm details for the current authenticated client.",
        "operationId": "UpdateFirm",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFirmDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFirmDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFirmDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the firm to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When firm does not exist."
          }
        }
      }
    },
    "/firmusers": {
      "get": {
        "tags": [
          "FirmUsers"
        ],
        "summary": "Get firm staff/user mappings",
        "description": "Retrieves a list of staff/user mappings in the firm associated with the authenticated client.",
        "operationId": "GetFirmUsers",
        "responses": {
          "200": {
            "description": "When request is successful. Returns an array of one or more 'FirmUser' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FirmUser"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/firmusers/{id}": {
      "get": {
        "tags": [
          "FirmUsers"
        ],
        "summary": "Get firm staff/user mapping",
        "description": "Retrieves a staff/user mapping (based on staff or user id parameter provided) in the firm associated with the authenticated client.",
        "operationId": "GetFirmUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'FirmUser' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmUser"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "FirmUsers"
        ],
        "summary": "Update firm staff/user mapping",
        "description": "Updates a staff/user mapping in the firm associated with the authenticated client.",
        "operationId": "UpdateFirmUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmUserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmUserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmUserDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the user to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When staff or user has not been provided."
          },
          "403": {
            "description": "When staff does not belong to the firm."
          },
          "404": {
            "description": "When 'FirmUser' does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "FirmUsers"
        ],
        "summary": "Delete firm staff/user mapping",
        "description": "Removes the user from the firm associated with the authenticated client.\r\n\r\nThe associated staff member is set as a former staff member and if they are a user, becomes a former user.",
        "operationId": "DeleteFirmUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the user to be deleted."
          },
          "404": {
            "description": "When 'FirmUser' object does not exist."
          }
        }
      }
    },
    "/staff": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Search firm staff members",
        "description": "Retrieves a paginated list of staff members (filtered based on search parameters provided) in the firm associated with the authenticated client.",
        "operationId": "GetStaff",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "description": "email, name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Terms",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchTerm"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'Staff' objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Staff"
        ],
        "summary": "Create firm staff member",
        "description": "Creates a staff member in the firm associated with the authenticated client.",
        "operationId": "CreateStaff",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the staff member to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When request is invalid"
          }
        }
      }
    },
    "/staff/{id}": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get firm staff member",
        "description": "Retrieves a staff member (based on staff id parameter provided) in the firm associated with the authenticated client.",
        "operationId": "GetStaffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Staff' object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Staff"
                }
              }
            }
          },
          "400": {
            "description": "When staff id parameter invalid or not provided"
          },
          "404": {
            "description": "When staff member does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Staff"
        ],
        "summary": "Update firm staff member",
        "description": "Updates a staff member in the firm associated with the authenticated client.",
        "operationId": "UpdateStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the staff member to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When staff member does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff"
        ],
        "summary": "Deletes a firm staff member",
        "description": "Sets the staff member from the firm associated with the authenticated client as a former staff member.\r\n\r\nThe staff member is set as a former staff member and if they are a user, becomes a former user. User access is also disabled.",
        "operationId": "DeleteStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the staff member to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When staff member does not exist"
          }
        }
      }
    },
    "/matters/{matterId}/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get invoices.",
        "description": "Returns a list of invoices for a specified matter.",
        "operationId": "GetInvoices",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the matter that the invoice belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedSince",
            "in": "query",
            "description": "Timestamp in ticks. Use this to only get invoices which have been updated",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the invoices",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/items": {
      "get": {
        "tags": [
          "MatterItems"
        ],
        "summary": "Get items on a matter",
        "description": "Returns a list of items on a specified matter.",
        "operationId": "GetMatterItems",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterItems' object containing a list of 'MatterItem' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItems"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItems"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItems"
                }
              }
            }
          },
          "404": {
            "description": "When matter with specified id does not exist."
          }
        }
      }
    },
    "/matters/{matterId}/items/{id}": {
      "get": {
        "tags": [
          "MatterItems"
        ],
        "summary": "Get an item on a matter",
        "description": "Returns an item on a specified matter.",
        "operationId": "GetMatterItem",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterItem' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItem"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter or item does not exist."
          }
        }
      }
    },
    "/layouts": {
      "get": {
        "tags": [
          "LayoutDesigns"
        ],
        "summary": "Get layout designs",
        "description": "Returns a list of layout designs.",
        "operationId": "GetLayoutDesigns",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'LayoutDesignInfo' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutDesignInfoPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/layouts/{id}": {
      "get": {
        "tags": [
          "LayoutDesigns"
        ],
        "summary": "Get a layout design",
        "description": "Retrieves a specified layout design.",
        "operationId": "GetLayoutDesignById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Layout design Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'LayoutDesign' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutDesign"
                }
              }
            }
          },
          "404": {
            "description": "When layout design with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/layouts": {
      "get": {
        "tags": [
          "LayoutMatterItems"
        ],
        "summary": "Get layout items on a matter",
        "description": "Returns a collection of layout items on a specified matter.",
        "operationId": "GetLayoutMatterItems",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'LayoutMatterItemDataCollection' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutMatterItemDataCollection"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/layouts/{itemId}": {
      "get": {
        "tags": [
          "LayoutMatterItems"
        ],
        "summary": "Get a layout item on a matter",
        "description": "Retrieves a layout item on a specified matter.",
        "operationId": "GetLayoutMatterItemById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Layout item Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'LayoutMatterItemData' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutMatterItemData"
                }
              }
            }
          },
          "404": {
            "description": "When layout item with specified id does not exist on the matter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "LayoutMatterItems"
        ],
        "summary": "Merge a layout matter item",
        "description": "Merge layout item changes for a specified layout.",
        "operationId": "MergeLayout",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Matter item Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Data to merge into the existing layout",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutMatterItem"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutMatterItem"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutMatterItem"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the layout item to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When the update payload does not contain an id that matched the id of the item requiring update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When layout item with specified id does not exist on the matter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/layouts/{itemId}/contacts": {
      "get": {
        "tags": [
          "LayoutMatterItems"
        ],
        "summary": "Get contacts on a layout",
        "description": "Returns a list of contacts on a specified layout.",
        "operationId": "GetLayoutMatterItemContacts",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'LayoutContact' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayoutContact"
                  }
                }
              }
            }
          },
          "404": {
            "description": "When contacts do not exist for the layout item with specified id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LayoutMatterItems"
        ],
        "summary": "Add a contact to a layout",
        "description": "Adds a new contact on a specified layout.",
        "operationId": "AddLayoutMatterItemContact",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutContactData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutContactData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutContactData"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted"
          },
          "404": {
            "description": "When layout item with specified id does not exist on the matter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters": {
      "get": {
        "tags": [
          "Matters"
        ],
        "summary": "Get matters",
        "description": "Returns a list of matters.",
        "operationId": "GetMatters",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MatterTypeId",
            "in": "query",
            "description": "Filter by matter type identifier.",
            "schema": {
              "type": "string",
              "example": "009f778f-83df-454a-b344-768a862a7e55"
            },
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          {
            "name": "Status",
            "in": "query",
            "description": "Filter by current status of matter.",
            "schema": {
              "type": "string",
              "example": "Open"
            },
            "example": "Open"
          },
          {
            "name": "IsLead",
            "in": "query",
            "description": "Boolean flag to restrict search to 'Leads'.",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "example": true
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "description": "Deprecated, use updatedSince.\r\nFilter by last updated date of matter.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-04-23T14:00:00Z"
            },
            "example": "2022-04-23T14:00:00Z"
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Filter by matters updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 637873555398585000
            },
            "example": 637873555398585000
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of `Matter` objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Matters"
        ],
        "summary": "Create a matter",
        "description": "Creates a new matter.\r\n            \r\nNote: This endpoint can also be used to create a `Lead`.\r\n\r\nWhen creating a `Lead` you MUST remember to set a valid lead specific `matterTypeId` field (see field description below for more details) and set the `isLead` field to true.\r\n\r\nThe `clientRole` and `otherSideRole` are optional and cannot be identical. They will be set to the default role(s) for the specified matter type - if not provided.",
        "operationId": "CreateMatter",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made or a mandatory field - i.e. client, matter type, status - is not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}": {
      "get": {
        "tags": [
          "Matters"
        ],
        "summary": "Get a matter",
        "description": "Retrieves a specified matter.",
        "operationId": "GetMatterById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a `Matter` object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Matter"
                }
              }
            }
          },
          "404": {
            "description": "When matter with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Matters"
        ],
        "summary": "Update a matter",
        "description": "Updates a specified matter.\r\n            \r\nThe following actions are currently not supported:\r\n            \r\n- `matterTypeId` cannot be changed\r\n            \r\n- `clientIds` cannot be modified\r\n            \r\n- `otherSideIds` list cannot be modified\r\n\r\n- a lead cannot be converted back to a matter and vice versa",
        "operationId": "UpdateMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "When matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Matters"
        ],
        "summary": "Delete a matter",
        "description": "Deletes a specified matter.",
        "operationId": "DeleteMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "When matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles/{roleId}/relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get relationships on a matter",
        "description": "Returns associated relationships for a specified matter and role group.",
        "operationId": "GetRelationshipsOnRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterRelationships' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRelationships"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter or role group does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Add relationship to a role",
        "description": "Appends a new relationship with an existing role in the specified matter.",
        "operationId": "AddAnotherRelationshipToRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the relationship to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter or role does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles/{roleId}/relationships/{id}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get relationship on a role",
        "description": "Returns a relationship with a specified role in a matter.",
        "operationId": "GetRelationshipOnRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Relationship' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter, role group or role (within the specified role group) does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Relationships"
        ],
        "summary": "Update a relationship",
        "description": "Updates a specified relationship on a matter.",
        "operationId": "UpdateRelationship",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the relationship to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter, role or relationship does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get roles on a matter",
        "description": "Returns associated roles for a specified matter.",
        "operationId": "GetRolesOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterRoles' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRoles"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Add role to a matter",
        "description": "Appends a new role in the specified matter.",
        "operationId": "AddAnotherRoleToMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the role to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role on a matter",
        "description": "Returns a role in a specified matter.",
        "operationId": "GetRoleOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Role' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update role on a matter",
        "description": "Updates a specified role on a matter.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the role to be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Remove role from a matter",
        "description": "Removes a specified role from a matter.",
        "operationId": "RemoveRoleFromMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the role to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "When matter does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/mattertypes": {
      "get": {
        "tags": [
          "MatterTypes"
        ],
        "summary": "Get matter types",
        "description": "Returns a paginated list of matter types based on search criteria.\r\n\r\nNote: If no `Location` is provided, all matter types from all locations will be returned.",
        "operationId": "GetMatterTypes",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Searches for partial match on matter type name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "description": "Return matter types from a specific location. In the US API this is the ANSI 2 letter state code (e.g. IL, NY). In the AU API this is shorthand state code (e.g. NSW, ACT, etc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Category",
            "in": "query",
            "description": "Return matter types from a specific category.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Return matter types by category type (i.e. MatterType or LeadType).",
            "schema": {
              "$ref": "#/components/schemas/TypeCategory"
            }
          },
          {
            "name": "Deleted",
            "in": "query",
            "description": "Boolean field to restrict search to deleted matter types. Defaults to 'false'. Set to 'true' to search for deleted matter types only.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'MatterTypeInfo' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterTypeInfoPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/mattertypes/{id}": {
      "get": {
        "tags": [
          "MatterTypes"
        ],
        "summary": "Get a matter type",
        "description": "Retrieves a specified matter type.",
        "operationId": "GetMatterTypeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterType' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterType"
                }
              }
            }
          },
          "404": {
            "description": "When matter type with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/memos": {
      "get": {
        "tags": [
          "Memos"
        ],
        "summary": "Get memos on a matter",
        "description": "Returns a list of memos on the specified matter.",
        "operationId": "GetMemos",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Memo' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemoPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Memos"
        ],
        "summary": "Create a memo on a matter",
        "description": "Creates a memo on the specified matter.",
        "operationId": "CreateMemo",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. The memo has been accepted and will be created shortly.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/matters/{matterId}/memos/{id}": {
      "get": {
        "tags": [
          "Memos"
        ],
        "summary": "Get a memo",
        "description": "Retrieves a specified memo.",
        "operationId": "GetMemoById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the specified memo.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              }
            }
          },
          "404": {
            "description": "When the specified memo does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "Memos"
        ],
        "summary": "Update a memo",
        "description": "Updates a specified memo.",
        "operationId": "UpdateMemo",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MemoDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. The memo has been accepted and will be updated shortly.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "When the specified memo does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Memos"
        ],
        "summary": "Delete a memo",
        "description": "Deletes a specified memo.",
        "operationId": "DeleteMemo",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is successful. The request has been accepted and the memo will be deleted shortly.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "When the specified memo does not exist."
          }
        }
      }
    },
    "/stages": {
      "get": {
        "tags": [
          "FirmMatterStages"
        ],
        "summary": "Get stage to matter mappings in the firm",
        "description": "Returns a list of stage to matter mappings in the firm.",
        "operationId": "GetMatterStages",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns items updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "description": "Deprecated, use updatedSince\r\nReturns items updated since a specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matter stage mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterStagePagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/stages": {
      "get": {
        "tags": [
          "Stages"
        ],
        "summary": "Get a matter stage information",
        "description": "Returns the specified matters stage information.",
        "operationId": "GetStagesOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterStage' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterStage"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When matter stage information with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/stagesets": {
      "get": {
        "tags": [
          "StageSets"
        ],
        "summary": "Get stage sets for the firm",
        "description": "Returns a list of stage sets for the firm.",
        "operationId": "GetStageSets",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns items updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "description": "Deprecated, use updatedSince\r\nReturns items updated since a specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the stage sets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageSetPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/stagesets/{id}": {
      "get": {
        "tags": [
          "StageSets"
        ],
        "summary": "Get a stage set",
        "description": "Returns the specified stage set.",
        "operationId": "GetStageSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'StageSet' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageSet"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When stage set with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/stagesets/{stageSetId}/stages/{id}": {
      "get": {
        "tags": [
          "StageSets"
        ],
        "summary": "Get a stage on a stage set",
        "description": "Return the specified stage on the stage set.",
        "operationId": "GetStageOnStageSet",
        "parameters": [
          {
            "name": "stageSetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Stage' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stage"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made."
          },
          "404": {
            "description": "When stage or stage set with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task",
        "description": "Retrieves a specified task.",
        "operationId": "GetTaskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Task' object.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified id does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task",
        "description": "Updates a specified task.",
        "operationId": "UpdateTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task to be updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a task",
        "description": "Deletes a specified task.",
        "operationId": "DeleteTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task to be deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get tasks",
        "description": "Returns a list of tasks.",
        "operationId": "GetTasks",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns tasks updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Task' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a task",
        "description": "Creates a task.",
        "operationId": "CreateTask",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task to be created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/subtasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get sub tasks on a task",
        "description": "Returns a list of sub tasks.",
        "operationId": "GetSubTasks",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Task' objects.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "Task not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": "Retrieves a specified user. Only accessible using client credentials grant.",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'User' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When user with specified id is not associated with authenticated client.\r\n\r\nWhen the request is not made using client credentials grant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "When user with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "Creates a user. Only accessible using client credentials grant.\r\n            \r\nSends an email with a generated password if the password is missing.",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'User' object."
          },
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "When user or password validation fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When the request is not made using client credentials grant."
          }
        }
      }
    },
    "/webhooks/events": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get event types",
        "description": "Returns the available event types.",
        "operationId": "GetEventTypes",
        "responses": {
          "200": {
            "description": "When request is successful. Returns the available event types.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringCollection"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhook subscriptions",
        "description": "Returns existing webhook subscriptions.",
        "operationId": "GetSubscriptions",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns existing webhook subscriptions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made."
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create new webhook subscription",
        "description": "Creates a new webhook subscription with the specified subscription details.",
        "operationId": "CreateSubscription",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When request is successful. Returns the new webhook subscriptions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook subscription",
        "description": "Returns the webhook subscription.",
        "operationId": "GetSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the webhook subscriptions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook subscription",
        "description": "Updates a webhook subscription with the specified subscription details.",
        "operationId": "UpdateSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When request is successful. Returns updated webhook subscriptions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "When webhook subscription with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When the webhook subscription is not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Deletes a webhook subscription",
        "description": "Deletes and unsubscribes from the specified webhook subscription.",
        "operationId": "DeleteSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Deletes the webhook subscription."
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{id}/notify": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Notify a webhook subscription",
        "description": "Notifies a webhook subscription with a 'noop' event type.\r\n            \r\nUsed for testing purposes.",
        "operationId": "Notify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Notifies the webhook subscription."
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountTypes": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "BankAccount": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the bank account.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypes"
          },
          "accountName": {
            "type": "string",
            "description": "Account Name.",
            "nullable": true,
            "example": "John Smith"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account Number.",
            "nullable": true,
            "example": "10436489"
          },
          "bankName": {
            "type": "string",
            "description": "Bank Name.",
            "nullable": true,
            "example": "Commonwealth Bank"
          },
          "branchNumber": {
            "type": "string",
            "description": "Branch Number.",
            "nullable": true,
            "example": "062201"
          },
          "branchName": {
            "type": "string",
            "description": "Branch Name.",
            "nullable": true,
            "example": "Sydney"
          }
        },
        "additionalProperties": false
      },
      "BankAccountBalance": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the bank account. This is the same id used for BankAccount.",
            "nullable": true,
            "example": "611ccf16-df18-433c-9900-2496f3ab902c"
          },
          "balance": {
            "type": "number",
            "description": "Total balance of the bank account.",
            "format": "double",
            "example": 1000
          },
          "contactBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountContactBalance"
            },
            "description": "List of contact balances. If balances are stored by matter, not by contact, then there can be\r\na contact balance with no contact id. In this case, MatterBalances should be used instead.",
            "nullable": true
          },
          "matterBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountMatterBalance"
            },
            "description": "List of matter balances. A matter balance will be equal to the sum of all contact balances with\r\nthe same MatterId.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountContactBalance": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "18c05819-c321-4907-800c-d5a608729c5a"
          },
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the matter.",
            "nullable": true,
            "example": "39a0a7d0-dd1c-4dea-a3f6-f8b35656f168"
          },
          "balance": {
            "type": "number",
            "description": "Balance belonging to the specified contact and matter.",
            "format": "double",
            "example": 1000
          }
        },
        "additionalProperties": false
      },
      "BankAccountMatterBalance": {
        "type": "object",
        "properties": {
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the matter.",
            "nullable": true,
            "example": "39a0a7d0-dd1c-4dea-a3f6-f8b35656f168"
          },
          "balance": {
            "type": "number",
            "description": "Balance belonging to the specified matter.",
            "format": "double",
            "example": 1000
          },
          "unpresentedChequesBalance": {
            "type": "number",
            "description": "Balance of the unpresented cheques for this matter. A cheque is considered \r\nunpresented if the related transaction has not been reconciled. If this balance is not zero,\r\nsome actions on the matter are restricted (e.g. closing or cancelling the matter).",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Activity": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the activity.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "versionId": {
            "type": "string",
            "description": "Unique version identifier of the activity.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that last updated the activity.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "type": {
            "$ref": "#/components/schemas/EntryType"
          },
          "description": {
            "type": "string",
            "description": "Description of the activity.",
            "nullable": true,
            "example": "Contract review"
          },
          "code": {
            "type": "string",
            "description": "Code of the activity.",
            "nullable": true,
            "example": "CR"
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the activity is billable.",
            "example": true
          },
          "rateType": {
            "$ref": "#/components/schemas/ActivityRateType"
          },
          "rate": {
            "type": "number",
            "description": "Rate of the activity in dollars.\r\nIf set, rate type must be OverrideRateForAllStaff",
            "format": "double",
            "example": 23.2
          },
          "quantity": {
            "type": "number",
            "description": "Quantity for the activity.",
            "format": "double",
            "example": 3
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.",
            "example": true
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Sets tax rate to 0 for the entry (e.g. expense).",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True if the activity is deleted.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ActivityDto": {
        "type": "object",
        "properties": {
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user updating the activity.\r\n\r\nThis field is reserved for server-to-server operations.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "type": {
            "$ref": "#/components/schemas/EntryType"
          },
          "description": {
            "type": "string",
            "description": "Description of the activity.",
            "nullable": true,
            "example": "Review contract"
          },
          "code": {
            "type": "string",
            "description": "Code of the activity.",
            "nullable": true,
            "example": "RC"
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the activity is billable.",
            "example": false
          },
          "rateType": {
            "$ref": "#/components/schemas/ActivityRateType"
          },
          "rate": {
            "type": "number",
            "description": "Rate of the activity in dollars.\r\n\r\nIf set, rateType must be OverrideRateForAllStaff",
            "format": "double",
            "nullable": true,
            "example": 23.21
          },
          "quantity": {
            "type": "number",
            "description": "Quantity for the activity.",
            "format": "double",
            "nullable": true,
            "example": 5
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.",
            "example": false
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Sets tax rate to 0 for the entry (e.g. expense).",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ActivityPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "ActivityRateType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EntryType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Address": {
        "type": "object",
        "properties": {
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type (e.g. Unit,Flat,Villa,Suite,etc.) in address (if applicable).",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type (e.g. Street,Road,Avenue,Lane,etc.) in address.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "county": {
            "type": "string",
            "description": "County (if applicable)",
            "nullable": true,
            "example": ""
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "readOnly": true,
            "example": ""
          },
          "poBoxType": {
            "type": "string",
            "description": "PO box type in address (if applicable).",
            "nullable": true,
            "readOnly": true,
            "example": ""
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO box Number in address (if applicable).",
            "nullable": true,
            "readOnly": true,
            "example": ""
          }
        },
        "additionalProperties": false
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type (e.g. Unit,Flat,Villa,Suite,etc.) in address (if applicable).",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type (e.g. Street,Road,Avenue,Lane,etc.) in address.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "county": {
            "type": "string",
            "description": "County (if applicable).",
            "nullable": true,
            "example": ""
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": ""
          },
          "poBoxType": {
            "type": "string",
            "description": "PO box type in address (if applicable).",
            "nullable": true,
            "example": ""
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO box Number in address (if applicable).",
            "nullable": true,
            "example": ""
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company's name.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "type": {
            "type": "string",
            "description": "Company's type.\r\n\r\nAccepted values for USA - Corporation, Government Agency, Limited Liability Company, Sole Proprietor, Partnership, Not-for-Profit.\r\n\r\nAccepted values for AUS - Company, Sole Proprietor, Partnership, Government Department.",
            "nullable": true,
            "example": "Corporation"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "email": {
            "type": "string",
            "description": "Company's email address.",
            "nullable": true,
            "example": "contact@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for company (if applicable).",
            "nullable": true,
            "example": "Construction company"
          },
          "abn": {
            "type": "string",
            "description": "Company's Australian Business Number (only applicable for AUS).",
            "nullable": true,
            "example": "01234567890"
          },
          "companyNumberType": {
            "type": "string",
            "description": "Company's Australian company number type (only applicable for AUS).\r\n\r\nAccepted values - ACN, ARBN",
            "nullable": true,
            "example": "ACN"
          },
          "companyNumber": {
            "type": "string",
            "description": "Company's Australian Company Number (only applicable for AUS).",
            "nullable": true,
            "example": "234567890"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "businessAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "staff": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Company's staff hypermedia links.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company's name.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "type": {
            "type": "string",
            "description": "Company's type.\r\n\r\nAccepted values for USA - Corporation, Government Agency, Limited Liability Company, Sole Proprietor, Partnership, Not-for-Profit.\r\n\r\nAccepted values for AUS - Company, Sole Proprietor, Partnership, Government Department.",
            "nullable": true,
            "example": "Corporation"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "email": {
            "type": "string",
            "description": "Company's email address.",
            "nullable": true,
            "example": "contact@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for company (if applicable).",
            "nullable": true,
            "example": "Recently merged with Cyberdyne Inc."
          },
          "businessAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "abn": {
            "type": "string",
            "description": "Company's Australian Business Number (only applicable for AUS).",
            "nullable": true,
            "example": "01234567890"
          },
          "companyNumberType": {
            "type": "string",
            "description": "Company's Australian company number type (only applicable for AUS).\r\n\r\nAccepted values - ACN, ARBN.",
            "nullable": true,
            "example": "ACN"
          },
          "companyNumber": {
            "type": "string",
            "description": "Company's Australian Company Number (only applicable for AUS).",
            "nullable": true,
            "example": "234567890"
          }
        },
        "additionalProperties": false
      },
      "Contact": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the contact.",
            "nullable": true,
            "example": "EXT01"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "trust": {
            "$ref": "#/components/schemas/Trust"
          },
          "groupOfPeople": {
            "$ref": "#/components/schemas/GroupOfPeople"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Returns true if the contact is deleted.\r\n<example>true</example>"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false
      },
      "ContactDto": {
        "type": "object",
        "properties": {
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the contact.",
            "nullable": true,
            "example": "EXT01"
          },
          "person": {
            "$ref": "#/components/schemas/PersonDto"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "trust": {
            "$ref": "#/components/schemas/TrustDto"
          },
          "groupOfPeople": {
            "$ref": "#/components/schemas/GroupOfPeopleDto"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Contact can be restored by setting this to false.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ContactPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "ContactRelationDto": {
        "type": "object",
        "properties": {
          "relatedContactId": {
            "type": "string",
            "description": "Unique identifier of the related contact.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "businessRole": {
            "type": "string",
            "description": "Business role of related contact.\r\n\r\nOnly applicable for companies (not trusts).",
            "nullable": true,
            "example": "Bookkeeper"
          }
        },
        "additionalProperties": false
      },
      "GroupOfPeople": {
        "type": "object",
        "properties": {
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "List of contact person hypermedia links",
            "nullable": true
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false
      },
      "GroupOfPeopleDto": {
        "type": "object",
        "properties": {
          "peopleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of contact person Ids.",
            "nullable": true,
            "example": [
              "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2",
              "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
            ]
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          }
        },
        "additionalProperties": false
      },
      "ISearchExpressionProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "LinkPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Contact person's title. Accepts custom values.\r\n\r\ne.g. Mr, Mrs, Miss, Honourable, Judge.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Contact person's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Contact person's middle name (if applicable).",
            "nullable": true,
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "description": "Contact person's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "nameSuffix": {
            "type": "string",
            "description": "Contact person's name suffix (if applicable).",
            "nullable": true,
            "example": "PhD"
          },
          "customName": {
            "type": "string",
            "description": "Contact person's custom name to be used in letters (if applicable).",
            "nullable": true,
            "example": "Johnny"
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "phone2": {
            "$ref": "#/components/schemas/PhoneNumberWithExtension"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "email": {
            "type": "string",
            "description": "Contact person's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about contact (if applicable).",
            "nullable": true,
            "example": "Prefers to answer work phone."
          },
          "occupation": {
            "type": "string",
            "description": "Contact person's occupation.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "gender": {
            "type": "string",
            "description": "Contact person's gender.\r\n\r\nAccepted values - Male, Female.",
            "nullable": true,
            "example": "Male"
          },
          "maritalStatus": {
            "type": "string",
            "description": "Contact person's marital status. Accepts custom values.\r\n\r\ne.g. Single, Married, Separated, Divorced, Widowed, De facto.",
            "nullable": true,
            "example": "Single"
          },
          "specialNeeds": {
            "type": "string",
            "description": "Brief description of any special needs (if applicable).\r\n\r\nOnly supported in Australia (not the US).",
            "nullable": true,
            "example": "Wheelchair access"
          },
          "birthDate": {
            "type": "string",
            "description": "Contact person's date of birth.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "birthPlace": {
            "type": "string",
            "description": "Contact person's place of birth.",
            "nullable": true,
            "example": "Chicago"
          },
          "birthState": {
            "type": "string",
            "description": "Contact person's birth state.",
            "nullable": true,
            "example": "Illinois"
          },
          "birthCountry": {
            "type": "string",
            "description": "Contact person's birth country.",
            "nullable": true,
            "example": "USA"
          },
          "identificationNumberType": {
            "type": "string",
            "description": "Contact person's type of identification.",
            "nullable": true,
            "example": "Passport"
          },
          "identificationNumber": {
            "type": "string",
            "description": "Contact person's identification number.",
            "nullable": true,
            "example": "PP123456789"
          }
        },
        "additionalProperties": false
      },
      "PersonDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Contact person's title. Accepts custom values.\r\n\r\ne.g. Mr, Mrs, Miss, Honourable, Judge.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Contact person's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Contact person's middle name (if applicable).",
            "nullable": true,
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "description": "Contact person's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "nameSuffix": {
            "type": "string",
            "description": "Contact person's name suffix (if applicable).",
            "nullable": true,
            "example": "PhD"
          },
          "customName": {
            "type": "string",
            "description": "Contact person's custom name to be used in letters (if applicable).",
            "nullable": true,
            "example": "Johnny"
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "phone2": {
            "$ref": "#/components/schemas/PhoneNumberWithExtensionDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "email": {
            "type": "string",
            "description": "Contact person's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about contact (if applicable).",
            "nullable": true,
            "example": "Prefers to answer work phone."
          },
          "occupation": {
            "type": "string",
            "description": "Contact person's occupation.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "birthDate": {
            "type": "string",
            "description": "Contact person's date of birth.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "birthPlace": {
            "type": "string",
            "description": "Contact person's place of birth.",
            "nullable": true,
            "example": "Chicago"
          },
          "birthState": {
            "type": "string",
            "description": "Contact person's birth state.",
            "nullable": true,
            "example": "Illinois"
          },
          "birthCountry": {
            "type": "string",
            "description": "Contact person's birth country.",
            "nullable": true,
            "example": "USA"
          },
          "identificationNumberType": {
            "type": "string",
            "description": "Contact person's type of identification.",
            "nullable": true,
            "example": "Passport"
          },
          "identificationNumber": {
            "type": "string",
            "description": "Contact person's identification number.",
            "nullable": true,
            "example": "PP123456789"
          },
          "gender": {
            "type": "string",
            "description": "Contact person's gender.\r\n\r\nAccepted values - Male, Female",
            "nullable": true,
            "example": "Male"
          },
          "maritalStatus": {
            "type": "string",
            "description": "Contact person's marital status. Accepts custom values.\r\n\r\ne.g. Single, Married, Separated, Divorced, Widowed, De facto.",
            "nullable": true,
            "example": "Single"
          },
          "specialNeeds": {
            "type": "string",
            "description": "Brief description of an special needs (if applicable).",
            "nullable": true,
            "example": "Wheelchair access"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberDto": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberWithExtension": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          },
          "extension": {
            "type": "string",
            "description": "Phone number extension.",
            "nullable": true,
            "example": "103"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberWithExtensionDto": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          },
          "extension": {
            "type": "string",
            "description": "Phone number extension. Accepts numeric characters only.",
            "nullable": true,
            "example": "103"
          }
        },
        "additionalProperties": false
      },
      "PoBoxAddress": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "poBoxType": {
            "type": "string",
            "description": "PO Box type. Accepts custom values.\r\n            \r\ne.g. Care PO, PO Box, Locked Bag, RMS.",
            "nullable": true,
            "example": "Locked Bag"
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO Box number.",
            "nullable": true,
            "example": "12345"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          }
        },
        "additionalProperties": false
      },
      "PoBoxAddressDto": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "poBoxType": {
            "type": "string",
            "description": "PO Box type. Accepts custom values.\r\n            \r\ne.g. Care PO, PO Box, Locked Bag, RMS.",
            "nullable": true,
            "example": "Locked Bag"
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO Box number.",
            "nullable": true,
            "example": "12345"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          }
        },
        "additionalProperties": false
      },
      "SearchTerm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "searchFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "operator": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "validSyntax": {
            "type": "boolean"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "expressionProvider": {
            "$ref": "#/components/schemas/ISearchExpressionProvider"
          }
        },
        "additionalProperties": false
      },
      "Trust": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trust's name.",
            "nullable": true,
            "example": "Trinity Trust"
          },
          "status": {
            "type": "string",
            "description": "Trust's status.\r\n\r\nStandard values are: as Trustee of, as Trustees of, as Co-Trustees of, as an Individual and as Trustee of, as Successor Trustee of.\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "as Trustee of"
          },
          "trustNumber": {
            "type": "string",
            "description": "Trust's number.",
            "nullable": true,
            "example": "12345678"
          },
          "executedDate": {
            "type": "string",
            "description": "Date trust was executed.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "trustees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trustee"
            },
            "description": "List of trustees.",
            "nullable": true,
            "example": [
              {
                "Name": "John Smith",
                "Type": "Individual"
              },
              {
                "Name": "Smithfield Steel",
                "Type": "Company"
              }
            ]
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Trust's contacts hypermedia links.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TrustDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trust's name.",
            "nullable": true,
            "example": "Trinity Trust"
          },
          "status": {
            "type": "string",
            "description": "Trust's status.\r\n\r\nStandard values are: as Trustee of, as Trustees of, as Co-Trustees of, as an Individual and as Trustee of, as Successor Trustee of.\r\n\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "as Trustee of"
          },
          "trustNumber": {
            "type": "string",
            "description": "Trust's number.",
            "nullable": true,
            "example": "12345678"
          },
          "executedDate": {
            "type": "string",
            "description": "Date trust was executed.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "trustees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrusteeDto"
            },
            "description": "List of trustees.",
            "nullable": true,
            "example": [
              {
                "Name": "John Smith",
                "Type": "Individual"
              },
              {
                "Name": "Smithfield Steel",
                "Type": "Company"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Trustee": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trustee's name.",
            "nullable": true,
            "example": "John Smith"
          },
          "type": {
            "type": "string",
            "description": "Type of trustee.\r\n\r\nStandard values are: Company, Individual.\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "Individual"
          }
        },
        "additionalProperties": false
      },
      "TrusteeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trustee's name.",
            "nullable": true,
            "example": "John Smith"
          },
          "type": {
            "type": "string",
            "description": "Type of trustee.\r\n\r\nStandard values are: Company, Individual.\r\n\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "Individual"
          }
        },
        "additionalProperties": false
      },
      "AddFileDto": {
        "required": [
          "fileName"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Full name of the file including the file extension",
            "example": "court filing.pdf"
          },
          "folderId": {
            "type": "string",
            "description": "Unique identifier of the folder to add the file to. If null it will be placed in the root folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the file owner. If null it will fallback to the authenticated user",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "dateCreated": {
            "type": "string",
            "description": "The original datetime that the file was created. If null the current datetime will be used",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "DownloadFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "Unique identifier of the requested file",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Temporary Link to download file",
            "nullable": true,
            "example": ""
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date/time when the download link is no longer accessible",
            "format": "date-time",
            "example": "2022-04-23T14:30:00Z"
          },
          "sizeBytes": {
            "type": "integer",
            "description": "Size of the requested file (in bytes)",
            "format": "int64",
            "example": 19104768
          }
        },
        "additionalProperties": false
      },
      "EditFileDto": {
        "required": [
          "fileName"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Full name of the file including the file extension",
            "example": "court filing.pdf"
          },
          "folderId": {
            "type": "string",
            "description": "Unique identifier of the folder to add the file to. If null it will be placed in the root folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user modifying the file. If null it will fallback to the authenticated user",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "fileAdditionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of KeyValuePair(string, string) to update File meta data.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "File": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the file",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "folder": {
            "$ref": "#/components/schemas/Link"
          },
          "name": {
            "type": "string",
            "description": "Name of the file, excluding file extension",
            "nullable": true,
            "example": "court filing"
          },
          "fileExtension": {
            "type": "string",
            "description": "Extension of the file",
            "nullable": true,
            "example": ".pdf"
          },
          "ownerId": {
            "type": "string",
            "description": "Unique identifier of the staff member who created/uploaded this file",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "to": {
            "type": "string",
            "description": "The 'To' or recipients' email address (only applicable for email files)",
            "nullable": true,
            "example": "recipient@email.com"
          },
          "from": {
            "type": "string",
            "description": "The 'From' or sender's email address (only applicable for email files)",
            "nullable": true,
            "example": "sender@email.com"
          },
          "dateCreated": {
            "type": "string",
            "description": "The original datetime that the file was created",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "sizeBytes": {
            "type": "integer",
            "description": "Size of the file (in bytes)",
            "format": "int64",
            "example": 19104768
          },
          "downloadInfo": {
            "$ref": "#/components/schemas/Link"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of file meta data as KeyValuePair(string, string).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FilePagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Folder": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier of the parent folder",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder",
            "nullable": true,
            "example": "Property Documents"
          }
        },
        "additionalProperties": false
      },
      "FolderDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of the folder",
            "example": "Property Documents"
          },
          "parentFolderId": {
            "type": "string",
            "description": "Unique identifier of the parent folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user modifying the folder. If null it will fallback to the authenticated user",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          }
        },
        "additionalProperties": false
      },
      "FolderListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            },
            "description": "List of folders",
            "nullable": true,
            "readOnly": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "List of files",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FolderListingPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderListing"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "UploadFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "Unique identifier of the file",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "uploadUrl": {
            "type": "string",
            "description": "Temporary Link to upload file",
            "nullable": true,
            "example": ""
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date/time when the upload link is no longer accessible",
            "format": "date-time",
            "example": "2022-04-23T14:30:00Z"
          }
        },
        "additionalProperties": false
      },
      "AddAttachmentDto": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of the attachment file. Mandatory field.\r\nAccepted file types are: jpeg, jpg, pdf, png.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object holds data for a request to upload an expense attachment."
      },
      "AddAttachmentInfo": {
        "type": "object",
        "properties": {
          "expenseId": {
            "type": "string",
            "description": "The id of the expense that a file will be uploaded to.",
            "nullable": true
          },
          "uploadUrl": {
            "type": "string",
            "description": "The URL for uploading the file.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Return value for a request to add an expense attachemnt."
      },
      "Expense": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "versionId": {
            "type": "string",
            "description": "Unique version identifier of the expense.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "createdByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that created the expense.",
            "nullable": true,
            "example": "8a7f40ea-4123-4ebe-bb05-e9b4b666e706"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member.",
            "nullable": true,
            "example": "47efff74-3e4b-45b3-bddf-affc6649db0b"
          },
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the associated matter.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "fdb766bc-eb20-4bc1-9417-08b51a7b2286"
          },
          "origin": {
            "type": "string",
            "description": "Where the expense originated from.",
            "nullable": true
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the expense.",
            "nullable": true,
            "example": "PRT"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the expense.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the expense.",
            "nullable": true,
            "example": "Print documents"
          },
          "expenseDate": {
            "type": "string",
            "description": "The date of the expense.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the expense in units (if not applicable, use 1).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 3
          },
          "price": {
            "type": "number",
            "description": "The price of the expense in dollars. Limited to 2 decimal places (cents).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 350.32
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the expense. Calculated as Price * Quantity.\r\n\r\nThis amount ignores GST (if applicable). See Billing.Expenses.Api.Shared.Resources.Expense.AmountExcTax and Billing.Expenses.Api.Shared.Resources.Expense.AmountIncTax.",
            "format": "double",
            "example": 900.21
          },
          "amountExcTax": {
            "type": "number",
            "description": "Amount excluding tax. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 810.01
          },
          "amountIncTax": {
            "type": "number",
            "description": "Amount including tax. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 900.21
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the expense in dollars. Only applicable in AU.",
            "format": "double",
            "example": 90
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.\r\n(Amount = Price * Quantity, GST = value of the Tax field)",
            "example": false
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the expense has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the expense is written off. True only allowed if IsBillable is true. \r\n\r\nWritten off expenses will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the expense is billable. Non-billable expense will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the expense is invoiced externally.",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True if the expense is deleted.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ExpenseDto": {
        "type": "object",
        "properties": {
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user updating the expense.\r\n\r\nThis field is reserved for server-to-server operations.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member.",
            "nullable": true,
            "example": "47efff74-3e4b-45b3-bddf-affc6649db0b"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "fdb766bc-eb20-4bc1-9417-08b51a7b2286"
          },
          "expenseDate": {
            "type": "string",
            "description": "The date of the expense.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the expense.",
            "nullable": true,
            "example": "PRT"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the expense.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the expense.",
            "nullable": true,
            "example": "Print documents"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the expense in units (if not applicable, use 1).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 3
          },
          "price": {
            "type": "number",
            "description": "The price of the expense in dollars. Limited to 2 decimal places (cents).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 350.32
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the expense in dollars. Only applicable in AU.",
            "format": "double",
            "nullable": true,
            "example": 90
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.\r\n(Amount = Price * Quantity, GST = value of the Tax field)",
            "example": false
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the expense has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the expense is written off. True only allowed if IsBillable is true. \r\n\r\nWritten off expenses will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the expense is billable. Non-billable expense will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the expense is invoiced externally.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ExpensePagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Expense"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Fee": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the fee.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "versionId": {
            "type": "string",
            "description": "Unique version identifier of the fee.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the associated matter.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "createdByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that created the fee.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "lastUpdatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that updated the fee.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the fee.",
            "nullable": true,
            "example": "PRT"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the fee.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the fee.",
            "nullable": true,
            "example": "Print documents"
          },
          "feeDate": {
            "type": "string",
            "description": "The date of the fee.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "feeType": {
            "$ref": "#/components/schemas/EntryType"
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the fee has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the fee is written off. True only allowed if IsBillable is true.\r\n\r\nWritten off fee will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee is billable. Non-billable fee will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "nullable": true,
            "example": false
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the fee in dollars. Only applicable in AU.",
            "format": "double",
            "example": 35
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.",
            "example": false
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the fee in minutes. This duration is used if there are no sub activities.",
            "format": "int64",
            "example": 32
          },
          "rate": {
            "type": "number",
            "description": "The rate of the fee in dollars.",
            "format": "double",
            "example": 350
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the fee in dollars. Calculated using Rate and Duration depending on the fee type.\r\n\r\nThis amount includes tax depending on the TaxInclusive property. See Billing.Fees.Api.Shared.Resources.Fee.AmountExcTax and Billing.Fees.Api.Shared.Resources.Fee.AmountIncTax.",
            "format": "double",
            "example": 350
          },
          "amountExcTax": {
            "type": "number",
            "description": "Amount excluding tax in dollars. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 315
          },
          "amountIncTax": {
            "type": "number",
            "description": "Amount including tax in dollars. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 350
          },
          "billableAmountExcTax": {
            "type": "number",
            "description": "Billable amount excluding tax in dollars. If fee is billable, value will be the same as AmountExcTax. If it's non-billable,\r\nvalue will be 0.\r\n\r\nIf the fee is partially billable (i.e. has source items, some of which are billable and some not),\r\nthis value will contain the amount calculated from billable items only.",
            "format": "double",
            "example": 315
          },
          "billableTax": {
            "type": "number",
            "description": "Billable tax in dollars. If fee is billable, value will be the same as Tax. If it's non-billable,\r\nvalue will be 0.\r\n\r\nIf the fee is partially billable (i.e. has source items, some of which are billable\r\nand some not), this value will contain the tax calculated from billable items only.\r\nIn all other cases, the value will be the same as Tax.",
            "format": "double",
            "example": 35
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True if the fee is deleted.",
            "example": false
          },
          "sourceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeSourceItem"
            },
            "description": "The source items on the fee.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeDto": {
        "type": "object",
        "properties": {
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user updating the fee.\r\n\r\nThis field is reserved for server-to-server operations.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the fee.",
            "nullable": true,
            "example": "PRT"
          },
          "feeType": {
            "$ref": "#/components/schemas/EntryType"
          },
          "feeDate": {
            "type": "string",
            "description": "The date of the fee.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the fee.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the fee.",
            "nullable": true,
            "example": "Print documents"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the fee in minutes. This duration is used if there are no sub activities.",
            "format": "int64",
            "example": 32
          },
          "rate": {
            "type": "number",
            "description": "The rate of the fee in dollars.",
            "format": "double",
            "example": 350
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the fee in dollars. Only applicable in AU.",
            "format": "double",
            "nullable": true,
            "example": 35
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.\r\n\r\n(Amount = Price * Quantity, GST = value of the Tax field)",
            "example": false
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the fee has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the fee is written off. True only allowed if IsBillable is true.\r\n\r\nWritten off fee will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee is billable. Non-billable fee will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the fee is invoiced externally.",
            "example": false
          },
          "sourceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeSourceItemDto"
            },
            "description": "The source items on the fee.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeePagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "FeeSourceItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "description": {
            "type": "string",
            "description": "The description.",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes.",
            "format": "int64"
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee source item is billable."
          }
        },
        "additionalProperties": false
      },
      "FeeSourceItemDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description.",
            "nullable": true,
            "example": "Print document"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes.",
            "format": "int64",
            "example": 5
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee source item is billable.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "CreateFirmDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "abn": {
            "type": "string",
            "description": "Australian Business Number of the firm (only applicable for AUS).",
            "nullable": true,
            "example": "01234567890"
          },
          "acn": {
            "type": "string",
            "description": "Australian Company Number of the firm (only applicable for AUS).",
            "nullable": true,
            "example": "234567890"
          },
          "streetAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether firm is being created for internal use. Internal firms will not be subscribed for payment processing and will not be charged.",
            "example": false
          },
          "staff": {
            "$ref": "#/components/schemas/StaffDto"
          }
        },
        "additionalProperties": false
      },
      "Firm": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the firm.",
            "nullable": true,
            "example": "f4ff1eff-b7fe-4d46-4e46-01d985838d76"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "abn": {
            "type": "string",
            "description": "Australian Business Number of the firm (if applicable).",
            "nullable": true,
            "example": "1234567890"
          },
          "acn": {
            "type": "string",
            "description": "Australian Company Number of the firm (if applicable).",
            "nullable": true,
            "example": "1234567890"
          },
          "streetAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "logo": {
            "type": "string",
            "description": "Logo of the firm.",
            "nullable": true,
            "example": "https://example-logo-url.com/image"
          }
        },
        "additionalProperties": false
      },
      "FirmDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "abn": {
            "type": "string",
            "description": "Australian Business Number of the firm (only applicable for AUS).",
            "nullable": true,
            "example": "01234567890"
          },
          "acn": {
            "type": "string",
            "description": "Australian Company Number of the firm (only applicable for AUS).",
            "nullable": true,
            "example": "234567890"
          },
          "streetAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          }
        },
        "additionalProperties": false
      },
      "FirmUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the staff member.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "isFormerUser": {
            "type": "boolean",
            "description": "Returns true if this user is a former user.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "FirmUserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the associated user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member..",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          }
        },
        "additionalProperties": false
      },
      "Product": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Available products: \"BillingOnly = 1\", \"SmokeballMid = 2\", \"Smokeball = 3\"",
        "format": "int32"
      },
      "Staff": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the staff member.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "title": {
            "type": "string",
            "description": "Staff member's title.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Staff member's middle name (if applicable).",
            "nullable": true,
            "example": ""
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "initials": {
            "type": "string",
            "description": "Staff member's initials.",
            "nullable": true,
            "example": "JS"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "email": {
            "type": "string",
            "description": "Staff member's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "role": {
            "type": "string",
            "description": "Staff member's role.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "avatar": {
            "type": "string",
            "description": "Staff member's avatar.",
            "nullable": true,
            "example": "https://example-avatar-url.com/image"
          },
          "former": {
            "type": "boolean",
            "description": "Whether he/she is a former member.",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether staff member is enabled.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "StaffDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the associated user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "title": {
            "type": "string",
            "description": "Staff member's title.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Staff member's middle name (if applicable).",
            "nullable": true,
            "example": ""
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "initials": {
            "type": "string",
            "description": "Staff member's initials.",
            "nullable": true,
            "example": "JS"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "email": {
            "type": "string",
            "description": "Staff member's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "role": {
            "type": "string",
            "description": "Staff member's role.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "avatar": {
            "type": "string",
            "description": "Staff member's avatar.",
            "nullable": true,
            "example": "https://example-avatar-url.com/image"
          },
          "former": {
            "type": "boolean",
            "description": "Whether he/she is a former member.",
            "nullable": true,
            "example": false
          }
        },
        "additionalProperties": false
      },
      "StaffPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Staff"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "UpdateFirmDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "abn": {
            "type": "string",
            "description": "Australian Business Number of the firm (only applicable for AUS).",
            "nullable": true,
            "example": "01234567890"
          },
          "acn": {
            "type": "string",
            "description": "Australian Company Number of the firm (only applicable for AUS).",
            "nullable": true,
            "example": "234567890"
          },
          "streetAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "additionalProperties": false
      },
      "Discount": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "fixedDiscount": {
            "type": "number",
            "description": "The amount of fixed discount applied.",
            "format": "double",
            "example": 100
          },
          "percentage": {
            "type": "number",
            "description": "The amount of percentage discount applied.",
            "format": "double",
            "example": 0
          },
          "description": {
            "type": "string",
            "description": "Discount description.",
            "nullable": true,
            "example": "Friend of the Firm"
          }
        },
        "additionalProperties": false
      },
      "DiscountType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the invoice.",
            "nullable": true,
            "example": "16567e88-784c-470e-8952-e5a70fe2eb0c"
          },
          "versionId": {
            "type": "string",
            "description": "The unique identifier of the invoice version.",
            "nullable": true,
            "example": "39ffde97-eeeb-4747-bb8f-7c7c10b3c985"
          },
          "matterId": {
            "type": "string",
            "description": "The unique identifier of the matter that the invoice belongs to.",
            "nullable": true,
            "example": "6398a045-509e-49a2-9268-bb8231fa9340"
          },
          "lastUpdatedByUserId": {
            "type": "string",
            "description": "The unique identifier of the user that last updated the invoice.",
            "nullable": true,
            "example": "5fc5ee85-6643-4623-b019-a0dccceafe47"
          },
          "description": {
            "type": "string",
            "description": "The invoice description.",
            "nullable": true,
            "example": "Services provided."
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "invoiceNumber": {
            "type": "integer",
            "description": "The invoice number.",
            "format": "int64",
            "nullable": true,
            "example": 10001
          },
          "invoiceTitle": {
            "type": "string",
            "description": "The invoice title.",
            "nullable": true,
            "example": "My First Invoice"
          },
          "invoiceTitleLine2": {
            "type": "string",
            "description": "The invoice title.",
            "nullable": true,
            "example": "Subtitle"
          },
          "issuedDate": {
            "type": "string",
            "description": "The date the invoice has been issued.",
            "format": "date-time",
            "example": "2022-09-16T00:00:00+00:00"
          },
          "dueDate": {
            "type": "string",
            "description": "The date the invoice is due.",
            "format": "date-time",
            "example": "2022-09-25T00:00:00+00:00"
          },
          "paidDate": {
            "type": "string",
            "description": "The date the invoice was paid. This date is only available if the invoice is fully paid.",
            "format": "date-time",
            "example": "2022-09-20T00:00:00+00:00"
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicedMatterEntryItem"
            },
            "description": "The entries on the invoice.",
            "nullable": true
          },
          "waived": {
            "type": "boolean",
            "description": "True if the invoice is waived.",
            "example": false
          },
          "invoiceTotals": {
            "$ref": "#/components/schemas/InvoiceTotals"
          }
        },
        "additionalProperties": false
      },
      "InvoicedMatterEntryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/EntryType"
          }
        },
        "additionalProperties": false
      },
      "InvoicePagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "InvoiceStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "InvoiceTotals": {
        "type": "object",
        "properties": {
          "paid": {
            "type": "number",
            "description": "Total amount paid on the invoice.",
            "format": "double",
            "example": 100
          },
          "billed": {
            "type": "number",
            "description": "Amount billed. This is the sum of all fees and expenses on the invoice, without tax.",
            "format": "double",
            "example": 200
          },
          "unpaid": {
            "type": "number",
            "description": "Amount unpaid.",
            "format": "double",
            "example": 100
          },
          "writtenOff": {
            "type": "number",
            "description": "Amount written off.",
            "format": "double",
            "example": 0
          },
          "waived": {
            "type": "number",
            "description": "Amount waived.",
            "format": "double",
            "example": 0
          },
          "discount": {
            "type": "number",
            "description": "Amount of discount.",
            "format": "double",
            "example": 0
          },
          "total": {
            "type": "number",
            "description": "Total amount for invoice, including tax and interest.",
            "format": "double",
            "example": 100
          },
          "tax": {
            "type": "number",
            "description": "Amount of Tax on the invoice.",
            "format": "double",
            "example": 10
          },
          "interest": {
            "type": "number",
            "description": "Amount of interest. This is the total interest amount, not taking into account\r\nwhat has been paid.",
            "format": "double",
            "readOnly": true,
            "example": 0
          },
          "unpaidExcInterest": {
            "type": "number",
            "description": "Amount unpaid excluding interest. For invoices in interest, if this amount is zero,\r\nit means that the principal has been fully paid, though there might still be unpaid interest.",
            "format": "double",
            "example": 100
          },
          "feeTotal": {
            "type": "number",
            "description": "All fees (written off + non written off).",
            "format": "double",
            "example": 250
          },
          "writtenOffFeeTotal": {
            "type": "number",
            "description": "Written off fees.",
            "format": "double",
            "example": 120
          },
          "expenseTotal": {
            "type": "number",
            "description": "All expenses (written off + non written off).",
            "format": "double",
            "example": 300
          },
          "writtenOffExpenseTotal": {
            "type": "number",
            "description": "Written off expenses total.",
            "format": "double",
            "example": 180
          }
        },
        "additionalProperties": false
      },
      "MatterItem": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the item on a matter.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the item.",
            "nullable": true,
            "example": "Client"
          },
          "index": {
            "type": "integer",
            "description": "Zero based number of this item in the list.",
            "format": "int32",
            "example": 0
          },
          "visible": {
            "type": "boolean",
            "description": "Boolean flag indicating if the item is visible.",
            "example": false
          },
          "subItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterItem"
            },
            "description": "List of child items associated with the item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterItem"
            },
            "description": "List of items on a matter.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "key": {
            "type": "string",
            "description": "Unique key name for the layout contact.",
            "nullable": true,
            "example": ""
          },
          "contact": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "LayoutContactData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key name for the layout contact.",
            "nullable": true,
            "example": ""
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier for the layout contact.",
            "format": "uuid",
            "example": ""
          }
        },
        "additionalProperties": false
      },
      "LayoutDesign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "name": {
            "type": "string",
            "description": "Name of the layout design.",
            "nullable": true,
            "example": "Case Details"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the layout design.",
            "nullable": true,
            "example": "Property and title details"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutDesignField"
            },
            "description": "Collection of layout design fields.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutDesignField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the layout design field.",
            "nullable": true,
            "example": "Nature of Property"
          },
          "type": {
            "$ref": "#/components/schemas/LayoutDesignFieldType"
          },
          "possibleValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of possible values (e.g. for Combobox field).",
            "nullable": true,
            "example": [
              "Residence",
              "Commercial",
              "Factory",
              "Office"
            ]
          }
        },
        "additionalProperties": false
      },
      "LayoutDesignFieldType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "LayoutDesignInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "name": {
            "type": "string",
            "description": "Name of the layout design.",
            "nullable": true,
            "example": "Case Details"
          }
        },
        "additionalProperties": false
      },
      "LayoutDesignInfoPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutDesignInfo"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "LayoutEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "appointmentId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutMatterItem": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Zero-based index of the layout item.",
            "format": "int32",
            "example": 0
          },
          "layoutDesignId": {
            "type": "string",
            "description": "Unique identifier of the layout design.",
            "nullable": true,
            "example": "59791902-6280-471b-bd18-f8439ba3042f"
          },
          "name": {
            "type": "string",
            "description": "Name of the layout item.",
            "nullable": true,
            "example": "Item"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the layout item.",
            "nullable": true,
            "example": "Text describing item"
          },
          "isRemoved": {
            "type": "boolean",
            "description": "Boolean flag indicating if the layout item is to be removed",
            "example": false
          },
          "itemId": {
            "type": "string",
            "description": "Unique identifier for the layout item.",
            "nullable": true,
            "example": "59791902-6280-471b-bd18-f8439ba3042f"
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier for the parent layout design.",
            "nullable": true,
            "example": "Client"
          },
          "parentIndex": {
            "type": "integer",
            "description": "Zero-based index of the parent layout design.",
            "format": "int32",
            "example": 0
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutValue"
            },
            "description": "List of layout values.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutEvent"
            },
            "description": "List of layout events.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "deprecatedId": {
            "type": "string",
            "description": "Id without ItemId, used for backward compatibility",
            "nullable": true,
            "readOnly": true
          },
          "hasValues": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LayoutMatterItemData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "name": {
            "type": "string",
            "description": "Name of the layout item.",
            "nullable": true,
            "example": "Item"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the layout item.",
            "nullable": true,
            "example": "Text describing item"
          },
          "itemId": {
            "type": "string",
            "description": "Unique identifier for the layout item.",
            "nullable": true,
            "example": "59791902-6280-471b-bd18-f8439ba3042f"
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier for the parent layout design.",
            "nullable": true,
            "example": "Client"
          },
          "index": {
            "type": "integer",
            "description": "Zero-based index of the layout item.",
            "format": "int32",
            "example": 0
          },
          "layoutDesign": {
            "$ref": "#/components/schemas/Link"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutValue"
            },
            "description": "List of layout values.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutEvent"
            },
            "description": "List of layout events.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutMatterItemDataCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutMatterItemData"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "description": "Gets or sets the object that contains supplemental data about the key/value pair.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Matter": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the matter.",
            "nullable": true,
            "example": "EXT01"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "number": {
            "type": "string",
            "description": "Human-friendly number assigned to matter.",
            "nullable": true,
            "example": "FUS-124"
          },
          "matterType": {
            "$ref": "#/components/schemas/Link"
          },
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "List of hypermedia links of 'Client' contacts associated with the matter.",
            "nullable": true
          },
          "otherSides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "List of hypermedia links of 'OtherSide' contacts associated with the matter.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Brief description of the matter.",
            "nullable": true,
            "example": "This is a brief description for the matter"
          },
          "status": {
            "type": "string",
            "description": "Current status of matter.",
            "nullable": true,
            "example": "Open"
          },
          "personResponsible": {
            "$ref": "#/components/schemas/Link"
          },
          "personAssisting": {
            "$ref": "#/components/schemas/Link"
          },
          "originatingStaff": {
            "$ref": "#/components/schemas/Link"
          },
          "openedDate": {
            "type": "string",
            "description": "Date the matter was opened.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "closedDate": {
            "type": "string",
            "description": "Date the matter was closed.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "items": {
            "$ref": "#/components/schemas/Link"
          },
          "isMatterTemplate": {
            "type": "boolean",
            "description": "Boolean flag indicating if the matter is a template.",
            "example": false
          },
          "isLead": {
            "type": "boolean",
            "description": "Boolean flag indicating if the matter is a lead.",
            "example": false
          },
          "branchId": {
            "type": "string",
            "description": "Unique identifier of the associated branch.",
            "nullable": true,
            "example": "dd4e4381-b6a0-4c64-8feb-e8ea8016ea42"
          },
          "branchProviderId": {
            "type": "string",
            "description": "Unique identifier of the associated branch provider.",
            "nullable": true,
            "example": "Smokeball"
          }
        },
        "additionalProperties": false
      },
      "MatterDto": {
        "type": "object",
        "properties": {
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the matter.",
            "nullable": true,
            "example": "EXT01"
          },
          "number": {
            "type": "string",
            "description": "Human-friendly number assigned to matter.",
            "nullable": true,
            "example": "FUS-124"
          },
          "matterTypeId": {
            "type": "string",
            "description": "Unique identifier of the matter type associated with the matter.\r\n            \r\nMatter types define what information can be saved to the matter, relevant to that area of law and state / location.\r\n            \r\nA pre-configured list of matter types can be obtained via the 'GET /mattertypes' API.\r\n            \r\nNote: 'Lead' matter types are different from the standard matter types used when creating a 'Matter'.\r\n            \r\nUse the 'Type' query parameter in the 'GET /mattertypes' API call to get 'Lead' specific matter types.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "clientIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of 'Client' contact id's associated with the matter.",
            "nullable": true,
            "example": [
              "832e778f-83df-454a-b344-768a862a7e67"
            ]
          },
          "otherSideIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of 'OtherSide' contact id's associated with the matter.",
            "nullable": true,
            "example": [
              "776e778f-83df-454a-b344-768a862a6e58"
            ]
          },
          "clientRole": {
            "type": "string",
            "description": "'Client' matter type representative option for the matter.",
            "nullable": true,
            "example": "Buyer"
          },
          "otherSideRole": {
            "type": "string",
            "description": "'OtherSide' matter type representative option for the matter.",
            "nullable": true,
            "example": "Seller"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the matter.",
            "nullable": true,
            "example": "This is a brief description for the matter"
          },
          "status": {
            "type": "string",
            "description": "Current status of matter.\r\n\r\nAccepted values - Open, Pending, Closed, Deleted or Cancelled",
            "nullable": true,
            "example": "Open"
          },
          "dateOpened": {
            "type": "string",
            "description": "Date when the matter was opened.\r\n\r\nNote - This can be backdated if required",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "personResponsibleStaffId": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "personAssistingStaffId": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "originatingStaffId": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "isLead": {
            "type": "boolean",
            "description": "Optional boolean flag indicating if a 'Lead' is being created. This must be set to 'true' when creating a 'Lead'.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "MatterPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Matter"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "MatterRelationships": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "List of associated relationships.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterRoles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "List of associated roles.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the relationship.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the relationship.",
            "nullable": true,
            "example": "Solicitor"
          },
          "contact": {
            "$ref": "#/components/schemas/Link"
          },
          "representatives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "List of hypermedia links of the associated representatives.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationshipDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the relationship.",
            "nullable": true,
            "example": "Solicitor"
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "representativeIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated representative contact ids.",
            "nullable": true,
            "example": [
              "776e778f-83df-454a-b344-768a862a7e67"
            ]
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the role.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the role.",
            "nullable": true,
            "example": "Client"
          },
          "contact": {
            "$ref": "#/components/schemas/Link"
          },
          "representatives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "List of hypermedia links of the associated representatives.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "List of associated relationships.",
            "nullable": true
          },
          "isClient": {
            "type": "boolean",
            "description": "Boolean flag indicating if role belongs to a 'Client'.",
            "example": false
          },
          "isOtherSide": {
            "type": "boolean",
            "description": "Boolean flag indicating if role belongs to an 'OtherSide'.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the role.",
            "nullable": true,
            "example": "Client"
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "representativeIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated representative contact ids.",
            "nullable": true,
            "example": [
              "776e778f-83df-454a-b344-768a862a7e67"
            ]
          },
          "isMatterItemRequired": {
            "type": "boolean",
            "description": "Boolean flag indicating if matter item is required."
          }
        },
        "additionalProperties": false
      },
      "MatterListItem": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique provider-specific identifier of the item.",
            "nullable": true,
            "example": "Plaintiff"
          },
          "providerId": {
            "type": "string",
            "description": "Provider name of the item.",
            "nullable": true,
            "example": "roles_provider"
          },
          "itemId": {
            "type": "string",
            "description": "Unique identifier of the item.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the item.",
            "nullable": true,
            "example": "Claimant"
          },
          "subItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterListItem"
            },
            "description": "List of sub items belonging to the item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterType": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter type.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "name": {
            "type": "string",
            "description": "Name of the matter type.",
            "nullable": true,
            "example": "Federal Litigation"
          },
          "category": {
            "type": "string",
            "description": "Name of the category to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          },
          "representativeOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of possible representative types for the matter type.",
            "nullable": true,
            "example": [
              "Applicant",
              "Respondent"
            ]
          },
          "location": {
            "type": "string",
            "description": "State to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterListItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterTypeInfo": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter type.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "name": {
            "type": "string",
            "description": "Name of the matter type.",
            "nullable": true,
            "example": "Federal Litigation"
          },
          "category": {
            "type": "string",
            "description": "Name of the category to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          },
          "representativeOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of possible representative types for the matter type.",
            "nullable": true,
            "example": [
              "Applicant",
              "Respondent"
            ]
          },
          "location": {
            "type": "string",
            "description": "State to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          }
        },
        "additionalProperties": false
      },
      "MatterTypeInfoPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterTypeInfo"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "TypeCategory": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Memo": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the memo.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "matterId": {
            "type": "string",
            "description": "The unique identifier of the matter.",
            "nullable": true,
            "example": "776e778f-83df-454a-b344-768a862a6e58"
          },
          "title": {
            "type": "string",
            "description": "The title of the memo.",
            "nullable": true,
            "example": "Update"
          },
          "text": {
            "type": "string",
            "description": "The text (content) of the memo.\r\n            \r\nIn RTF (Rich Text Format).",
            "nullable": true,
            "example": "There has been a recent update on this matter."
          },
          "createdDate": {
            "type": "string",
            "description": "Date the memo was created.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "createdByUserId": {
            "type": "string",
            "description": "The unique identifier of the user who created the memo.",
            "nullable": true,
            "example": "010f7d8e-82d1-454b-c324-760a862a7e22"
          },
          "lastUpdated": {
            "type": "string",
            "description": "Date and time that the memo was last updated.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-02T16:22:02Z"
          },
          "updatedByUserId": {
            "type": "string",
            "description": "The unique identifier of the user who last updated the memo.",
            "nullable": true,
            "example": "010f7d8e-82d1-454b-c324-760a862a7e22"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether or not the memo is deleted (true if it is, false if not)."
          }
        },
        "additionalProperties": false
      },
      "MemoDto": {
        "required": [
          "text",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the memo.",
            "example": "Update"
          },
          "text": {
            "type": "string",
            "description": "The text (content) of the memo.\r\n            \r\nSupports plain-text and RTF.",
            "example": "There has been a recent update on this matter."
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "createdDateUtc": {
            "type": "string",
            "description": "Date that the memo was created.\r\n\r\nWill default to the current date and time, if not supplied.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          }
        },
        "additionalProperties": false
      },
      "MemoPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Memo"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "MatterStage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "matter": {
            "$ref": "#/components/schemas/Link"
          },
          "stageSet": {
            "$ref": "#/components/schemas/Link"
          },
          "stage": {
            "$ref": "#/components/schemas/Stage"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Timestamp when the matter stage was last updated.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Contains the current stage of the matter."
      },
      "MatterStagePagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterStage"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Stage": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the stage.",
            "nullable": true,
            "example": "45b94df1-1657-48b0-ae81-583b42ed52d6"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "09d1f360-b810-4a63-acaa-5ed81a551f06"
          },
          "name": {
            "type": "string",
            "description": "Name of the stage.",
            "nullable": true,
            "example": "Review contract"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the stage is deleted.",
            "example": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Timestamp when the stage was last updated.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Contains information of a stage in a stage set."
      },
      "StageSet": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the stage set.",
            "nullable": true,
            "example": "6ccc033d-67c9-4090-8705-3aff0c5a8cfb"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "499244ff-651f-4f66-b618-9defde27c281"
          },
          "name": {
            "type": "string",
            "description": "Name of the stage set.",
            "nullable": true,
            "example": "Review contract"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the stage set is deleted.",
            "example": true
          },
          "stages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stage"
            },
            "description": "Stages of the stage set.",
            "nullable": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Timestamp when the stage set was last updated.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Contains the stage set and stages information."
      },
      "StageSetPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StageSet"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "matter": {
            "$ref": "#/components/schemas/Link"
          },
          "parentTask": {
            "$ref": "#/components/schemas/Link"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Link"
          },
          "completedBy": {
            "$ref": "#/components/schemas/Link"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/Link"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "The staff member(s) assigned to the task.",
            "nullable": true
          },
          "subTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "The tasks associated to the task.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "The subject - a short description of the task.",
            "nullable": true,
            "example": "Review contract for John Smith"
          },
          "note": {
            "type": "string",
            "description": "Notes on the task.",
            "nullable": true,
            "example": "Contract needs to be reviewed and discussed with John"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Categories for the task.",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "completedDate": {
            "type": "string",
            "description": "When the task was completed.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "createdDate": {
            "type": "string",
            "description": "When the task was created.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "True when the task is completed.",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the task is deleted.",
            "example": false
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false
      },
      "TaskDto": {
        "type": "object",
        "properties": {
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the matter associated to the task.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member creating or updated the task.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "completedByStaffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member completing the task.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "assigneeIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique identifier(s) of the associated staff member(s) assigned to the task.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the task.",
            "nullable": true,
            "example": "Review contract for John Smith"
          },
          "note": {
            "type": "string",
            "description": "Notes on the task.",
            "nullable": true,
            "example": "Contract needs to be reviewed and discussed with John"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "True when the task is completed.",
            "example": false
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Categories for the task.",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "description": "Completed date of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          }
        },
        "additionalProperties": false
      },
      "TaskPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": true,
            "example": "user@domain.com"
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "example": "user@domain.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the user.\r\n\r\nPassword must include atleast one lowercase character, uppercase character, numeric character as well as a special character.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "accountId": {
            "type": "string",
            "description": "Unique identifier of the associated account.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "name": {
            "type": "string",
            "description": "Name or description of the subscription.",
            "nullable": true,
            "example": "Listen to matter and contact changes"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The event types that the webhook subscription is subscribed to.",
            "nullable": true,
            "example": [
              "matter.updated",
              "contact.created"
            ]
          },
          "eventNotificationUrl": {
            "type": "string",
            "description": "The uri to notify when an event has occurred.",
            "nullable": true,
            "example": "http://yourdomain.com/notify"
          },
          "createdDateUtc": {
            "type": "string",
            "description": "The webhook subscription creation date.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "updatedDateUtc": {
            "type": "string",
            "description": "The webhook subscription last updated date.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false
      },
      "SubscriptionDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unqiue key used for creating signature header in webhook notification requests.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "name": {
            "type": "string",
            "description": "Name or description of the webhook subscription.",
            "nullable": true,
            "example": "Listen to matter and contact changes"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The event types that the webhook subscription should be subscribed to.",
            "nullable": true,
            "example": [
              "matter.updated",
              "contact.created"
            ]
          },
          "eventNotificationUrl": {
            "type": "string",
            "description": "The uri to notify when an event has occurred.",
            "nullable": true,
            "example": "http://yourdomain.com/notify"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionPagedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            },
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "description": ""
      },
      "token": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "description": "Uses the Bearer authentication scheme. Tokens must be preceeded by the Bearer keyword."
      }
    }
  },
  "servers": [
    {
      "url": "https://api.smokeball.com",
      "description": "API"
    }
  ],
  "security": [
    {
      "api-key": []
    },
    {
      "token": []
    }
  ]
}