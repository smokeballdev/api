{
  "openapi": "3.0.1",
  "info": { "title": "API", "version": "1.0" },
  "paths": {
    "/activitycodes/{id}": {
      "get": {
        "tags": ["ActivityCodes"],
        "summary": "Get activity code",
        "description": "Retrieves a specified activity code.",
        "operationId": "GetActivityCodeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'ActivityCode' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Activity" }
              }
            }
          },
          "403": {
            "description": "When activity code with specified id is not associated with authenticated client.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When activity code with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["ActivityCodes"],
        "summary": "Update an activity code",
        "description": "Updates a specified activity code.",
        "operationId": "UpdateActivityCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ActivityDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ActivityDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ActivityDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the activity code to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When activity code with specified id is not associated with authenticated client."
          }
        }
      },
      "delete": {
        "tags": ["ActivityCodes"],
        "summary": "Delete an activity code",
        "description": "Deletes a specified activity code.",
        "operationId": "DeleteActivityCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the activity code to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When activity code with specified id is not associated with authenticated client."
          }
        }
      }
    },
    "/activitycodes": {
      "get": {
        "tags": ["ActivityCodes"],
        "summary": "Get activity codes",
        "description": "Returns a list of activity codes.",
        "operationId": "GetActivityCodes",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns expenses updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'ActivityCode' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ActivityCodes"],
        "summary": "Create an activity code",
        "description": "Creates an activity code.",
        "operationId": "CreateActivityCode",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ActivityDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ActivityDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ActivityDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the activity code to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/archive": {
      "get": {
        "tags": ["Archive"],
        "summary": "Get the archive for a matter",
        "description": "Retrieves an archive for a matter.",
        "operationId": "GetArchiveForMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the specified archive.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Archive" }
              }
            }
          },
          "404": {
            "description": "When the specified matter's archive does not exist."
          }
        }
      },
      "put": {
        "tags": ["Archive"],
        "summary": "Update an archive for a matter.",
        "description": "Updates a specified matter's archive.",
        "operationId": "UpdateArchive",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ArchiveDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ArchiveDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ArchiveDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. The archive update has been accepted and will be updated shortly.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "Bad request." }
        }
      },
      "patch": {
        "tags": ["Archive"],
        "summary": "Patch an archive for a matter.",
        "description": "Updates a specified matter's archive with patch operations.",
        "operationId": "PatchArchive",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/ArchiveDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ArchiveDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/ArchiveDto" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. The archive patch has been accepted and will be updated shortly.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          }
        }
      }
    },
    "/bankaccountbalances/{id}": {
      "get": {
        "tags": ["BankAccountBalances"],
        "summary": "Get a bank account balance",
        "description": "Retrieves a specified bank account balance.",
        "operationId": "GetBankAccountBalanceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the bank account.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'BankAccountBalance' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BankAccountBalance" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When bank account balance with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When bank account balance with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/bankaccounts/{id}": {
      "get": {
        "tags": ["BankAccounts"],
        "summary": "Get a bank account",
        "description": "Retrieves a specified bank account.",
        "operationId": "GetBankAccountById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'BankAccount' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BankAccount" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When bank account with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When bank account with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/bankaccounts": {
      "get": {
        "tags": ["BankAccounts"],
        "summary": "Get bank accounts",
        "description": "Returns a list of bank accounts.",
        "operationId": "GetBankAccounts",
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'BankAccount' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCollection"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/billingconfiguration": {
      "get": {
        "tags": ["BillingConfiguration"],
        "summary": "Get matter billing configuration",
        "description": "Retrieves the specified matters billing configuration.",
        "operationId": "GetBillingConfiguration",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the specified memo.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "When the specified memo does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["BillingConfiguration"],
        "summary": "Update matter billing configuration",
        "description": "Retrieves the specified matters billing configuration.",
        "operationId": "UpdateBillingConfiguration",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/BillingConfigurationDto" }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/BillingConfigurationDto" }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/BillingConfigurationDto" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the billing configuration to be updated."
          },
          "403": {
            "description": "When matter with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/relations": {
      "get": {
        "tags": ["ContactRelations"],
        "summary": "Get contact relations",
        "description": "Returns a list of relations for a specified contact if associated with the authenticated client.",
        "operationId": "GetRelations",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Link' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LinkPagedCollection" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "post": {
        "tags": ["ContactRelations"],
        "summary": "Create a contact relation",
        "description": "Creates a relation for a specified contact.",
        "operationId": "CreateRelation",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactRelationDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactRelationDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactRelationDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact relation to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When related contact id is not provided" }
        }
      }
    },
    "/contacts/{contactId}/relations/{relatedContactId}": {
      "get": {
        "tags": ["ContactRelations"],
        "summary": "Get a contact relation",
        "description": "Retrieves a relation for a specified contact if associated with the authenticated client.",
        "operationId": "GetRelationById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "relatedContactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Link' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "put": {
        "tags": ["ContactRelations"],
        "summary": "Update a contact relation",
        "description": "Updates a relation for a specified contact.",
        "operationId": "UpdateRelation",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "relatedContactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactRelationDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactRelationDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactRelationDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact relation to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "delete": {
        "tags": ["ContactRelations"],
        "summary": "Delete a contact relation",
        "description": "Deletes a relation for a specified contact.",
        "operationId": "DeleteRelation",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "relatedContactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact relation to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Get contacts",
        "description": "Returns a list of contacts.",
        "operationId": "GetContacts",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns contacts updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "ExcludeDeletedContacts",
            "in": "query",
            "description": "Excludes (filters out) deleted contacts if set to true.",
            "schema": { "type": "boolean", "example": true },
            "example": true
          },
          {
            "name": "Search",
            "in": "query",
            "description": " Available fields: email, phone, name",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": " Available fields: passportDetails, deathDetails, citizenshipDetails, utbmsDetails",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Contact' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contacts"],
        "summary": "Create a contact",
        "description": "Creates a contact.",
        "operationId": "CreateContact",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Get a contact",
        "description": "Retrieves a specified contact.",
        "operationId": "GetContactById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Contact' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "put": {
        "tags": ["Contacts"],
        "summary": "Update a contact",
        "description": "Updates a specified contact.",
        "operationId": "UpdateContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ContactDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      },
      "delete": {
        "tags": ["Contacts"],
        "summary": "Delete a contact",
        "description": "Deletes a specified contact.",
        "operationId": "DeleteContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the contact to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When contact with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When contact with specified id does not exist."
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Get events",
        "description": "Returns a list of events.",
        "operationId": "GetEvents",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Filter by events updated since a specified time.\r\nSupported date formats are ISO YYYY-MM-DDThh:mm:ss or .net ticks representation of the UTC datetime.",
            "schema": {
              "type": "string",
              "example": "2000-01-01T20:00:00 OR 630823536000000000"
            },
            "example": "2000-01-01T20:00:00 OR 630823536000000000"
          },
          {
            "name": "MatterId",
            "in": "query",
            "description": "Filter by events assigned to a specific MatterId.",
            "schema": { "type": "string" }
          },
          {
            "name": "ExcludeDeletedEvents",
            "in": "query",
            "description": "Filter out any events that have been deleted, default: false",
            "schema": { "type": "boolean", "example": false },
            "example": false
          },
          {
            "name": "From",
            "in": "query",
            "description": "Filter events from a specified UTC date and time.\r\nDefaults to the UTC datetime of the request.\r\nDates should be provided in ISO format YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2000-01-01T20:00:00"
            },
            "example": "2000-01-01T20:00:00"
          },
          {
            "name": "To",
            "in": "query",
            "description": "Filter events to a specified UTC date and time.\r\nIf no datetime is specified all future events will be returned.\r\nDates should be provided in ISO format YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2000-01-01T20:00:00"
            },
            "example": "2000-01-01T20:00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of `Event` objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Create event",
        "description": "Create new event.",
        "operationId": "CreateEvent",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EventDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EventDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EventDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the event to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": { "description": "When event does not exist." }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Get an event",
        "description": "Retrieves a specified event.",
        "operationId": "GetEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a `Event` object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          },
          "403": {
            "description": "When the authenticated account does not access to the event."
          },
          "404": {
            "description": "When event with specified id does not exist."
          }
        }
      },
      "put": {
        "tags": ["Events"],
        "summary": "Update event",
        "description": "Updates event details.",
        "operationId": "UpdateEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EventDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EventDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EventDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the event to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": { "description": "When event does not exist." }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Delete event",
        "description": "Deletes a specified event.",
        "operationId": "DeleteEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the event to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": { "description": "When 'Event' does not exist." }
        }
      }
    },
    "/matters/{matterId}/expenses": {
      "get": {
        "tags": ["Expenses"],
        "summary": "Get expenses",
        "description": "Returns a list of expenses.",
        "operationId": "GetExpenses",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns expenses updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Expense' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Expenses"],
        "summary": "Create an expense on the matter",
        "description": "Creates an expense.",
        "operationId": "CreateExpense",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ExpenseDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ExpenseDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ExpenseDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/expenses/{id}": {
      "get": {
        "tags": ["Expenses"],
        "summary": "Get a expense",
        "description": "Retrieves a specified expense.",
        "operationId": "GetExpenseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Expense' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Expense" }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When expense with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Expenses"],
        "summary": "Update an expense on a matter",
        "description": "Updates a specified expense.",
        "operationId": "UpdateExpense",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ExpenseDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ExpenseDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/ExpenseDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When expense is not assigned to firm owner and a userId header is invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client."
          }
        }
      },
      "patch": {
        "tags": ["Expenses"],
        "summary": "Patch an expense on a matter",
        "description": "Updates a specified expense with patch operations.",
        "operationId": "PatchExpense",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/ExpenseDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExpenseDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/ExpenseDto" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When expense is not assigned to firm owner and a userId header is invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Expenses"],
        "summary": "Delete an expense",
        "description": "Deletes a specified expense.",
        "operationId": "DeleteExpense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the expense to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When expense with specified id is not associated with authenticated client."
          }
        }
      }
    },
    "/matters/{matterId}/fees": {
      "get": {
        "tags": ["Fees"],
        "summary": "Get fees",
        "description": "Returns a list of fees.",
        "operationId": "GetFees",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns fees updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Fee' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FeePagedCollection" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Fees"],
        "summary": "Create a fee",
        "description": "Creates a fee.",
        "operationId": "CreateFee",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "allOf": [{ "$ref": "#/components/schemas/FeeDto" }] }
            },
            "application/json": {
              "schema": { "allOf": [{ "$ref": "#/components/schemas/FeeDto" }] }
            },
            "application/*+json": {
              "schema": { "allOf": [{ "$ref": "#/components/schemas/FeeDto" }] }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/fees/{id}": {
      "get": {
        "tags": ["Fees"],
        "summary": "Get a fee",
        "description": "Retrieves a specified fee.",
        "operationId": "GetFeeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Fee' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Fee" }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When fee with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Fees"],
        "summary": "Update a fee on a matter",
        "description": "Updates a specified fee.",
        "operationId": "UpdateFee",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "allOf": [{ "$ref": "#/components/schemas/FeeDto" }] }
            },
            "application/json": {
              "schema": { "allOf": [{ "$ref": "#/components/schemas/FeeDto" }] }
            },
            "application/*+json": {
              "schema": { "allOf": [{ "$ref": "#/components/schemas/FeeDto" }] }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client."
          }
        }
      },
      "patch": {
        "tags": ["Fees"],
        "summary": "Patch a fee on a matter",
        "description": "Updates a specified fee.",
        "operationId": "PatchFee",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/FeeDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FeeDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/FeeDto" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Fees"],
        "summary": "Delete a fee",
        "description": "Deletes a specified fee.",
        "operationId": "DeleteFee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the fee to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When fee with specified id is not associated with authenticated client."
          }
        }
      }
    },
    "/matters/{matterId}/documents/files": {
      "get": {
        "tags": ["Files"],
        "summary": "Get files on a matter",
        "description": "Returns a list of files associated with a matter in ascending order of date created, i.e. oldest first.",
        "operationId": "GetFiles",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          { "name": "Cursor", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'File' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FilePagedCollection" }
              }
            }
          },
          "403": {
            "description": "When the requested matter does not belong to the account making the request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Files"],
        "summary": "Add file to a matter",
        "description": "Uploads a new file for the specified matter.",
        "operationId": "AddFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/AddFileDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/AddFileDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/AddFileDto" }]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "When request is accepted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UploadFileInfo" }
              }
            }
          },
          "400": {
            "description": "When the file name does not contain valid XML characters or an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get a file",
        "description": "Retrieves a specified file.",
        "operationId": "GetFileById",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'File' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/File" }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When file with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Files"],
        "summary": "Upload/update version or metadata of a file",
        "description": "Updates the metadata for a file or uploads a new version of the file",
        "operationId": "UpdateFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EditFileDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EditFileDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/EditFileDto" }]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a 'UploadFileInfo' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UploadFileInfo" }
              }
            }
          },
          "400": {
            "description": "When the file name does not contain valid XML characters or an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Files"],
        "summary": "Patch version or metadata of a file",
        "description": "Updates the metadata for a file or uploads a new version of the file",
        "operationId": "PatchFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/EditFileDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EditFileDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/EditFileDto" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a 'UploadFileInfo' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UploadFileInfo" }
              }
            }
          },
          "400": {
            "description": "When the file name does not contain valid XML characters or an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete a file",
        "description": "Deletes a specified matter file.",
        "operationId": "DeleteFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the file to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When the requested file does not belong to the specified matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/download": {
      "get": {
        "tags": ["Files"],
        "summary": "Get download url for a file",
        "description": "Retrieves download details for a specified matter file.",
        "operationId": "DownloadFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "versionId", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'DownloadFileInfo' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DownloadFileInfo" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/upload": {
      "get": {
        "tags": ["Files"],
        "summary": "Get upload url for a file",
        "description": "Retrieves upload details for a specified matter file.",
        "operationId": "UploadFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'UploadFileInfo' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UploadFileInfo" }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When file or matter with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/bulk": {
      "post": {
        "tags": ["Files"],
        "summary": "Add files to a matter",
        "description": "Uploads a batch of files for the specified matter. Used for data migrations.",
        "operationId": "BulkAddFiles",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/AddFileDto" }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/AddFileDto" }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/AddFileDto" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "When request is accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UploadFileInfo" }
                }
              }
            }
          },
          "400": {
            "description": "When a file name does not contain valid XML characters or an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/firm": {
      "get": {
        "tags": ["Firm"],
        "summary": "Get firm",
        "description": "Retrieves the details of the firm associated with the authenticated client.",
        "operationId": "GetFirm",
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Firm' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Firm" }
              }
            }
          },
          "404": { "description": "When firm does not exist." }
        }
      },
      "put": {
        "tags": ["Firm"],
        "summary": "Update firm",
        "description": "Updates firm details for the current authenticated client.",
        "operationId": "UpdateFirm",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UpdateFirmDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UpdateFirmDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UpdateFirmDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the firm to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": { "description": "When firm does not exist." }
        }
      },
      "post": {
        "tags": ["Firm"],
        "summary": "Create firm",
        "description": "Creates a firm for the current authenticated client and registers an existing user as a staff member and firm owner.",
        "operationId": "CreateFirm",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/CreateFirmDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/CreateFirmDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/CreateFirmDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the firm to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When staff user does not exist or is already associated with another firm."
          }
        }
      }
    },
    "/stages": {
      "get": {
        "tags": ["FirmMatterStages"],
        "summary": "Get stage to matter mappings in the firm",
        "description": "Returns a list of stage to matter mappings in the firm.",
        "operationId": "GetMatterStages",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns items updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "description": "Deprecated, use updatedSince\r\nReturns items updated since a specified time.",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matter stage mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterStagePagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/firmusers": {
      "get": {
        "tags": ["FirmUsers"],
        "summary": "Get firm staff/user mappings",
        "description": "Retrieves a list of staff/user mappings in the firm associated with the authenticated client.",
        "operationId": "GetFirmUsers",
        "responses": {
          "200": {
            "description": "When request is successful. Returns an array of one or more 'FirmUser' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FirmUser" }
                }
              }
            }
          }
        }
      }
    },
    "/firmusers/{id}": {
      "get": {
        "tags": ["FirmUsers"],
        "summary": "Get firm staff/user mapping",
        "description": "Retrieves a staff/user mapping (based on staff or user id parameter provided) in the firm associated with the authenticated client.",
        "operationId": "GetFirmUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'FirmUser' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FirmUser" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["FirmUsers"],
        "summary": "Update firm staff/user mapping",
        "description": "Updates a staff/user mapping in the firm associated with the authenticated client.",
        "operationId": "UpdateFirmUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FirmUserDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FirmUserDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FirmUserDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the user to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When staff or user has not been provided." },
          "403": { "description": "When staff does not belong to the firm." },
          "404": { "description": "When 'FirmUser' does not exist." }
        }
      },
      "delete": {
        "tags": ["FirmUsers"],
        "summary": "Delete firm staff/user mapping",
        "description": "Removes the user from the firm associated with the authenticated client.\r\n\r\nThe staff member is set as a former staff member and a former user. User access is also disabled.",
        "operationId": "DeleteFirmUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the user to be deleted."
          },
          "404": { "description": "When 'FirmUser' object does not exist." }
        }
      }
    },
    "/matters/{matterId}/documents/folders": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get folders/files under root folder",
        "description": "Returns a list of sub folders and files under the root folder of a matter",
        "operationId": "GetFolders",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'FolderListing' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Folders"],
        "summary": "Create a folder",
        "description": "Creates a new folder under the specified matter.",
        "operationId": "CreateRootFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FolderDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FolderDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FolderDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When folder name is not provided.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/folders/{folderId}": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get folders/files under a folder",
        "description": "Returns a list of sub folders and files under a specified folder of a matter",
        "operationId": "GetFolderById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'FolderListing' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              }
            }
          },
          "404": {
            "description": "When folder with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Folders"],
        "summary": "Update a folder",
        "description": "Updates a folder belonging to the specified matter.",
        "operationId": "UpdateFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FolderDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FolderDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/FolderDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When folder name is not provided or folder does not belong to the specified matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When folder with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Folders"],
        "summary": "Patch a folder",
        "description": "Updates a folder belonging to the specified matter.",
        "operationId": "PatchFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/FolderDto" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FolderDto" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/FolderDto" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When folder name is not provided or folder does not belong to the specified matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When folder with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Folders"],
        "summary": "Delete a folder",
        "description": "Deletes a folder belonging to the specified matter.",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the folder to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When the folder does not belong to the specified matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get authorization groups",
        "description": "Retrieves auhorization groups for the firm associated with the authenticated client.",
        "operationId": "GetGroups",
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of authorization 'Group' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Create an authorization group",
        "description": "Creates an authorization group.",
        "operationId": "CreateGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/CreateGroupDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/CreateGroupDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/CreateGroupDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the authorization group to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When request is invalid." }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get an authorization group",
        "description": "Retrieves a specified authorization group.",
        "operationId": "GetGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns an authorization 'Group' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          },
          "404": { "description": "When authorization group does not exist." }
        }
      },
      "put": {
        "tags": ["Groups"],
        "summary": "Update an authorization group",
        "description": "Updates a specified authorization group.",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UpdateGroupDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UpdateGroupDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UpdateGroupDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the authorization group to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When request is invalid." },
          "404": { "description": "When authorization group does not exist" }
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes an authorization group",
        "description": "Delete an authorization group.",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the authorization group to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When request is invalid." }
        }
      }
    },
    "/matters/{matterId}/invoices": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get invoices",
        "description": "Returns a list of invoices for a specified matter.",
        "operationId": "GetInvoices",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the matter that the invoice belongs to.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "updatedSince",
            "in": "query",
            "description": "Timestamp in ticks. Use this to only get invoices which have been updated",
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the invoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/invoices/{invoiceId}/download": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get download url for an invoice",
        "description": "Retrieves download details for a specified invoice.",
        "operationId": "DownloadInvoiceFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'InvoiceFileInfo' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvoiceFileInfo" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When the requested file does not belong to the account making the request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When invoice with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/layouts": {
      "get": {
        "tags": ["LayoutDesigns"],
        "summary": "Get layout designs",
        "description": "Returns a list of layout designs.",
        "operationId": "GetLayoutDesigns",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'LayoutDesignInfo' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutDesignInfoPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/layouts/{id}": {
      "get": {
        "tags": ["LayoutDesigns"],
        "summary": "Get a layout design",
        "description": "Retrieves a specified layout design.",
        "operationId": "GetLayoutDesignById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Layout design Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'LayoutDesign' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LayoutDesign" }
              }
            }
          },
          "404": {
            "description": "When layout design with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/layouts": {
      "get": {
        "tags": ["LayoutMatterItems"],
        "summary": "Get layouts",
        "description": "Returns a collection of layout items on a specified matter.",
        "operationId": "GetLayoutMatterItems",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'LayoutMatterItemDataCollection' object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutMatterItemDataCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["LayoutMatterItems"],
        "summary": "Add a new layout",
        "description": "Adds a new layout matter item to a matter.",
        "operationId": "AddLayout",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter ID",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Layout matter item to add",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/LayoutMatterItemData" }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/LayoutMatterItemData" }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/LayoutMatterItemData" }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the layout item to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When the new matter item contain invalid data.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When the matter or a layout item with the specified ID does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "503": { "description": "Server Error" }
        }
      }
    },
    "/matters/{matterId}/layouts/{itemId}": {
      "get": {
        "tags": ["LayoutMatterItems"],
        "summary": "Get a layout",
        "description": "Retrieves a layout item on a specified matter.",
        "operationId": "GetLayoutMatterItemById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Layout item Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'LayoutMatterItem' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LayoutMatterItem" }
              }
            }
          },
          "404": {
            "description": "When a layout item with the specified ID does not exist on the matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["LayoutMatterItems"],
        "summary": "Merge a layout",
        "description": "Merges layout data.",
        "operationId": "MergeLayout",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter ID",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Matter item Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Data to merge into the existing layout",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/LayoutMatterItemData" }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/LayoutMatterItemData" }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/LayoutMatterItemData" }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the layout item to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When the update payload does not contain an ID that matched the ID of the item requiring update.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When the matter or a layout item with the specified ID does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "503": { "description": "Server Error" }
        }
      },
      "delete": {
        "tags": ["LayoutMatterItems"],
        "summary": "Remove a layout",
        "description": "Removes a layout matter item from a matter.",
        "operationId": "RemoveLayout",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "Matter ID",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Layout matter item ID to remove",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": { "description": "When request is accepted." },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When the matter or a layout item with the specified ID does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "503": { "description": "Server Error" }
        }
      }
    },
    "/matters/{matterId}/layouts/{itemId}/contacts": {
      "get": {
        "tags": ["LayoutMatterItems"],
        "summary": "Get layout contacts",
        "description": "Returns a list of contacts on a specified layout.",
        "operationId": "GetLayoutMatterItemContacts",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'LayoutContact' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LayoutContact" }
                }
              }
            }
          },
          "404": {
            "description": "When contacts do not exist for the layout item with specified id.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["LayoutMatterItems"],
        "summary": "Add a contact to a layout",
        "description": "Adds a new contact on a specified layout.\r\nIf contactData.Key already refers a contact, the current role/relationship will need to be removed manually using\r\n`DELETE /matters/{matterId}/roles/{id}` or `DELETE /matters/{matterId}/roles/{roleId}/relationships/{id}`.",
        "operationId": "AddLayoutMatterItemContact",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/LayoutContactData" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/LayoutContactData" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/LayoutContactData" }]
              }
            }
          }
        },
        "responses": {
          "202": { "description": "When request is accepted" },
          "404": {
            "description": "When layout item with specified id does not exist on the matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/items": {
      "get": {
        "tags": ["MatterItems"],
        "summary": "Get items on a matter",
        "description": "Returns a list of items on a specified matter.",
        "operationId": "GetMatterItems",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterItems' object containing a list of 'MatterItem' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatterItems" }
              }
            }
          },
          "404": {
            "description": "When matter with specified id does not exist."
          }
        }
      }
    },
    "/matters/{matterId}/items/{id}": {
      "get": {
        "tags": ["MatterItems"],
        "summary": "Get an item on a matter",
        "description": "Returns an item on a specified matter.",
        "operationId": "GetMatterItem",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterItem' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatterItem" }
              }
            }
          },
          "404": {
            "description": "When the specified matter or item does not exist."
          }
        }
      }
    },
    "/matters": {
      "get": {
        "tags": ["Matters"],
        "summary": "Get matters",
        "description": "Returns a list of matters.",
        "operationId": "GetMatters",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "description": "Filter matters by specified search term.\r\nThis field is wide reaching, it is used to search by clients, othersides, description and matter numbers.",
            "schema": { "type": "string", "example": "Bob" },
            "example": "Bob"
          },
          {
            "name": "MatterTypeId",
            "in": "query",
            "description": "Filter by matter type identifier.",
            "schema": {
              "type": "string",
              "example": "009f778f-83df-454a-b344-768a862a7e55"
            },
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          {
            "name": "ContactId",
            "in": "query",
            "description": "Filter by the contact identifier.",
            "schema": {
              "type": "string",
              "example": "7fdbdd5b-0f5e-4095-af9e-ae5b055325c7"
            },
            "example": "7fdbdd5b-0f5e-4095-af9e-ae5b055325c7"
          },
          {
            "name": "Status",
            "in": "query",
            "description": "Filter by current status of the matter.\r\n\r\nPossible values: Open, Pending, Closed, Deleted or Cancelled.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "IsLead",
            "in": "query",
            "description": "Boolean flag to restrict search to 'Leads'.",
            "schema": { "type": "boolean", "example": true },
            "example": true
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Filter by matters updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 637873555398585000
            },
            "example": 637873555398585000
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "description": "Filter by last updated date of matter.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-04-23T14:00:00Z"
            },
            "example": "2022-04-23T14:00:00Z"
          },
          {
            "name": "Sort",
            "in": "query",
            "description": " Available fields: status, lastUpdated",
            "schema": { "type": "string" }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": " Available fields: items",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of `Matter` objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Matters"],
        "summary": "Create a matter",
        "description": "Creates a new matter.\r\n            \r\nNote: This endpoint can also be used to create a `Lead`.\r\n\r\nWhen creating a `Lead` you MUST remember to set a valid lead specific `matterTypeId` field (see field description below for more details) and set the `isLead` field to true.\r\n\r\nThe `clientRole` and `otherSideRole` are optional and cannot be identical. They will be set to the default role(s) for the specified matter type - if not provided.",
        "operationId": "CreateMatter",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MatterDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MatterDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MatterDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made or a mandatory field - i.e. client, matter type, status - is not provided.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}": {
      "get": {
        "tags": ["Matters"],
        "summary": "Get a matter",
        "description": "Retrieves a specified matter.",
        "operationId": "GetMatterById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a `Matter` object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Matter" }
              }
            }
          },
          "403": {
            "description": "When the authenticated account does not have access to the matter."
          },
          "404": {
            "description": "When matter with specified id does not exist."
          }
        }
      },
      "put": {
        "tags": ["Matters"],
        "summary": "Update a matter",
        "description": "Updates a specified matter.\r\n            \r\nThe following actions are currently not supported:\r\n            \r\n- `matterTypeId` cannot be modified, unless converting a lead to a matter\r\n            \r\n- `clientIds` cannot be modified\r\n            \r\n- `otherSideIds` cannot be modified\r\n\r\n-  `Matter` cannot be converted back to `Lead`",
        "operationId": "UpdateMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MatterDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MatterDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MatterDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "When the authenticated account does not have access to the matter."
          },
          "404": {
            "description": "When matter with specified id does not exist."
          }
        }
      },
      "patch": {
        "tags": ["Matters"],
        "summary": "Patch a matter (beta)",
        "description": "Patches a specified matter.\r\n            \r\nNote: This endpoint can also be used to update a `Lead` and to convert `Lead` to `Matter`.\r\n            \r\nSee `Matters` documentation for more details on how to use this.\r\n\r\nThe following actions are not supported:\r\n\r\n- `items` cannot be updated where either `clientIds` and/or `otherSideIds` are being updated\r\n            \r\n- `items` cannot be updated when converting a `Lead` to `Matter`\r\n            \r\n- `matterTypeId` and `clientRole` cannot be updated, unless converting a `Lead` to `Matter`\r\n            \r\n- `Matter` cannot be converted back to `Lead`",
        "operationId": "PatchMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { "$ref": "#/components/schemas/MatterDto2" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MatterDto2" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/MatterDto2" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be patched.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "When the authenticated account does not have access to the matter."
          },
          "404": {
            "description": "When matter with specified id does not exist."
          }
        }
      },
      "delete": {
        "tags": ["Matters"],
        "summary": "Delete a matter",
        "description": "Deletes a specified matter.",
        "operationId": "DeleteMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the matter to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "When the authenticated account does not have access to the matter."
          },
          "404": {
            "description": "When matter with specified id does not exist."
          }
        }
      }
    },
    "/mattertypes": {
      "get": {
        "tags": ["MatterTypes"],
        "summary": "Get matter types",
        "description": "Returns a paginated list of matter types based on search criteria.\r\n\r\nNote: If no `Location` is provided, all matter types from all locations will be returned.",
        "operationId": "GetMatterTypes",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Searches for partial match on matter type name",
            "schema": { "type": "string" }
          },
          {
            "name": "Location",
            "in": "query",
            "description": "Return matter types from a specific location. In the US API this is the ANSI 2 letter state code (e.g. IL, NY). In the AU API this is shorthand state code (e.g. NSW, ACT, etc)",
            "schema": { "type": "string" }
          },
          {
            "name": "Category",
            "in": "query",
            "description": "Return matter types from a specific category.",
            "schema": { "type": "string" }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Return matter types by category type (i.e. MatterType or LeadType).\r\n            \r\nPossible values: Matter Type = 0, Lead Type = 1.",
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/TypeCategory" }],
              "example": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'MatterTypeInfo' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterTypeInfoPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/mattertypes/{id}": {
      "get": {
        "tags": ["MatterTypes"],
        "summary": "Get a matter type",
        "description": "Retrieves a specified matter type.",
        "operationId": "GetMatterTypeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterType' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatterType" }
              }
            }
          },
          "404": {
            "description": "When matter type with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/mattertypes/categories": {
      "get": {
        "tags": ["MatterTypes"],
        "summary": "Get matter types categories",
        "description": "Returns a list of all the possible matter type categories.",
        "operationId": "GetCategories",
        "responses": {
          "200": {
            "description": "When request is successful. Returns all 'Categories'.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StringCollection" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/memos": {
      "get": {
        "tags": ["Memos"],
        "summary": "Get memos on a matter",
        "description": "Returns a list of memos on the specified matter.",
        "operationId": "GetMemos",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Memo' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MemoPagedCollection" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Memos"],
        "summary": "Create a memo on a matter",
        "description": "Creates a memo on the specified matter.",
        "operationId": "CreateMemo",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MemoDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MemoDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MemoDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. The memo has been accepted and will be created shortly.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "Bad request." }
        }
      }
    },
    "/matters/{matterId}/memos/{id}": {
      "get": {
        "tags": ["Memos"],
        "summary": "Get a memo",
        "description": "Retrieves a specified memo.",
        "operationId": "GetMemoById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the specified memo.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Memo" }
              }
            }
          },
          "404": { "description": "When the specified memo does not exist." }
        }
      },
      "put": {
        "tags": ["Memos"],
        "summary": "Update a memo",
        "description": "Updates a specified memo.",
        "operationId": "UpdateMemo",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MemoDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MemoDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MemoDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. The memo has been accepted and will be updated shortly.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "Bad request." },
          "404": { "description": "When the specified memo does not exist." }
        }
      },
      "delete": {
        "tags": ["Memos"],
        "summary": "Delete a memo",
        "description": "Deletes a specified memo.",
        "operationId": "DeleteMemo",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is successful. The request has been accepted and the memo will be deleted shortly.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "Bad request." },
          "404": { "description": "When the specified memo does not exist." }
        }
      }
    },
    "/plugins/{pluginId}": {
      "get": {
        "tags": ["Plugins"],
        "summary": "Get a plugin",
        "description": "Returns the plugin.",
        "operationId": "GetPlugin",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the plugin.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Plugin" }
              }
            }
          },
          "404": {
            "description": "When a plugin is not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Plugins"],
        "summary": "Update existing plugin",
        "description": "Updates a plugin with the specified plugin details.",
        "operationId": "UpdatePlugin",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PluginDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PluginDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PluginDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. Returns a link to the plugin.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When a plugin is not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Plugins"],
        "summary": "Delete existing plugin",
        "description": "Deletes an existing plugin by id.",
        "operationId": "DeletePlugin",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the plugin to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When a plugin is not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/plugins": {
      "get": {
        "tags": ["Plugins"],
        "summary": "Get plugins",
        "description": "Returns existing plugins.",
        "operationId": "GetPlugins",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns existing plugins.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Plugins"],
        "summary": "Create a new plugin",
        "description": "Creates a new plugin with the specified plugin details.",
        "operationId": "CreatePlugin",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PluginDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PluginDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PluginDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is successful. Returns a link to the plugin.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/plugins/{pluginId}/subscriptions/{id}": {
      "get": {
        "tags": ["PluginSubscriptions"],
        "summary": "Get a plugin subscription",
        "description": "Returns the plugin subscription.",
        "operationId": "GetPluginSubscription",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the plugin.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginSubscription" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When a plugin is not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["PluginSubscriptions"],
        "summary": "Unsubscribes account from plugin",
        "description": "Unsubscribes an account from the specified plugin.",
        "operationId": "DeletePluginSubscription",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the plugin subscription to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When a plugin is not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/plugins/{pluginId}/subscriptions": {
      "get": {
        "tags": ["PluginSubscriptions"],
        "summary": "Get plugin subscriptions",
        "description": "Returns plugin subscriptions for the account.",
        "operationId": "GetPluginSubscriptions",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns plugin subscriptions for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginSubscriptionPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["PluginSubscriptions"],
        "summary": "Subscribe account to plugin",
        "description": "Subscribes an account with the specified plugin.",
        "operationId": "CreatePluginSubscription",
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is successful. Returns a link to the plugin subscription.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/policies/{reference}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get an authorization policy",
        "description": "Retrieves a specified authorization policy.",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns an authorization 'Policy' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Policy" }
              }
            }
          },
          "404": { "description": "When authorization Policy does not exist." }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update an authorization policy",
        "description": "Updates a specified authorization policy.",
        "operationId": "UpdatePolicy",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PolicyDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PolicyDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PolicyDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the authorization policy to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When request is invalid." },
          "404": { "description": "When authorization policy does not exist" }
        }
      }
    },
    "/policies": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create an authorization policy",
        "description": "Creates an authorization policy.",
        "operationId": "CreatePolicy",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PolicyDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PolicyDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/PolicyDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the authorization policy to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When request is invalid." }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/preview": {
      "get": {
        "tags": ["Preview"],
        "summary": "Returns info to preview a file",
        "operationId": "GetPreview",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreviewFileInfo" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Preview"],
        "summary": "Creates a preview request",
        "description": "Creates a preview for the specified file.",
        "operationId": "CreatePreview",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreviewFileInfo" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When the file name does not exist or isn't uploaded yet.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/preview/{documentVersionId}": {
      "get": {
        "tags": ["Preview"],
        "summary": "Returns info to preview a file",
        "operationId": "GetPreviewById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "documentVersionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreviewFileInfo" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/referraltypes": {
      "get": {
        "tags": ["ReferralTypes"],
        "summary": "Get referral types",
        "description": "Returns referral types, including custom referral types.",
        "operationId": "GetReferralTypes",
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of `ReferralType` objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralTypeCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/referraltypes/{id}": {
      "get": {
        "tags": ["ReferralTypes"],
        "summary": "Get a referral type",
        "description": "Retrieves a specified referral type.",
        "operationId": "GetReferralTypeByIdOrName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a `ReferralType` object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReferralType" }
              }
            }
          },
          "404": {
            "description": "When referral type with specified id does not exist."
          }
        }
      }
    },
    "/matters/{matterId}/roles/{roleId}/relationships": {
      "get": {
        "tags": ["Relationships"],
        "summary": "Get relationships on a matter",
        "description": "Returns associated relationships for a specified matter and role group.",
        "operationId": "GetRelationshipsOnRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterRelationships' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatterRelationships" }
              }
            }
          },
          "404": {
            "description": "When the specified matter or role group does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Relationships"],
        "summary": "Add relationship to a role",
        "description": "Appends a new relationship with an existing role in the specified matter.",
        "operationId": "AddAnotherRelationshipToRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "Version",
            "in": "header",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RelationshipDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RelationshipDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RelationshipDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the relationship to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an invalid relationship is provided for the specified role.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "When the specified matter or role does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles/{roleId}/relationships/{id}": {
      "get": {
        "tags": ["Relationships"],
        "summary": "Get relationship on a role",
        "description": "Returns a relationship with a specified role in a matter.",
        "operationId": "GetRelationshipOnRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Relationship' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Relationship" }
              }
            }
          },
          "404": {
            "description": "When the specified matter, role group or role (within the specified role group) does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Relationships"],
        "summary": "Update a relationship",
        "description": "Updates a specified relationship on a matter.",
        "operationId": "UpdateRelationship",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RelationshipDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RelationshipDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RelationshipDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the relationship to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": {
            "description": "When the specified matter, role or relationship does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Relationships"],
        "summary": "Remove relationship from a role in a matter.",
        "operationId": "RemoveRelationshipFromRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "Version",
            "in": "header",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the relationship to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": {
            "description": "When matter, role or relationship does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get roles on a matter",
        "description": "Returns associated roles for a specified matter.",
        "operationId": "GetRolesOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterRoles' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatterRoles" }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Roles"],
        "summary": "Add role to a matter",
        "description": "Appends a new role in the specified matter.",
        "operationId": "AddAnotherRoleToMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "Version",
            "in": "header",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RoleDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RoleDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RoleDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the role to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When an invalid role is provided for the specified matter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles/{id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get role on a matter",
        "description": "Returns a role in a specified matter.",
        "operationId": "GetRoleOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Role' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Roles"],
        "summary": "Update role on a matter",
        "description": "Updates a specified role on a matter.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RoleDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RoleDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/RoleDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the role to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": {
            "description": "When the specified matter does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Remove role from a matter",
        "description": "Removes a specified role from a matter.",
        "operationId": "RemoveRoleFromMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "Version",
            "in": "header",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the role to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": {
            "description": "When matter does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/staff": {
      "get": {
        "tags": ["Staff"],
        "summary": "Search firm staff members",
        "description": "Retrieves a paginated list of staff members (filtered based on search parameters provided) in the firm associated with the authenticated client.",
        "operationId": "GetStaff",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "description": " Available fields: email, name",
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a paged collection of 'Staff' objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Staff"],
        "summary": "Create firm staff member",
        "description": "Creates a staff member in the firm associated with the authenticated client.",
        "operationId": "CreateStaff",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/StaffDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/StaffDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/StaffDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the staff member to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": { "description": "When request is invalid" }
        }
      }
    },
    "/staff/{id}": {
      "get": {
        "tags": ["Staff"],
        "summary": "Get firm staff member",
        "description": "Retrieves a staff member (based on staff id parameter provided) in the firm associated with the authenticated client.",
        "operationId": "GetStaffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Staff' object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Staff" }
              }
            }
          },
          "400": {
            "description": "When staff id parameter invalid or not provided"
          },
          "404": { "description": "When staff member does not exist" }
        }
      },
      "put": {
        "tags": ["Staff"],
        "summary": "Update firm staff member",
        "description": "Updates a staff member in the firm associated with the authenticated client.",
        "operationId": "UpdateStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/StaffDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/StaffDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/StaffDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the staff member to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": { "description": "When staff member does not exist" }
        }
      },
      "delete": {
        "tags": ["Staff"],
        "summary": "Deletes a firm staff member",
        "description": "Sets the staff member from the firm associated with the authenticated client as a former staff member.\r\n\r\nThe staff member is set as a former staff member and if they are a user, becomes a former user. User access is also disabled.",
        "operationId": "DeleteStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the staff member to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "404": { "description": "When staff member does not exist" }
        }
      }
    },
    "/matters/{matterId}/stages": {
      "get": {
        "tags": ["Stages"],
        "summary": "Get a matter stage information",
        "description": "Returns the specified matters stage information.",
        "operationId": "GetStagesOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'MatterStage' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatterStage" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When matter stage information with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/stagesets": {
      "get": {
        "tags": ["StageSets"],
        "summary": "Get stage sets for the firm",
        "description": "Returns a list of stage sets for the firm.",
        "operationId": "GetStageSets",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns items updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "description": "Deprecated, use updatedSince\r\nReturns items updated since a specified time.",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the stage sets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageSetPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/stagesets/{id}": {
      "get": {
        "tags": ["StageSets"],
        "summary": "Get a stage set",
        "description": "Returns the specified stage set.",
        "operationId": "GetStageSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'StageSet' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StageSet" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When stage set with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/stagesets/{stageSetId}/stages/{id}": {
      "get": {
        "tags": ["StageSets"],
        "summary": "Get a stage on a stage set",
        "description": "Return the specified stage on the stage set.",
        "operationId": "GetStageOnStageSet",
        "parameters": [
          {
            "name": "stageSetId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Stage' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Stage" }
              }
            }
          },
          "400": { "description": "When an unsupported request is made." },
          "404": {
            "description": "When stage or stage set with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/subtasks/{id}": {
      "get": {
        "tags": ["SubTasks"],
        "summary": "Get a subtask",
        "description": "Retrieves a specified subtask.",
        "operationId": "GetSubTaskById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'SubTask' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubTask" }
              }
            }
          },
          "403": {
            "description": "When subtask with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When subtask with specified task id and subtask id does not exist."
          }
        }
      },
      "put": {
        "tags": ["SubTasks"],
        "summary": "Update a subtask",
        "description": "Updates a specified subtask of a specified task.",
        "operationId": "UpdateSubTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubTaskDto" }],
                "description": "Data transfer object for a subtask."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubTaskDto" }],
                "description": "Data transfer object for a subtask."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubTaskDto" }],
                "description": "Data transfer object for a subtask."
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the subtask to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["SubTasks"],
        "summary": "Delete a subtask",
        "description": "Deletes a specified subtask of a specified task.",
        "operationId": "DeleteSubTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the subtask to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/subtasks": {
      "get": {
        "tags": ["SubTasks"],
        "summary": "Get subtasks",
        "description": "Returns a list of subtasks for a specified task if associated with the authenticated client.",
        "operationId": "GetSubTasks",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'SubTask' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubTaskCollection" }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified id does not exist."
          }
        }
      },
      "post": {
        "tags": ["SubTasks"],
        "summary": "Create a subtask",
        "description": "Creates a subtask for a specified task.",
        "operationId": "CreateSubTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubTaskDto" }],
                "description": "Data transfer object for a subtask."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubTaskDto" }],
                "description": "Data transfer object for a subtask."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubTaskDto" }],
                "description": "Data transfer object for a subtask."
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the subtask to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/documents": {
      "get": {
        "tags": ["TaskDocuments"],
        "summary": "Get task documents",
        "description": "Returns a list of document links for the specified task, if associated with the authenticated client.",
        "operationId": "GetTaskDocuments",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Link' objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDocumentCollection"
                }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified id does not exist."
          }
        }
      },
      "post": {
        "tags": ["TaskDocuments"],
        "summary": "Create a task document",
        "description": "Links the specified document to the specified task.",
        "operationId": "CreateTaskDocument",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDocumentDto" }],
                "description": "Data transfer object for a task document."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDocumentDto" }],
                "description": "Data transfer object for a task document."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDocumentDto" }],
                "description": "Data transfer object for a task document."
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the link to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified task id and/or document id does not exist."
          }
        }
      }
    },
    "/tasks/{taskId}/documents/{id}": {
      "get": {
        "tags": ["TaskDocuments"],
        "summary": "Get a task document",
        "description": "Retrieves the specified task document for the specified task.",
        "operationId": "GetTaskDocumentById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Link' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskDocument" }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified task id and/or document id does not exist."
          }
        }
      },
      "delete": {
        "tags": ["TaskDocuments"],
        "summary": "Delete a task document",
        "description": "Unlinks the specified document from the specified task.",
        "operationId": "DeleteTaskDocument",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task document to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified task id and/or document id does not exist."
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a task",
        "description": "Retrieves a specified task.",
        "operationId": "GetTaskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Task' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Task" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When task with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a task",
        "description": "Updates a specified task.",
        "operationId": "UpdateTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task to be updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When task with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task",
        "description": "Deletes a specified task.",
        "operationId": "DeleteTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task to be deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get tasks",
        "description": "Returns a list of tasks.",
        "operationId": "GetTasks",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Returns tasks updated since a specified time (.net ticks representation of the UTC datetime).",
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "MatterId",
            "in": "query",
            "description": "Returns tasks assigned to a specific MatterId.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a list of 'Task' objects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskPagedCollection" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a task",
        "description": "Creates a task.",
        "operationId": "CreateTask",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TaskDto" }]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "When request is accepted. Returns a hypermedia 'Link' object of the task to be created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/bankaccounts/{bankAccountId}/transactions/{id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get a bank account transaction",
        "description": "Retrieves a specified bank account transaction.",
        "operationId": "GetTransactionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'Transaction' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Transaction" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When transaction with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When transaction with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/bankaccounts/{bankAccountId}/transactions": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create bank account transaction",
        "description": "Creates a bank account transaction.",
        "operationId": "CreateTransactionForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TransactionDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TransactionDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/TransactionDto" }]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "202": {
            "description": "When request is accepted. Returns a hypermedia `Link` object of the receipt to be created."
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a user",
        "description": "Retrieves a specified user. Only accessible using client credentials grant.",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'User' object.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When user with specified id is not associated with authenticated client.\r\n\r\nWhen the request is not made using client credentials grant.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "404": {
            "description": "When user with specified id does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Remove a user",
        "description": "Removes a user. Only accessible using client credentials grant.\r\n            \r\nUser must belong to the specified account.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "When request is successful." },
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When user does not exist or is not associated to the specified account",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When the request is not made using client credentials grant."
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Create a user",
        "description": "Creates a user. Only accessible using client credentials grant.\r\n            \r\nSends an email with a generated password if the password is missing.",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UserDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UserDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/UserDto" }]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When request is successful. Returns a 'User' object."
          },
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Link" }
              }
            }
          },
          "400": {
            "description": "When user or password validation fails.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When the request is not made using client credentials grant."
          }
        }
      }
    },
    "/webhooks/types": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get event types",
        "description": "Returns the available event types.",
        "operationId": "GetEventTypes",
        "responses": {
          "200": {
            "description": "When request is successful. Returns the available event types.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StringCollection" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get webhook subscriptions",
        "description": "Returns existing webhook subscriptions.",
        "operationId": "GetSubscriptions",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns existing webhook subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionPagedCollection"
                }
              }
            }
          },
          "400": { "description": "When an unsupported request is made." }
        }
      },
      "post": {
        "tags": ["Webhooks"],
        "summary": "Create new webhook subscription",
        "description": "Creates a new webhook subscription with the specified subscription details.",
        "operationId": "CreateSubscription",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubscriptionDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubscriptionDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubscriptionDto" }]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When request is successful. Returns the new webhook subscriptions.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Subscription" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get a webhook subscription",
        "description": "Returns the webhook subscription.",
        "operationId": "GetSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Returns the webhook subscriptions.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Subscription" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Webhooks"],
        "summary": "Update a webhook subscription",
        "description": "Updates a webhook subscription with the specified subscription details.",
        "operationId": "UpdateSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubscriptionDto" }]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubscriptionDto" }]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/SubscriptionDto" }]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When request is successful. Returns updated webhook subscriptions.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Subscription" }
              }
            }
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "When webhook subscription with specified id is not associated with authenticated client."
          },
          "404": {
            "description": "When the webhook subscription is not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Webhooks"],
        "summary": "Deletes a webhook subscription",
        "description": "Deletes and unsubscribes from the specified webhook subscription.",
        "operationId": "DeleteSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Deletes the webhook subscription."
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/webhooks/{id}/notify": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Notify a webhook subscription",
        "description": "Notifies a webhook subscription with a 'noop' event type.\r\n            \r\nUsed for testing purposes.",
        "operationId": "Notify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "When request is successful. Notifies the webhook subscription."
          },
          "400": {
            "description": "When an unsupported request is made.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountTypes": {
        "enum": [0, 1, 2, 3],
        "type": "integer",
        "format": "int32"
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "nullable": true },
          "detail": { "type": "string", "nullable": true }
        },
        "additionalProperties": false
      },
      "BankAccount": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the bank account.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "accountType": {
            "allOf": [{ "$ref": "#/components/schemas/AccountTypes" }],
            "description": "The type of the bank account (Operating = 0, Trust = 1, Credit = 2, ControlledMoney = 3).",
            "example": 0
          },
          "accountName": {
            "type": "string",
            "description": "Account Name.",
            "nullable": true,
            "example": "John Smith"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account Number.",
            "nullable": true,
            "example": "10436489"
          },
          "bankName": {
            "type": "string",
            "description": "Bank Name.",
            "nullable": true,
            "example": "Commonwealth Bank"
          },
          "branchNumber": {
            "type": "string",
            "description": "Branch Number.",
            "nullable": true,
            "example": "062201"
          },
          "branchName": {
            "type": "string",
            "description": "Branch Name.",
            "nullable": true,
            "example": "Sydney"
          }
        },
        "additionalProperties": false
      },
      "BankAccountBalance": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the bank account. This is the same id used for BankAccount.",
            "nullable": true,
            "example": "611ccf16-df18-433c-9900-2496f3ab902c"
          },
          "balance": {
            "type": "number",
            "description": "Total balance of the bank account.",
            "format": "double",
            "example": 1000
          },
          "contactBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountContactBalance"
            },
            "description": "List of contact balances. If balances are stored by matter, not by contact, then there can be\r\na contact balance with no contact id. In this case, MatterBalances should be used instead.",
            "nullable": true
          },
          "matterBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountMatterBalance"
            },
            "description": "List of matter balances. A matter balance will be equal to the sum of all contact balances with\r\nthe same MatterId.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountContactBalance": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "18c05819-c321-4907-800c-d5a608729c5a"
          },
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the matter.",
            "nullable": true,
            "example": "39a0a7d0-dd1c-4dea-a3f6-f8b35656f168"
          },
          "balance": {
            "type": "number",
            "description": "Balance belonging to the specified contact and matter.",
            "format": "double",
            "example": 1000
          }
        },
        "additionalProperties": false
      },
      "BankAccountMatterBalance": {
        "type": "object",
        "properties": {
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the matter.",
            "nullable": true,
            "example": "39a0a7d0-dd1c-4dea-a3f6-f8b35656f168"
          },
          "balance": {
            "type": "number",
            "description": "Balance belonging to the specified matter.",
            "format": "double",
            "example": 1000
          },
          "unpresentedChequesBalance": {
            "type": "number",
            "description": "Balance of the unpresented cheques for this matter. A cheque is considered \r\nunpresented if the related transaction has not been reconciled. If this balance is not zero,\r\nsome actions on the matter are restricted (e.g. closing or cancelling the matter).",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "nullable": true },
          "title": { "type": "string", "nullable": true },
          "status": { "type": "integer", "format": "int32", "nullable": true },
          "detail": { "type": "string", "nullable": true },
          "instance": { "type": "string", "nullable": true }
        },
        "additionalProperties": {}
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the transaction.",
            "nullable": true,
            "example": "64818ee0-c7b4-46ec-862e-514d8b29540a"
          },
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the associated matter.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "payorId": {
            "type": "string",
            "description": "Unique identifier of the associated contact.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction.\r\n\r\nPossible values:\r\n    Deposit, DepositReversal, InvoicePayment, InvoicePaymentReversal, \r\n    VendorPayment, VendorPaymentReversal Transfer, \r\n    BankFees, BankFeesReversal, Interest, InterestReversal.",
            "nullable": true,
            "example": "Deposit"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the transaction in dollars. Limited to 2 decimal places (cents).",
            "format": "double",
            "example": 102.65
          },
          "effectiveDate": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date-time"
          },
          "reference": {
            "type": "string",
            "description": "Reference for the transaction.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transaction.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the transaction.",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Note for the transaction (for internal use).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionDto": {
        "type": "object",
        "properties": {
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the associated matter.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "payorId": {
            "type": "string",
            "description": "Unique identifier of the associated contact.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction.\r\n\r\nPossible values: Deposit.",
            "nullable": true,
            "example": "Deposit"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the transaction in dollars. Limited to 2 decimal places (cents).",
            "format": "double",
            "example": 102.65
          },
          "reference": {
            "type": "string",
            "description": "Reference for the transaction.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transaction.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the transaction.",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Note for the transaction (for internal use).",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Activity": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the activity.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "versionId": {
            "type": "string",
            "description": "Unique version identifier of the activity.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that last updated the activity.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/EntryType" }],
            "description": "Type of the activity.\r\n\r\nPossible values: Fixed = '0', Time = '1', Expense = '2'",
            "example": 0
          },
          "description": {
            "type": "string",
            "description": "Description of the activity.",
            "nullable": true,
            "example": "Contract review"
          },
          "code": {
            "type": "string",
            "description": "Code of the activity.",
            "nullable": true,
            "example": "CR"
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the activity is billable.",
            "example": true
          },
          "rateType": {
            "allOf": [{ "$ref": "#/components/schemas/ActivityRateType" }],
            "description": "The activity rate type.\r\n\r\nPossible values: UseDefaultStaffRate = '0', OverrideRateForAllStaff = '1', OverrideRatePerStaff = '2'",
            "example": 2
          },
          "rate": {
            "type": "number",
            "description": "Rate of the activity in dollars.\r\n\r\nIf set, rate type must be OverrideRateForAllStaff",
            "format": "double",
            "example": 23.2
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the activity. This is the default value used when creating an expense or time-based fee.\r\n\r\nFor type 'Expense', this field represents the quantity of the expense in units.\r\nFor type 'Time', this field represents the duration of in minutes, divided by 100,\r\ne.g. for 1 hour duration, quantity is 0.6, which is 60 minutes divided by 100.\r\n\r\nApplies only for 'Time' and 'Expense' types. Not applicable for activity type 'Fixed'.",
            "format": "double",
            "example": 0.6
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.",
            "example": true
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Sets tax rate to 0 for the entry (e.g. expense).",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True if the activity is deleted.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ActivityDto": {
        "type": "object",
        "properties": {
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user updating the activity.\r\n\r\nThis field is reserved for server-to-server operations.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/EntryType" }],
            "description": "Type of the activity.\r\n\r\nPossible values: Fixed = '0', Time = '1', Expense = '2'",
            "example": 0
          },
          "description": {
            "type": "string",
            "description": "Description of the activity.",
            "nullable": true,
            "example": "Review contract"
          },
          "code": {
            "type": "string",
            "description": "Code of the activity. Cannot be longer than 20 characters.",
            "nullable": true,
            "example": "RC"
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the activity is billable.",
            "example": false
          },
          "rateType": {
            "allOf": [{ "$ref": "#/components/schemas/ActivityRateType" }],
            "description": "The activity rate type.\r\n            \r\nPossible values: UseDefaultStaffRate = '0', OverrideRateForAllStaff = '1', OverrideRatePerStaff = '2'",
            "example": 0
          },
          "rate": {
            "type": "number",
            "description": "Rate of the activity in dollars.\r\n\r\nIf set, rateType must be OverrideRateForAllStaff",
            "format": "double",
            "nullable": true,
            "example": 23.21
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the activity. This is the default value used when creating an expense or time-based fee.\r\n\r\nFor type 'Expense', this field represents the quantity of the expense in units.\r\nFor type 'Time', this field represents the duration of in minutes, divided by 100,\r\ne.g. for 1 hour duration, quantity is 0.6, which is 60 minutes divided by 100.\r\n\r\nApplies only for 'Time' and 'Expense' types. Not applicable for activity type 'Fixed'.",
            "format": "double",
            "nullable": true,
            "example": 0.6
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.",
            "example": false
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Sets tax rate to 0 for the entry (e.g. expense).",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ActivityPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Activity" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityRateType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "description": "The activity rate type.\r\n\r\nPossible values: UseDefaultStaffRate = '0', OverrideRateForAllStaff = '1', OverrideRatePerStaff = '2'",
        "format": "int32"
      },
      "EntryType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "description": "Type of the activity.\r\n\r\nPossible values: Fixed = '0', Time = '1', Expense = '2'",
        "format": "int32"
      },
      "Archive": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Matter Id.",
            "nullable": true,
            "example": "f489b750-544e-4aa7-962e-f388b775bc14"
          },
          "archivedDate": {
            "type": "string",
            "description": "Date the matter was archived.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "archiveBoxNumber": {
            "type": "string",
            "description": "Archive box number.",
            "nullable": true,
            "example": "24"
          },
          "archiveComments": {
            "type": "string",
            "description": "Archive comments.",
            "nullable": true,
            "example": "Lot 1"
          },
          "archivedLocation": {
            "type": "string",
            "description": "Archived location.",
            "nullable": true,
            "example": "Box"
          },
          "destroyDate": {
            "type": "string",
            "description": "Date the files of the matter were destroyed.",
            "format": "date-time",
            "example": "2022-04-29T14:00:00Z"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Flag indicating if the matter is archived.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ArchiveDto": {
        "required": ["isArchived"],
        "type": "object",
        "properties": {
          "archivedDate": {
            "type": "string",
            "description": "Date the matter was archived.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "archiveBoxNumber": {
            "type": "string",
            "description": "Archive box number.",
            "nullable": true,
            "example": "24"
          },
          "archiveComments": {
            "type": "string",
            "description": "Archive comments.",
            "nullable": true,
            "example": "Lot 1"
          },
          "archivedLocation": {
            "type": "string",
            "description": "Archived location.",
            "nullable": true,
            "example": "Box"
          },
          "destroyDate": {
            "type": "string",
            "description": "Date the files of the matter were destroyed.",
            "format": "date-time",
            "example": "2022-04-29T14:00:00Z"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Flag indicating if the matter is archived.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "BillingConfiguration": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the billing configuration.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "billingType": {
            "allOf": [{ "$ref": "#/components/schemas/BillingTypeEnum" }],
            "description": "The billing type.\r\n\r\nPossible values: None = 0, Fixed Fee = 1, Fixed Fee per Appearance = 2, Time Based = 3, Contingency Dollars = 4, Contingency Percent = 5, Not Billable = 6",
            "example": 1
          },
          "amount": {
            "type": "number",
            "description": "The amount (currency).\r\n\r\nOnly applicable when BillingType is 'Fixed Fee', 'Fixed Fee per Apperance' or 'Time Based'.",
            "format": "double",
            "example": 142.31
          },
          "disbursementAmount": {
            "type": "number",
            "description": "The disbursement amount (currency). \r\n\r\nOnly applicable when BillingType is 'Fixed Fee', 'Fixed Fee per Apperance' or 'Time Based'.\r\n\r\nOnly supported in AU and the UK.",
            "format": "double",
            "example": 160
          },
          "contingencyAmount": {
            "type": "number",
            "description": "The contingency amount (percentage). \r\n\r\nOnly applicable when BillingType is 'Contingency Percent'.",
            "format": "double",
            "example": 32
          },
          "debtors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "The matter debtors.",
            "nullable": true
          },
          "rateSetId": {
            "type": "string",
            "description": "The rate set id.\r\n\r\nOnly supported in AU and the UK.",
            "nullable": true,
            "example": "100558"
          },
          "isUtbmsEnabled": {
            "type": "boolean",
            "description": "True if Uniform Task Based Management (UTBMS) is enabled for this matter.\r\n\r\nOnly supported in the US.",
            "example": true
          },
          "ledesFirmId": {
            "type": "string",
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) firm.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100558"
          },
          "ledesMatterId": {
            "type": "string",
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) matter.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100558"
          },
          "ledesClientMatterId": {
            "type": "string",
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) client matter.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100558"
          },
          "ledesTimekeeperClassificationType": {
            "allOf": [
              { "$ref": "#/components/schemas/TimekeeperClassificationType" }
            ],
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) classification type.\r\n\r\nPossible values: Length6 = 0, Length2 = 1.\r\n\r\nOnly supported in the US.",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "BillingConfigurationDto": {
        "type": "object",
        "properties": {
          "billingType": {
            "allOf": [{ "$ref": "#/components/schemas/BillingTypeEnum" }],
            "description": "The billing type.\r\n\r\nPossible values: \r\nNone = 0, \r\nFixed Fee = 1, \r\nFixed Fee per Appearance = 2, \r\nTime Based = 3, \r\nContingency Dollars = 4, \r\nContingency Percent = 5, \r\nNot Billable = 6,\r\nConditionalFeeAgreement = 7",
            "example": 1
          },
          "amount": {
            "type": "number",
            "description": "The amount (currency).\r\n\r\nOnly applicable when BillingType is 'Fixed Fee', 'Fixed Fee per Apperance', 'Contingency ($)' or 'Time Based'.",
            "format": "double",
            "example": 142.31
          },
          "contingencyAmount": {
            "type": "number",
            "description": "The contingency amount (percentage). \r\n\r\nOnly applicable when BillingType is 'Contingency Percent'.",
            "format": "double",
            "example": 32
          },
          "disbursementAmount": {
            "type": "number",
            "description": "The disbursement amount (currency).\r\n\r\nOnly applicable when BillingType is 'Fixed Fee', 'Fixed Fee per Apperance', 'Contingency ($)' or 'Time Based'.\r\n\r\nOnly supported in the UK.",
            "format": "double",
            "example": 520.67
          },
          "debtorIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The matter debtors. Must be valid contact id(s) and a maximum of 3 debtors can be set.",
            "nullable": true
          },
          "isUtbmsEnabled": {
            "type": "boolean",
            "description": "True if Uniform Task Based Management (UTBMS) is enabled for this matter.\r\n\r\nOnly supported in the US.",
            "example": true
          },
          "ledesFirmId": {
            "type": "string",
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) firm.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100558"
          },
          "ledesMatterId": {
            "type": "string",
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) matter.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100558"
          },
          "ledesClientMatterId": {
            "type": "string",
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) client matter.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100558"
          },
          "ledesTimekeeperClassificationType": {
            "allOf": [
              { "$ref": "#/components/schemas/TimekeeperClassificationType" }
            ],
            "description": "The associated Legal Electronic Data Exchange Standard (LEDES) classification type.\r\n\r\nPossible values: Length6 = 0, Length2 = 1.\r\n\r\nOnly supported in the US.",
            "example": 0
          },
          "rateSetId": {
            "type": "string",
            "description": "The RateSet Id.\r\n\r\nOnly supported in the UK.",
            "nullable": true,
            "example": "100558"
          }
        },
        "additionalProperties": false
      },
      "BillingTypeEnum": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
        "type": "integer",
        "description": "The billing type.\r\n\r\nPossible values: \r\nNone = 0, \r\nFixed Fee = 1, \r\nFixed Fee per Appearance = 2, \r\nTime Based = 3, \r\nContingency Dollars = 4, \r\nContingency Percent = 5, \r\nNot Billable = 6,\r\nConditionalFeeAgreement = 7",
        "format": "int32"
      },
      "TimekeeperClassificationType": {
        "enum": [0, 1],
        "type": "integer",
        "description": "The associated Legal Electronic Data Exchange Standard (LEDES) classification type.\r\n\r\nPossible values: Length6 = 0, Length2 = 1.\r\n\r\nOnly supported in the US.",
        "format": "int32"
      },
      "Address": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type in address (if applicable). Accepts custom values.\r\n\r\ne.g. Apartment, Unit, Flat, Villa, Suite.",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type. Accepts custom values.\r\n\r\ne.g. Street, Road, Avenue, Lane.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "locality": {
            "type": "string",
            "description": "Locality.\r\n\r\nOnly supported in the UK.",
            "nullable": true,
            "example": "Dunkirk"
          },
          "county": {
            "type": "string",
            "description": "County.\r\n\r\nOnly supported in the US and UK.",
            "nullable": true,
            "example": "New York"
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "poBox": {
            "allOf": [{ "$ref": "#/components/schemas/PoBoxAddress" }],
            "description": "PO Box details (if applicable).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type in address (if applicable). Accepts custom values.\r\n\r\ne.g. Apartment, Unit, Flat, Villa, Suite.",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type. Accepts custom values.\r\n\r\ne.g. Street, Road, Avenue, Lane.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "locality": {
            "type": "string",
            "description": "Locality.\r\n\r\nOnly supported in the UK.",
            "nullable": true,
            "example": "Dunkirk"
          },
          "county": {
            "type": "string",
            "description": "County.\r\n\r\nOnly supported in the US and UK.",
            "nullable": true,
            "example": "New York"
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "poBox": {
            "allOf": [{ "$ref": "#/components/schemas/PoBoxAddressDto" }],
            "description": "PO Box details.\r\n\r\nOnly supported in AU.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressWithDxAddress": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type in address (if applicable). Accepts custom values.\r\n\r\ne.g. Apartment, Unit, Flat, Villa, Suite.",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type. Accepts custom values.\r\n\r\ne.g. Street, Road, Avenue, Lane.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "locality": {
            "type": "string",
            "description": "Locality.\r\n\r\nOnly supported in the UK.",
            "nullable": true,
            "example": "Dunkirk"
          },
          "county": {
            "type": "string",
            "description": "County.\r\n\r\nOnly supported in the US and UK.",
            "nullable": true,
            "example": "New York"
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "poBox": {
            "allOf": [{ "$ref": "#/components/schemas/PoBoxAddress" }],
            "description": "PO Box details (if applicable).",
            "nullable": true
          },
          "dxAddress": {
            "allOf": [{ "$ref": "#/components/schemas/DxAddress" }],
            "description": "DX address details (only applicable for AUS).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressWithDxAddressDto": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type in address (if applicable). Accepts custom values.\r\n\r\ne.g. Apartment, Unit, Flat, Villa, Suite.",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type. Accepts custom values.\r\n\r\ne.g. Street, Road, Avenue, Lane.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "locality": {
            "type": "string",
            "description": "Locality.\r\n\r\nOnly supported in the UK.",
            "nullable": true,
            "example": "Dunkirk"
          },
          "county": {
            "type": "string",
            "description": "County.\r\n\r\nOnly supported in the US and UK.",
            "nullable": true,
            "example": "New York"
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "poBox": {
            "allOf": [{ "$ref": "#/components/schemas/PoBoxAddressDto" }],
            "description": "PO Box details.\r\n\r\nOnly supported in AU.",
            "nullable": true
          },
          "dxAddress": {
            "allOf": [{ "$ref": "#/components/schemas/DxAddressDto" }],
            "description": "DX address of the company (only applicable for AUS).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CitizenshipDetails": {
        "type": "object",
        "properties": {
          "countryOfCitizenship": {
            "type": "string",
            "description": "Country of citizenship",
            "nullable": true,
            "example": "USA"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality",
            "nullable": true,
            "example": "American"
          },
          "languageOfInterpreter": {
            "type": "string",
            "description": "Language of interpreter",
            "nullable": true,
            "example": "French"
          }
        },
        "additionalProperties": false
      },
      "CitizenshipDetailsDto": {
        "type": "object",
        "properties": {
          "countryOfCitizenship": {
            "type": "string",
            "description": "Country of citizenship",
            "nullable": true,
            "example": "USA"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality",
            "nullable": true,
            "example": "American"
          },
          "languageOfInterpreter": {
            "type": "string",
            "description": "Language of interpreter",
            "nullable": true,
            "example": "French"
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company's name.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "type": {
            "type": "string",
            "description": "Company's type.\r\n\r\nPossible values for US: 'Corporation', 'Government Agency', 'Limited Liability Company', 'Sole Proprietor', 'Partnership', 'Not-for-Profit'\r\n\r\nPossible values for AU: 'Company', 'Sole Proprietor', 'Partnership', 'Government Department'\r\n\r\nPossible values for UK: 'Company', 'Sole Trader', 'Partnership', 'Limited Liability Partnership', 'Government Department'",
            "nullable": true,
            "example": "Corporation"
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Company's phone details.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Company's fax details.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Company's email address.",
            "nullable": true,
            "example": "contact@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for company (if applicable).",
            "nullable": true,
            "example": "Construction company"
          },
          "abn": {
            "type": "string",
            "description": "For AU: Australian Company Number (ABN) of the firm.\r\n\r\nFor UK: Company Registration Number (CRN) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "companyNumberType": {
            "type": "string",
            "description": "Company's Australian company number type.\r\n\r\nAccepted values - ACN, ARBN\r\n\r\nOnly supported in AU.",
            "nullable": true,
            "example": "ACN"
          },
          "companyNumber": {
            "type": "string",
            "description": "Company's Australian Company Number.\r\n            \r\nOnly supported in AU.",
            "nullable": true,
            "example": "234567890"
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/Address" }],
            "description": "Company's mailing address details.",
            "nullable": true
          },
          "businessAddress": {
            "allOf": [{ "$ref": "#/components/schemas/AddressWithDxAddress" }],
            "description": "Company's business address details.",
            "nullable": true
          },
          "staff": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "Company's staff hypermedia links.",
            "nullable": true,
            "readOnly": true
          },
          "directors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "Company's directors hypermedia links.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company's name.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "type": {
            "type": "string",
            "description": "Company's type.\r\n\r\nPossible values for US: 'Corporation', 'Government Agency', 'Limited Liability Company', 'Sole Proprietor', 'Partnership', 'Not-for-Profit'\r\n\r\nPossible values for AU: 'Company', 'Sole Proprietor', 'Partnership', 'Government Department'\r\n\r\nPossible values for UK: 'Company', 'Sole Trader', 'Partnership', 'Limited Liability Partnership', 'Government Department'",
            "nullable": true,
            "example": "Corporation"
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Company's phone details.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Company's fax details.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Company's email address.",
            "nullable": true,
            "example": "contact@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for company (if applicable).",
            "nullable": true,
            "example": "Recently merged with Cyberdyne Inc."
          },
          "businessAddress": {
            "allOf": [
              { "$ref": "#/components/schemas/AddressWithDxAddressDto" }
            ],
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }],
            "description": "Only applicable for USA.",
            "nullable": true
          },
          "abn": {
            "type": "string",
            "description": "For AU: Australian Company Number (ABN) of the company.\r\n\r\nFor UK: Company Registration Number (CRN) of the company.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "companyNumberType": {
            "type": "string",
            "description": "Company's Australian company number type.\r\n\r\nPossible values: 'ACN', 'ARBN'\r\n\r\nOnly supported in AU.",
            "nullable": true,
            "example": "ACN"
          },
          "companyNumber": {
            "type": "string",
            "description": "Company's Australian Company Number.\r\n\r\nOnly supported in AU.",
            "nullable": true,
            "example": "234567890"
          },
          "staffIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of Staff IDs for this company.",
            "nullable": true,
            "example": [
              "73481c13-b7f8-4610-b221-aaccbf7aaade",
              "18cd6029-4a9e-4b99-bae5-710a7d79a19b"
            ]
          },
          "directorIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of Director IDs for this company.",
            "nullable": true,
            "example": [
              "73481c13-b7f8-4610-b221-aaccbf7aaade",
              "18cd6029-4a9e-4b99-bae5-710a7d79a19b"
            ]
          }
        },
        "additionalProperties": false
      },
      "Contact": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the contact.",
            "nullable": true,
            "example": "EXT01"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "person": {
            "allOf": [{ "$ref": "#/components/schemas/Person" }],
            "description": "Contact person details (if applicable).",
            "nullable": true
          },
          "company": {
            "allOf": [{ "$ref": "#/components/schemas/Company" }],
            "description": "Contact company details (if applicable).",
            "nullable": true
          },
          "trust": {
            "allOf": [{ "$ref": "#/components/schemas/Trust" }],
            "description": "Contact trust details (if applicable).\r\n\r\nNote that trusts are currently not a feature for Australia (only the US).",
            "nullable": true
          },
          "groupOfPeople": {
            "allOf": [{ "$ref": "#/components/schemas/GroupOfPeople" }],
            "description": "Contact group details (if applicable).",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Returns true if the contact is deleted.",
            "example": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false
      },
      "ContactDto": {
        "type": "object",
        "properties": {
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the contact.",
            "nullable": true,
            "example": "EXT01"
          },
          "person": {
            "allOf": [{ "$ref": "#/components/schemas/PersonDto" }],
            "description": "Contact person details (if applicable).",
            "nullable": true
          },
          "company": {
            "allOf": [{ "$ref": "#/components/schemas/CompanyDto" }],
            "description": "Contact company details (if applicable).",
            "nullable": true
          },
          "trust": {
            "allOf": [{ "$ref": "#/components/schemas/TrustDto" }],
            "description": "Contact trust details (if applicable).\r\n\r\nOnly supported in US.",
            "nullable": true
          },
          "groupOfPeople": {
            "allOf": [{ "$ref": "#/components/schemas/GroupOfPeopleDto" }],
            "description": "Contact group details (if applicable).\r\n\r\nOnly supported in US and AU.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Contact can be restored by setting this to false.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ContactPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Contact" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactRelationDto": {
        "type": "object",
        "properties": {
          "relatedContactId": {
            "type": "string",
            "description": "Unique identifier of the related contact.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "businessRole": {
            "type": "string",
            "description": "Business role of related contact.\r\n\r\nOnly applicable for companies (not trusts).",
            "nullable": true,
            "example": "Bookkeeper"
          }
        },
        "additionalProperties": false
      },
      "DeathDetails": {
        "type": "object",
        "properties": {
          "deathDate": {
            "type": "string",
            "description": "Contact person's date of death.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-08-01"
          },
          "deathPlace": {
            "type": "string",
            "description": "Contact person's place of death.",
            "nullable": true,
            "example": "Chicago"
          },
          "deathState": {
            "type": "string",
            "description": "Contact person's death state.\r\n            \r\nOnly supported in AU and US.",
            "nullable": true,
            "example": "IL"
          },
          "deathCountry": {
            "type": "string",
            "description": "Contact person's death country.",
            "nullable": true,
            "example": "USA"
          },
          "deathCounty": {
            "type": "string",
            "description": "Contact person's death county.\r\n            \r\nOnly supported in US.",
            "nullable": true,
            "example": "San Bernardino County"
          }
        },
        "additionalProperties": false
      },
      "DeathDetailsDto": {
        "type": "object",
        "properties": {
          "deathDate": {
            "type": "string",
            "description": "Contact person's date of death.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-08-01"
          },
          "deathPlace": {
            "type": "string",
            "description": "Contact person's place of death.",
            "nullable": true,
            "example": "Chicago"
          },
          "deathState": {
            "type": "string",
            "description": "Contact person's death state.\r\n            \r\nOnly supported in AU and US.",
            "nullable": true,
            "example": "IL"
          },
          "deathCountry": {
            "type": "string",
            "description": "Contact person's death country.",
            "nullable": true,
            "example": "USA"
          },
          "deathCounty": {
            "type": "string",
            "description": "Contact person's death county.\r\n            \r\nOnly supported in US.",
            "nullable": true,
            "example": "San Bernardino County"
          }
        },
        "additionalProperties": false
      },
      "DxAddress": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Direct Exchange number (if applicable).",
            "nullable": true,
            "example": "376"
          },
          "exchange": {
            "type": "string",
            "description": "Direct Exchange name.",
            "nullable": true,
            "example": "DX"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "NSW"
          }
        },
        "additionalProperties": false
      },
      "DxAddressDto": {
        "type": "object",
        "properties": {
          "number": { "type": "string", "nullable": true },
          "exchange": { "type": "string", "nullable": true },
          "state": { "type": "string", "nullable": true }
        },
        "additionalProperties": false
      },
      "GroupOfPeople": {
        "type": "object",
        "properties": {
          "people": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "List of contact person hypermedia links.",
            "nullable": true
          },
          "residentialAddress": {
            "allOf": [{ "$ref": "#/components/schemas/Address" }],
            "description": "Contact group's residential address details.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/Address" }],
            "description": "Contact group's mailing address details.\r\n            \r\nOnly supported in the US.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Names of the people in the group. Limited to the first 5 names.",
            "nullable": true,
            "example": "John Smith &amp; Jane Citizen"
          }
        },
        "additionalProperties": false
      },
      "GroupOfPeopleDto": {
        "type": "object",
        "properties": {
          "peopleIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of contact person Ids.",
            "nullable": true,
            "example": [
              "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2",
              "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
            ]
          },
          "residentialAddress": {
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }],
            "description": "Contact group's residential address details.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }],
            "description": "Contact group's mailing address details.\r\n            \r\nOnly supported in the US.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentificationDetailsDto": {
        "type": "object",
        "properties": {
          "alienNumber": {
            "type": "string",
            "description": "Alien number\r\nOnly supported in the US.",
            "nullable": true
          },
          "registrationAuthority": {
            "type": "string",
            "description": "Registration authority\r\nOnly supported in the US.",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "description": "Registration number\r\nOnly supported in the US.",
            "nullable": true
          },
          "driversLicenseNumber": {
            "type": "string",
            "description": "Driver's license number",
            "nullable": true
          },
          "driversLicenseState": {
            "type": "string",
            "description": "Driver's licence state\r\n<example>IL</example><example>NSW</example>",
            "nullable": true
          },
          "medicareNumber": {
            "type": "string",
            "description": "Medicare number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PassportDetails": {
        "type": "object",
        "properties": {
          "passportNumber": {
            "type": "string",
            "description": "Contact person's passport number.",
            "nullable": true,
            "example": "AB123456"
          },
          "passportIssueDate": {
            "type": "string",
            "description": "Contact person's passport issue date.",
            "format": "date-time",
            "nullable": true,
            "example": "2010-08-01"
          },
          "passportExpireDate": {
            "type": "string",
            "description": "Contact person's passport expiry date.",
            "format": "date-time",
            "nullable": true,
            "example": "2030-08-01"
          },
          "passportIssueCountry": {
            "type": "string",
            "description": "Contact person's passport country of issue.",
            "nullable": true,
            "example": "USA"
          },
          "passportIssueAuthority": {
            "type": "string",
            "description": "Contact person's passport issuing authority.\r\n            \r\nOnly supported in the UK.",
            "nullable": true,
            "example": "HM Passport Office"
          }
        },
        "additionalProperties": false
      },
      "PassportDetailsDto": {
        "type": "object",
        "properties": {
          "passportNumber": {
            "type": "string",
            "description": "Contact person's passport number.",
            "nullable": true,
            "example": "AB123456"
          },
          "passportIssueDate": {
            "type": "string",
            "description": "Contact person's passport issue date.",
            "format": "date-time",
            "nullable": true,
            "example": "2010-08-01"
          },
          "passportExpireDate": {
            "type": "string",
            "description": "Contact person's passport expiry date.",
            "format": "date-time",
            "nullable": true,
            "example": "2030-08-01"
          },
          "passportIssueCountry": {
            "type": "string",
            "description": "Contact person's passport country of issue.",
            "nullable": true,
            "example": "USA"
          },
          "passportIssueAuthority": {
            "type": "string",
            "description": "Contact person's passport issuing authority.\r\n            \r\nOnly supported in the UK.",
            "nullable": true,
            "example": "HM Passport Office"
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Contact person's title. Accepts custom values.\r\n\r\ne.g. Mr, Mrs, Miss, Honourable, Judge.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Contact person's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Contact person's middle name (if applicable).",
            "nullable": true,
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "description": "Contact person's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "nameSuffix": {
            "type": "string",
            "description": "Contact person's name suffix (if applicable).",
            "nullable": true,
            "example": "PhD"
          },
          "customName": {
            "type": "string",
            "description": "Contact person's custom name to be used in letters (if applicable).",
            "nullable": true,
            "example": "Johnny"
          },
          "residentialAddress": {
            "allOf": [{ "$ref": "#/components/schemas/Address" }],
            "description": "Contact person's residential address details.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/Address" }],
            "description": "Contact person's mailing address details.\r\n\r\nOnly supported in the US.",
            "nullable": true
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Contact person's phone details.",
            "nullable": true
          },
          "phone2": {
            "allOf": [
              { "$ref": "#/components/schemas/PhoneNumberWithExtension" }
            ],
            "description": "Contact person's alternate phone details.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Contact person's fax details. \r\n\r\nOnly supported in the US.",
            "nullable": true
          },
          "cell": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Contact person's mobile details.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Contact person's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about contact (if applicable).",
            "nullable": true,
            "example": "Prefers to answer work phone."
          },
          "occupation": {
            "type": "string",
            "description": "Contact person's occupation.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "gender": {
            "type": "string",
            "description": "Contact person's gender.\r\n\r\nAccepted values - Male, Female, Other as well as any free text.",
            "nullable": true,
            "example": "Male"
          },
          "maritalStatus": {
            "type": "string",
            "description": "Contact person's marital status. Accepts custom values.\r\n\r\ne.g. Single, Married, Separated, Divorced, Widowed, De facto.",
            "nullable": true,
            "example": "Single"
          },
          "specialNeeds": {
            "type": "string",
            "description": "Brief description of any special needs (if applicable).\r\n\r\nOnly supported in Australia.",
            "nullable": true,
            "example": "Wheelchair access"
          },
          "birthDate": {
            "type": "string",
            "description": "Contact person's date of birth.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "birthPlace": {
            "type": "string",
            "description": "Contact person's place of birth.",
            "nullable": true,
            "example": "Chicago"
          },
          "birthState": {
            "type": "string",
            "description": "Contact person's birth state.",
            "nullable": true,
            "example": "Illinois"
          },
          "birthCountry": {
            "type": "string",
            "description": "Contact person's birth country.",
            "nullable": true,
            "example": "USA"
          },
          "identificationNumberType": {
            "type": "string",
            "description": "Contact person's type of identification.",
            "nullable": true,
            "example": "Passport"
          },
          "identificationNumber": {
            "type": "string",
            "description": "Contact person's identification number.",
            "nullable": true,
            "example": "PP123456789"
          },
          "birthFirstName": {
            "type": "string",
            "description": "Contact person's first name at birth.",
            "nullable": true,
            "example": "James"
          },
          "birthMiddleName": {
            "type": "string",
            "description": "Contact person's middle name at birth.",
            "nullable": true,
            "example": "Thomas"
          },
          "birthLastName": {
            "type": "string",
            "description": "Contact person's last name at birth.",
            "nullable": true,
            "example": "Jones"
          },
          "previousNames": {
            "type": "string",
            "description": "Contact person's previous names.",
            "nullable": true,
            "example": "Jane Smith"
          },
          "passportDetails": {
            "allOf": [{ "$ref": "#/components/schemas/PassportDetails" }],
            "description": "Contact person's passport details.",
            "nullable": true
          },
          "deathDetails": {
            "allOf": [{ "$ref": "#/components/schemas/DeathDetails" }],
            "description": "Contact person's death details.",
            "nullable": true
          },
          "correctionsReferenceNumber": {
            "type": "string",
            "description": "Contact person's corrections reference number.\r\n\r\nOnly supported in Australia.",
            "nullable": true
          },
          "centrelinkReferenceNumber": {
            "type": "string",
            "description": "Contact person's centrelink reference number.\r\n\r\nOnly supported in Australia.",
            "nullable": true
          },
          "citizenshipDetails": {
            "allOf": [{ "$ref": "#/components/schemas/CitizenshipDetails" }],
            "description": "Contact person's citizenship details.",
            "nullable": true
          },
          "utbmsDetails": {
            "allOf": [{ "$ref": "#/components/schemas/UtbmsDetails" }],
            "description": "Contact's UTBMS Details.\r\n\r\nOnly supported in the US.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Contact person's title. Accepts custom values.\r\n\r\ne.g. Mr, Mrs, Miss, Honourable, Judge.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Contact person's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Contact person's middle name (if applicable).",
            "nullable": true,
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "description": "Contact person's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "nameSuffix": {
            "type": "string",
            "description": "Contact person's name suffix (if applicable).",
            "nullable": true,
            "example": "PhD"
          },
          "customName": {
            "type": "string",
            "description": "Contact person's custom name to be used in letters (if applicable).",
            "nullable": true,
            "example": "Johnny"
          },
          "residentialAddress": {
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }],
            "description": "Contact person's residential address details.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }],
            "description": "Contact person's mailing address details.\r\n\r\nOnly supported in the US.",
            "nullable": true
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Contact person's phone details.",
            "nullable": true
          },
          "phone2": {
            "allOf": [
              { "$ref": "#/components/schemas/PhoneNumberWithExtensionDto" }
            ],
            "description": "Contact person's alternate phone details.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Contact person's fax details.\r\n\r\nOnly supported in the US.",
            "nullable": true
          },
          "cell": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Contact person's mobile details.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Contact person's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about contact (if applicable).",
            "nullable": true,
            "example": "Prefers to answer work phone."
          },
          "occupation": {
            "type": "string",
            "description": "Contact person's occupation.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "birthDate": {
            "type": "string",
            "description": "Contact person's date of birth.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "birthPlace": {
            "type": "string",
            "description": "Contact person's place of birth.",
            "nullable": true,
            "example": "Chicago"
          },
          "birthState": {
            "type": "string",
            "description": "Contact person's birth state.",
            "nullable": true,
            "example": "Illinois"
          },
          "birthCountry": {
            "type": "string",
            "description": "Contact person's birth country.",
            "nullable": true,
            "example": "Australia"
          },
          "identificationNumberType": {
            "type": "string",
            "description": "Contact person's type of identification.\r\n\r\ne.g. SSN, ITIN\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "SSN"
          },
          "identificationNumber": {
            "type": "string",
            "description": "Contact person's identification number.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "PP123456789"
          },
          "passportDetails": {
            "allOf": [{ "$ref": "#/components/schemas/PassportDetailsDto" }],
            "description": "Contact person's passport details.",
            "nullable": true
          },
          "deathDetails": {
            "allOf": [{ "$ref": "#/components/schemas/DeathDetailsDto" }],
            "description": "Contact person's death details.",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "description": "Contact person's gender.\r\n\r\nAccepted values - Male, Female, Other as well as any free text.",
            "nullable": true,
            "example": "Male"
          },
          "maritalStatus": {
            "type": "string",
            "description": "Contact person's marital status. Accepts custom values.\r\n\r\ne.g. Single, Married, Separated, Divorced, Widowed, De facto.",
            "nullable": true,
            "example": "Single"
          },
          "specialNeeds": {
            "type": "string",
            "description": "Brief description of an special needs (if applicable).",
            "nullable": true,
            "example": "Wheelchair access"
          },
          "birthFirstName": {
            "type": "string",
            "description": "Contact person's first name at birth.",
            "nullable": true,
            "example": "James"
          },
          "birthMiddleName": {
            "type": "string",
            "description": "Contact person's middle name at birth.",
            "nullable": true,
            "example": "Thomas"
          },
          "birthLastName": {
            "type": "string",
            "description": "Contact person's last name at birth.",
            "nullable": true,
            "example": "Jones"
          },
          "previousNames": {
            "type": "string",
            "description": "Contact person's previous names.",
            "nullable": true,
            "example": "Jane Smith"
          },
          "correctionsReferenceNumber": {
            "type": "string",
            "description": "Contact person's corrections reference number.\r\n\r\nOnly supported in Australia.",
            "nullable": true
          },
          "centrelinkReferenceNumber": {
            "type": "string",
            "description": "Contact person's centrelink reference number.\r\n\r\nOnly supported in Australia.",
            "nullable": true
          },
          "identificationDetails": {
            "allOf": [
              { "$ref": "#/components/schemas/IdentificationDetailsDto" }
            ],
            "description": "Contact person's identification details.",
            "nullable": true
          },
          "citizenshipDetails": {
            "allOf": [{ "$ref": "#/components/schemas/CitizenshipDetailsDto" }],
            "description": "Contact person's citizenship details.",
            "nullable": true
          },
          "utbmsDetails": {
            "allOf": [{ "$ref": "#/components/schemas/UtbmsDetailsDto" }],
            "description": "Contact's UTBMS Details\r\n\r\nOnly supported in the US.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberDto": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberWithExtension": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code.\r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          },
          "extension": {
            "type": "string",
            "description": "Phone number extension.",
            "nullable": true,
            "example": "103"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberWithExtensionDto": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Phone area code. \r\n\r\nOnly supported in the US.",
            "nullable": true,
            "example": "555"
          },
          "number": {
            "type": "string",
            "description": "Phone number (excluding area code).",
            "nullable": true,
            "example": "1234567"
          },
          "extension": {
            "type": "string",
            "description": "Phone number extension. Accepts numeric characters only.",
            "nullable": true,
            "example": "103"
          }
        },
        "additionalProperties": false
      },
      "PoBoxAddress": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "poBoxType": {
            "type": "string",
            "description": "PO Box type. Accepts custom values.\r\n            \r\ne.g. Care PO, PO Box, Locked Bag, RMS.",
            "nullable": true,
            "example": "Locked Bag"
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO Box number.",
            "nullable": true,
            "example": "12345"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          }
        },
        "additionalProperties": false
      },
      "PoBoxAddressDto": {
        "type": "object",
        "properties": {
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": "John Smith"
          },
          "poBoxType": {
            "type": "string",
            "description": "PO Box type. Accepts custom values.\r\n            \r\ne.g. Care PO, PO Box, Locked Bag, RMS.",
            "nullable": true,
            "example": "Locked Bag"
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO Box number.",
            "nullable": true,
            "example": "12345"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          }
        },
        "additionalProperties": false,
        "description": "PO Box address."
      },
      "Trust": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trust's name.",
            "nullable": true,
            "example": "Trinity Trust"
          },
          "status": {
            "type": "string",
            "description": "Trust's status.\r\n\r\nStandard values are: as Trustee of, as Trustees of, as Co-Trustees of, as an Individual and as Trustee of, as Successor Trustee of.\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "as Trustee of"
          },
          "trustNumber": {
            "type": "string",
            "description": "Trust's number.",
            "nullable": true,
            "example": "12345678"
          },
          "executedDate": {
            "type": "string",
            "description": "Date trust was executed.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Trust's phone details.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Trust's fax details.",
            "nullable": true
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/Address" }],
            "description": "Trust's address.",
            "nullable": true
          },
          "trustees": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Trustee" },
            "description": "List of trustees.",
            "nullable": true,
            "example": [
              { "Name": "John Smith", "Type": "Individual" },
              { "Name": "Smithfield Steel", "Type": "Company" }
            ]
          },
          "contacts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "Trust's contacts hypermedia links.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TrustDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trust's name.",
            "nullable": true,
            "example": "Trinity Trust"
          },
          "status": {
            "type": "string",
            "description": "Trust's status.\r\n\r\nStandard values are: as Trustee of, as Trustees of, as Co-Trustees of, as an Individual and as Trustee of, as Successor Trustee of.\r\n\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "as Trustee of"
          },
          "trustNumber": {
            "type": "string",
            "description": "Trust's number.",
            "nullable": true,
            "example": "12345678"
          },
          "executedDate": {
            "type": "string",
            "description": "Date trust was executed.",
            "format": "date-time",
            "nullable": true,
            "example": "1980-07-01"
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Trust's phone details.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Trust's fax details.",
            "nullable": true
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }],
            "description": "Trust's address.",
            "nullable": true
          },
          "trustees": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TrusteeDto" },
            "description": "List of trustees.",
            "nullable": true,
            "example": [
              { "Name": "John Smith", "Type": "Individual" },
              { "Name": "Smithfield Steel", "Type": "Company" }
            ]
          }
        },
        "additionalProperties": false
      },
      "Trustee": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trustee's name.",
            "nullable": true,
            "example": "John Smith"
          },
          "type": {
            "type": "string",
            "description": "Type of trustee.\r\n\r\nStandard values are: Company, Individual.\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "Individual"
          }
        },
        "additionalProperties": false
      },
      "TrusteeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Trustee's name.",
            "nullable": true,
            "example": "John Smith"
          },
          "type": {
            "type": "string",
            "description": "Type of trustee.\r\n\r\nStandard values are: Company, Individual.\r\n\r\nA custom value can be supplied instead.",
            "nullable": true,
            "example": "Individual"
          }
        },
        "additionalProperties": false
      },
      "UtbmsDetails": {
        "type": "object",
        "properties": {
          "ledesClientId": {
            "type": "string",
            "description": "LEDES client Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Utbms Details"
      },
      "UtbmsDetailsDto": {
        "type": "object",
        "properties": {
          "ledesClientId": {
            "type": "string",
            "description": "LEDES client Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Utbms Details"
      },
      "AddFileDto": {
        "required": ["fileName"],
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Full name of the file including the file extension",
            "example": "court filing.pdf"
          },
          "folderId": {
            "type": "string",
            "description": "Unique identifier of the folder to add the file to. If null it will be placed in the root folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the file owner. If null it will fallback to the authenticated user",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "folderPath": {
            "type": "string",
            "description": "Path of the folder to add the file to. If null then the FolderId will be used",
            "nullable": true,
            "example": "Court Filings/2023/January"
          },
          "fileAdditionalData": {
            "type": "object",
            "additionalProperties": {},
            "description": "Collection of KeyValuePair(string, string) to update File meta data.",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "description": "The original datetime that the file was created. If null the current datetime will be used",
            "format": "date-time",
            "nullable": true,
            "example": "2023-04-23T14:00:00Z"
          },
          "dateModified": {
            "type": "string",
            "description": "The initial datetime that the file was last modified. If null the current datetime will be used",
            "format": "date-time",
            "nullable": true,
            "example": "2023-04-24T14:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "DownloadFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "Unique identifier of the requested file",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Temporary Link to download file",
            "nullable": true,
            "example": ""
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date/time when the download link is no longer accessible",
            "format": "date-time",
            "example": "2022-04-23T14:30:00Z"
          },
          "sizeBytes": {
            "type": "integer",
            "description": "Size of the requested file (in bytes)",
            "format": "int64",
            "example": 19104768
          }
        },
        "additionalProperties": false
      },
      "EditFileDto": {
        "required": ["fileName"],
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Full name of the file including the file extension",
            "example": "court filing.pdf"
          },
          "folderId": {
            "type": "string",
            "description": "Unique identifier of the folder to add the file to. If null it will be placed in the root folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user modifying the file. If null it will fallback to the authenticated user",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "fileAdditionalData": {
            "type": "object",
            "additionalProperties": {},
            "description": "Collection of KeyValuePair(string, string) to update File meta data.",
            "nullable": true
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Flag indicating whether this file is a favorite. If null it will be ignored",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "File": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the file.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "versionId": {
            "type": "string",
            "description": "Unique identifier of the file's current version.",
            "nullable": true
          },
          "folder": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the folder to which the file belongs.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the file, excluding file extension.",
            "nullable": true,
            "example": "court filing"
          },
          "fileExtension": {
            "type": "string",
            "description": "Extension of the file.",
            "nullable": true,
            "example": ".pdf"
          },
          "ownerId": {
            "type": "string",
            "description": "Unique identifier of the user who created/uploaded this file.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "to": {
            "type": "string",
            "description": "The 'To' or recipients' email address (only applicable for email files).",
            "nullable": true,
            "example": "recipient@email.com"
          },
          "from": {
            "type": "string",
            "description": "The 'From' or sender's email address (only applicable for email files).",
            "nullable": true,
            "example": "sender@email.com"
          },
          "dateCreated": {
            "type": "string",
            "description": "The original datetime that the file was created.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "dateModified": {
            "type": "string",
            "description": "The datetime that the file was last modified.",
            "format": "date-time",
            "example": "2022-04-25T17:00:00Z"
          },
          "sizeBytes": {
            "type": "integer",
            "description": "Size of the file (in bytes).",
            "format": "int64",
            "example": 19104768
          },
          "downloadInfo": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link to the download details of the file.",
            "nullable": true
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {},
            "description": "Collection of file meta data as KeyValuePair(string, object).",
            "nullable": true
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Flag indicating whether this file is a favorite",
            "example": false
          },
          "isUploaded": {
            "type": "boolean",
            "description": "Flag indicating whether the file contents are uploaded to the server.",
            "example": false
          },
          "isCancelled": {
            "type": "boolean",
            "description": "Flag indicating whether the file upload has been cancelled.",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Flag indicating whether the file has been deleted.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "FilePagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Folder": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier of the parent folder",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder",
            "nullable": true,
            "example": "Property Documents"
          }
        },
        "additionalProperties": false
      },
      "FolderDto": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of the folder",
            "example": "Property Documents"
          },
          "parentFolderId": {
            "type": "string",
            "description": "Unique identifier of the parent folder",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user modifying the folder. If null it will fallback to the authenticated user",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          }
        },
        "additionalProperties": false
      },
      "FolderListing": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "folders": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Folder" },
            "description": "List of folders",
            "nullable": true,
            "readOnly": true
          },
          "files": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" },
            "description": "List of files",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FolderListingPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FolderListing" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier of the parent folder",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder",
            "nullable": true,
            "example": "Property Documents"
          }
        },
        "additionalProperties": false
      },
      "PreviewFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "Unique identifier of the requested file",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "documentVersionId": { "type": "string", "nullable": true },
          "downloadUrl": {
            "type": "string",
            "description": "Temporary Link to download file",
            "nullable": true,
            "example": ""
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date/time when the download link is no longer accessible",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:30:00Z"
          }
        },
        "additionalProperties": false
      },
      "UploadFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "Unique identifier of the file",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "uploadUrl": {
            "type": "string",
            "description": "Temporary Link to upload file",
            "nullable": true,
            "example": ""
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date/time when the upload link is no longer accessible",
            "format": "date-time",
            "example": "2022-04-23T14:30:00Z"
          }
        },
        "additionalProperties": false
      },
      "Event": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the event.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "matter": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the associated matter.",
            "nullable": true
          },
          "attendees": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "Hypermedia link of all the attendees.",
            "nullable": true
          },
          "externalAttendees": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "Hypermedia link of all the contacts of the external or third party attendees.",
            "nullable": true
          },
          "eventType": {
            "allOf": [{ "$ref": "#/components/schemas/EventType" }],
            "description": "The type of the event.\r\n\r\nPossible values: Non Recurring Event = 0, Recurring Pattern Series = 1, Single Recurring Occurrence = 2, Modified Recurring Occurrence = 3, Deleted Recurring Occurrence = 4",
            "example": 0
          },
          "subject": {
            "type": "string",
            "description": "Subject of event.",
            "nullable": true,
            "example": "Subject"
          },
          "description": {
            "type": "string",
            "description": "Description of event.",
            "nullable": true,
            "example": "Description"
          },
          "location": {
            "type": "string",
            "description": "Location of event.",
            "nullable": true,
            "example": "Location"
          },
          "allDay": {
            "type": "boolean",
            "description": "Whether or not the event is all day.",
            "example": false
          },
          "nonBillable": {
            "type": "boolean",
            "description": "Whether or not the event is billable.\r\nNote events with a duration greater than 12 hours automatically become non-billable.",
            "example": false
          },
          "startTime": {
            "type": "string",
            "description": "Start date and time of the event.\r\nSupported date format is ISO YYYY-MM-DDThh:mm:ss.\r\nNote: date and time will correlate with the time zone provided.",
            "format": "date-time",
            "example": "2000-01-01T20:00:00"
          },
          "endTime": {
            "type": "string",
            "description": "End date and time of the event.\r\nSupported date format is ISO YYYY-MM-DDThh:mm:ss.\r\nNote: date and time will correlate with the time zone provided.",
            "format": "date-time",
            "example": "2000-01-01T20:00:00"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone of the event for determining the start time and end time.\r\nTime zones will be in the IANA time zone format.",
            "nullable": true,
            "example": "Australia/Sydney"
          },
          "lastUpdated": {
            "type": "string",
            "description": "The last date and time the event was updated.\r\nSupported date format is ISO YYYY-MM-DDThh:mm:ss.",
            "format": "date-time",
            "example": "2000-01-01T20:00:00"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Any additional data provided for the event.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Whether the event has been deleted.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "EventDto": {
        "type": "object",
        "properties": {
          "matterId": {
            "type": "string",
            "description": "Matter Id.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "subject": {
            "type": "string",
            "description": "Subject of event.",
            "nullable": true,
            "example": "Subject"
          },
          "description": {
            "type": "string",
            "description": "Description of event.",
            "nullable": true,
            "example": "Description"
          },
          "location": {
            "type": "string",
            "description": "Location of event.",
            "nullable": true,
            "example": "Location"
          },
          "allDay": {
            "type": "boolean",
            "description": "Whether or not the event is all day.",
            "example": false
          },
          "nonBillable": {
            "type": "boolean",
            "description": "Whether or not the event is billable.\r\nNote events with a duration greater than 12 hours automatically become non-billable.",
            "example": false
          },
          "eventType": {
            "allOf": [{ "$ref": "#/components/schemas/EventType" }],
            "description": "The type of the event.\r\n\r\nWe currently support create and updates requests for non recurring events (EventType = 0).",
            "example": 0
          },
          "organizer": {
            "type": "string",
            "description": "The staff Id of the organizer of the event.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "attendees": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The staff Ids of the attendees of the event.",
            "nullable": true
          },
          "externalAttendees": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The contact Ids of the external or third party attendees of the event.\r\n\r\nThe contacts must be of Person type and must be part of the matter.",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "description": "Start date and time of the event.\r\nSupported date format is ISO YYYY-MM-DDThh:mm:ss.\r\nNote: date and time will correlate with the time zone provided.",
            "format": "date-time",
            "example": "2000-01-01T20:00:00"
          },
          "endTime": {
            "type": "string",
            "description": "End date and time of the event.\r\nSupported date format is ISO YYYY-MM-DDThh:mm:ss.\r\nNote: date and time will correlate with the time zone provided.",
            "format": "date-time",
            "example": "2000-01-01T20:00:00"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone of the event for determining the start time and end time.\r\nTime zones are expected in the IANA time zone format.",
            "nullable": true,
            "example": "Australia/Sydney"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Collection of key value pairs to update file meta data.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventType": {
        "enum": [0, 1, 2, 3, 4],
        "type": "integer",
        "description": "The type of the event.\r\n\r\nPossible values: Non Recurring Event = 0, Recurring Pattern Series = 1, Single Recurring Occurrence = 2, Modified Recurring Occurrence = 3, Deleted Recurring Occurrence = 4",
        "format": "int32"
      },
      "Expense": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Unique version identifier of the expense.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "createdByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that created the expense.",
            "nullable": true,
            "example": "8a7f40ea-4123-4ebe-bb05-e9b4b666e706"
          },
          "staff": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member associated to the expense.",
            "nullable": true
          },
          "matter": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The matter associated to the expense.",
            "nullable": true
          },
          "staffId": {
            "type": "string",
            "description": "Deprecated, use Staff.",
            "nullable": true
          },
          "matterId": {
            "type": "string",
            "description": "Deprecated, use Matter.",
            "nullable": true
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "fdb766bc-eb20-4bc1-9417-08b51a7b2286"
          },
          "origin": {
            "type": "string",
            "description": "Where the expense originated from.",
            "nullable": true
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the expense.",
            "nullable": true,
            "example": "PRT"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the expense.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the expense.",
            "nullable": true,
            "example": "Print documents"
          },
          "expenseDate": {
            "type": "string",
            "description": "The date of the expense.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the expense in units (if not applicable, use 1).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 3
          },
          "price": {
            "type": "number",
            "description": "The price of the expense in dollars. Limited to 2 decimal places (cents).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 350.32
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the expense. Calculated as Price * Quantity.\r\n\r\nThis amount ignores GST (if applicable). See Billing.Expenses.Api.Shared.Resources.Expense.AmountExcTax and Billing.Expenses.Api.Shared.Resources.Expense.AmountIncTax.",
            "format": "double",
            "example": 900.21
          },
          "amountExcTax": {
            "type": "number",
            "description": "Amount excluding tax. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 810.01
          },
          "amountIncTax": {
            "type": "number",
            "description": "Amount including tax. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 900.21
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the expense in dollars. Only applicable in AU.",
            "format": "double",
            "example": 90
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.\r\n(Amount = Price * Quantity, GST = value of the Tax field)",
            "example": false
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the expense has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the expense is written off. True only allowed if IsBillable is true. \r\n\r\nWritten off expenses will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the expense is billable. Non-billable expense will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the expense is invoiced externally.",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True if the expense is deleted.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ExpenseDto": {
        "type": "object",
        "properties": {
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user updating the expense.\r\n\r\nThis field is reserved for server-to-server operations.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member.\r\n\r\nWhen StaffId is not provided, the API will attempt to match your User Id to a Staff Id automatically.",
            "nullable": true,
            "example": "47efff74-3e4b-45b3-bddf-affc6649db0b"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "fdb766bc-eb20-4bc1-9417-08b51a7b2286"
          },
          "expenseDate": {
            "type": "string",
            "description": "The date of the expense.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the expense.",
            "nullable": true,
            "example": "PRT"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the expense.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the expense.",
            "nullable": true,
            "example": "Print documents"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the expense in units (if not applicable, use 1).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 3
          },
          "price": {
            "type": "number",
            "description": "The price of the expense in dollars. Limited to 2 decimal places (cents).\r\n\r\nThe expense amount will be calculated as Quantity * Price.",
            "format": "double",
            "example": 350.32
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the expense in dollars. Only applicable in AU.",
            "format": "double",
            "nullable": true,
            "example": 90
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.\r\n(Amount = Price * Quantity, GST = value of the Tax field)",
            "example": false
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the expense has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the expense is written off. True only allowed if IsBillable is true. \r\n\r\nWritten off expenses will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the expense is billable. Non-billable expense will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the expense is invoiced externally.",
            "example": false
          },
          "assignToFirmOwner": {
            "type": "boolean",
            "description": "Assigns expense to a firm owner if true. Ignored if a StaffId is provided.\r\n\r\nNote: It is not guaranteed that the same firm owner will be assigned everytime."
          }
        },
        "additionalProperties": false
      },
      "ExpensePagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Expense" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Fee": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the fee.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "versionId": {
            "type": "string",
            "description": "Unique version identifier of the fee.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "matter": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The matter associated to the fee.",
            "nullable": true
          },
          "staff": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member associated to the fee.",
            "nullable": true
          },
          "matterId": {
            "type": "string",
            "description": "Deprecated, use Matter.",
            "nullable": true
          },
          "staffId": {
            "type": "string",
            "description": "Deprecated, use Staff.",
            "nullable": true
          },
          "createdByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that created the fee.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "lastUpdatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user that updated the fee.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the fee.",
            "nullable": true,
            "example": "PRT"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the fee.",
            "nullable": true,
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the fee.",
            "nullable": true,
            "example": "Print documents"
          },
          "feeDate": {
            "type": "string",
            "description": "The date of the fee.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "feeType": {
            "allOf": [{ "$ref": "#/components/schemas/FeeType" }],
            "description": "The type of the fee (Fixed = 0, Time = 1).",
            "example": 0
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the fee has been finalized.",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the fee is invoiced externally.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the fee is written off. True only allowed if IsBillable is true.\r\n\r\nWritten off fee will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee is billable. Non-billable fee will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "nullable": true,
            "example": false
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the fee in dollars. Only applicable in AU.",
            "format": "double",
            "example": 35
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.",
            "example": false
          },
          "duration": {
            "type": "integer",
            "description": "The duration billed - in minutes.",
            "format": "int64",
            "example": 60
          },
          "durationWorked": {
            "type": "integer",
            "description": "The duration worked - in minutes.",
            "format": "int64",
            "nullable": true,
            "example": 50
          },
          "rate": {
            "type": "number",
            "description": "The rate of the fee in dollars.",
            "format": "double",
            "example": 350
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the fee in dollars. Calculated using Rate and Duration depending on the fee type.\r\n\r\nThis amount includes tax depending on the TaxInclusive property. See Billing.Fees.Api.Shared.Resources.Fee.AmountExcTax and Billing.Fees.Api.Shared.Resources.Fee.AmountIncTax.",
            "format": "double",
            "example": 350
          },
          "amountExcTax": {
            "type": "number",
            "description": "Amount excluding tax in dollars. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 315
          },
          "amountIncTax": {
            "type": "number",
            "description": "Amount including tax in dollars. Calculated from Amount and Tax depending on the TaxInclusive property.\r\n\r\nIf tax is not applicable (outside AU), this will be the same as Amount.",
            "format": "double",
            "example": 350
          },
          "billableAmountExcTax": {
            "type": "number",
            "description": "Billable amount excluding tax in dollars. If fee is billable, value will be the same as AmountExcTax. If it's non-billable,\r\nvalue will be 0.\r\n\r\nIf the fee is partially billable (i.e. has source items, some of which are billable and some not),\r\nthis value will contain the amount calculated from billable items only.",
            "format": "double",
            "example": 315
          },
          "billableTax": {
            "type": "number",
            "description": "Billable tax in dollars. If fee is billable, value will be the same as Tax. If it's non-billable,\r\nvalue will be 0.\r\n\r\nIf the fee is partially billable (i.e. has source items, some of which are billable\r\nand some not), this value will contain the tax calculated from billable items only.\r\nIn all other cases, the value will be the same as Tax.",
            "format": "double",
            "example": 35
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True if the fee is deleted.",
            "example": false
          },
          "sourceItems": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeeSourceItem" },
            "description": "The source items on the fee.",
            "nullable": true
          },
          "createdFromActivityId": {
            "type": "string",
            "description": "Unique identifier of the Activity used to create the fee, if applicable.",
            "nullable": true,
            "example": "504b9f77-20c7-4dee-8227-d3007c8f6cea"
          }
        },
        "additionalProperties": false
      },
      "FeeDto": {
        "required": ["feeDate", "subject"],
        "type": "object",
        "properties": {
          "updatedByUserId": {
            "type": "string",
            "description": "Unique identifier of the user updating the fee.\r\n\r\nThis field is reserved for server-to-server operations.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member.\r\n\r\nWhen StaffId is not provided, the API will attempt to match your User Id to a Staff Id automatically.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the associated invoice.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "activityCode": {
            "type": "string",
            "description": "The activity code associated to the fee.",
            "nullable": true,
            "example": "PRT"
          },
          "feeType": {
            "allOf": [{ "$ref": "#/components/schemas/FeeType" }],
            "description": "The type of the fee (Fixed = 0, Time = 1).",
            "example": 0
          },
          "feeDate": {
            "type": "string",
            "description": "The date of the fee.",
            "format": "date-time",
            "example": "2022-07-01"
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the fee.",
            "example": "Review contract"
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description of the fee.",
            "nullable": true,
            "example": "Print documents"
          },
          "duration": {
            "type": "integer",
            "description": "The duration billed - in minutes. This duration is used if there are no sub activities.",
            "format": "int64",
            "example": 60
          },
          "durationWorked": {
            "type": "integer",
            "description": "The duration worked - in minutes. This duration is used if there are no sub activities.",
            "format": "int64",
            "nullable": true,
            "example": 50
          },
          "rate": {
            "type": "number",
            "description": "The rate of the fee in dollars.",
            "format": "double",
            "example": 350
          },
          "tax": {
            "type": "number",
            "description": "GST amount of the fee in dollars. Only applicable in AU.",
            "format": "double",
            "nullable": true,
            "example": 35
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "If true, the amount is GST inclusive, otherwise GST exclusive. Only applicable in AU.\r\n\r\nGST inclusive means: Amount exc. GST = Amount - GST, Amount inc. GST = Amount.\r\n\r\nGST exclusive means: Amount exc. GST = Amount, Amount inc. GST = Amount + GST.\r\n\r\n(Amount = Price * Quantity, GST = value of the Tax field)",
            "example": false
          },
          "finalized": {
            "type": "boolean",
            "description": "True if the fee has been finalized.",
            "example": false
          },
          "isWrittenOff": {
            "type": "boolean",
            "description": "True if the fee is written off. True only allowed if IsBillable is true.\r\n\r\nWritten off fee will show on an invoice with their amount, but will not be counted in the invoice total.",
            "example": false
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee is billable. Non-billable fee will, by default, not be shown on invoices (and, if shown, the amount will be 0).",
            "example": false
          },
          "isInvoicedExternally": {
            "type": "boolean",
            "description": "True if the fee is invoiced externally.",
            "example": false
          },
          "sourceItems": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeeSourceItemDto" },
            "description": "The source items on the fee.",
            "nullable": true
          },
          "createdFromActivityId": {
            "type": "string",
            "description": "Associates an existing activity id to a fee.\r\nOnly valid for Fee creation. \r\nValue is supplied by Smokeball for some partners.",
            "nullable": true,
            "example": "504b9f77-20c7-4dee-8227-d3007c8f6cea"
          }
        },
        "additionalProperties": false
      },
      "FeePagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Fee" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeSourceItem": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes.",
            "format": "int64"
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee source item is billable."
          }
        },
        "additionalProperties": false
      },
      "FeeSourceItemDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description.",
            "nullable": true,
            "example": "Print document"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes.",
            "format": "int64",
            "example": 5
          },
          "isBillable": {
            "type": "boolean",
            "description": "True if the fee source item is billable.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "FeeType": {
        "enum": [0, 1],
        "type": "integer",
        "description": "The type of the fee (Fixed = 0, Time = 1).",
        "format": "int32"
      },
      "CreateFirmDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The product the firm is subscribed to. Must be set when creating the firm and is optional when updating the firm.\r\n\r\nThe supported products are listed in order below, the identifier (listed in brackets) must be used.\r\n\r\nBill (SMK001)\r\n\r\nBoost (SMK004)\r\n\r\nGrow (SMK002)\r\n\r\nProsper + (SMK003)\r\n\r\nPossible values: SMK001, SMK004, SMK002, SMK003",
            "nullable": true,
            "example": "SMK001"
          },
          "addOnIds": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" },
            "description": "The optional add-ons the firm is subscribed to. Must be specified with an accompanying productId.\r\n\r\nThe supported add-ons are listed below, the identifier (listed in brackets) must be used.\r\n\r\nLeadPro (ADD001)\r\n\r\nMatterFlow (ADD002)\r\n\r\nAutoTime (ADD003)\r\n\r\nFamilyPro (ADD004)\r\n\r\nApi (ADD005)\r\n\r\nWorkflows (ADD006)\r\n\r\nPowerBI (ADD007)\r\n\r\nArchie (ADD008)\r\n\r\nPossible values: ADD01, ADD002, ADD003, ADD004, ADD005, ADD006, ADD007, ADD008",
            "nullable": true,
            "example": ["ADD01", "ADD002"]
          },
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "email": {
            "type": "string",
            "description": "The email of the firm.\r\n\r\nOnly supported in AUS.",
            "nullable": true,
            "example": "john.smith@law.com"
          },
          "abn": {
            "type": "string",
            "description": "For AU: Australian Business Number (ABN) of the firm.\r\n\r\nFor UK: Value-added Tax Number (VAT) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "acn": {
            "type": "string",
            "description": "For AU: Australian Company Number (ACN) of the firm.\r\n\r\nFor UK: Company Registration Number (CRN) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "streetAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAddressDto" }],
            "description": "Street address of the firm.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAddressDto" }],
            "description": "Mailing address of the firm.",
            "nullable": true
          },
          "dxAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmDxAddressDto" }],
            "description": "DX address of the firm.\r\n\r\nOnly supported in AUS.",
            "nullable": true
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Phone number of the firm.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Fax number of the firm.",
            "nullable": true
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether firm is being created for internal use. Internal firms will not be subscribed for payment processing and will not be charged.",
            "example": false
          },
          "staff": {
            "allOf": [{ "$ref": "#/components/schemas/StaffDto" }],
            "description": "The staff member that will be created with the firm. This staff member will become the firm owner.",
            "nullable": true
          },
          "subscription": {
            "allOf": [{ "$ref": "#/components/schemas/FirmSubscriptionDto" }],
            "description": "The subscription details that will be used when creating the firm.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Firm": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the firm.",
            "nullable": true,
            "example": "f4ff1eff-b7fe-4d46-4e46-01d985838d76"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "owner": {
            "type": "string",
            "description": "The owner/white-label partner used by the firm.\r\n\r\nPossible values: Smokeball, PracticeEvolve, TriConvey.",
            "nullable": true,
            "example": "Smokeball"
          },
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/FirmStatus" }],
            "description": "The status of the firm.",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "description": "The Product the firm is subscribed to.",
            "nullable": true,
            "example": "SMK001"
          },
          "addOnIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The AddOns the firm is subscribed to.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the firm.\r\n\r\nOnly supported in AUS.",
            "nullable": true,
            "example": "john.smith@law.com"
          },
          "abn": {
            "type": "string",
            "description": "For AU: Australian Business Number (ABN) of the firm.\r\n\r\nFor UK: Value-added Tax Number (VAT) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "acn": {
            "type": "string",
            "description": "For AU: Australian Company Number (ACN) of the firm.\r\n\r\nFor UK: Company Registration Number (CRN) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "streetAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAddress" }],
            "description": "Street address of the firm.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAddress" }],
            "description": "Mailing address of the firm.",
            "nullable": true
          },
          "dxAddress": {
            "allOf": [{ "$ref": "#/components/schemas/DxAddress" }],
            "description": "DX address of the firm.\r\n\r\nOnly supported in AUS.",
            "nullable": true
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Phone number of the firm.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Fax number of the firm.",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "description": "Logo of the firm.",
            "nullable": true,
            "example": "https://example-logo-url.com/image"
          },
          "stylingDetails": {
            "allOf": [{ "$ref": "#/components/schemas/StylingDetails" }],
            "description": "Styling details of the firm.",
            "nullable": true
          },
          "licenceNumbers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LicenceNumber" },
            "description": "Licence numbers of the firm.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FirmAccountStatus": {
        "enum": ["Active", "Warning", "Suspended"],
        "type": "string"
      },
      "FirmAddress": {
        "type": "object",
        "properties": {
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type (e.g. Unit,Flat,Villa,Suite,etc.) in address (if applicable).",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type (e.g. Street,Road,Avenue,Lane,etc.) in address.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "county": {
            "type": "string",
            "description": "County (if applicable)",
            "nullable": true,
            "example": "Berkshire"
          },
          "locality": {
            "type": "string",
            "description": "Locality (if applicable)",
            "nullable": true,
            "example": "Windsor"
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "readOnly": true,
            "example": ""
          },
          "poBoxType": {
            "type": "string",
            "description": "PO box type in address (if applicable).",
            "nullable": true,
            "readOnly": true,
            "example": ""
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO box Number in address (if applicable).",
            "nullable": true,
            "readOnly": true,
            "example": ""
          }
        },
        "additionalProperties": false
      },
      "FirmAddressDto": {
        "type": "object",
        "properties": {
          "buildingLevel": {
            "type": "string",
            "description": "Building level in address (if applicable).",
            "nullable": true,
            "example": "Level 1"
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number in address (if applicable).",
            "nullable": true,
            "example": "10"
          },
          "unitType": {
            "type": "string",
            "description": "Unit type (e.g. Unit,Flat,Villa,Suite,etc.) in address (if applicable).",
            "nullable": true,
            "example": "Suite"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number in address.",
            "nullable": true,
            "example": "100"
          },
          "streetName": {
            "type": "string",
            "description": "Street name in address.",
            "nullable": true,
            "example": "Broad"
          },
          "streetType": {
            "type": "string",
            "description": "Street type (e.g. Street,Road,Avenue,Lane,etc.) in address.",
            "nullable": true,
            "example": "Street"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of address.",
            "nullable": true,
            "example": "Level 1/10"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of address (if applicable).",
            "nullable": true,
            "example": "100 Broad Street"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true,
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region (if applicable).",
            "nullable": true,
            "example": "IL"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip or post code.",
            "nullable": true,
            "example": "60606"
          },
          "county": {
            "type": "string",
            "description": "County (if applicable).",
            "nullable": true,
            "example": ""
          },
          "locality": {
            "type": "string",
            "description": "Locality (if applicable).",
            "nullable": true,
            "example": ""
          },
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true,
            "example": "United States"
          },
          "careOf": {
            "type": "string",
            "description": "Care of the addressee (if applicable).",
            "nullable": true,
            "example": ""
          },
          "poBoxType": {
            "type": "string",
            "description": "PO box type in address (if applicable).",
            "nullable": true,
            "example": ""
          },
          "poBoxNumber": {
            "type": "string",
            "description": "PO box Number in address (if applicable).",
            "nullable": true,
            "example": ""
          }
        },
        "additionalProperties": false
      },
      "FirmDxAddressDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Direct Exchange number (if applicable).",
            "nullable": true,
            "example": "376"
          },
          "exchange": {
            "type": "string",
            "description": "Direct Exchange name.",
            "nullable": true,
            "example": "DX"
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true,
            "example": "NSW"
          }
        },
        "additionalProperties": false
      },
      "FirmStatus": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAccountStatus" }],
            "description": "The status of the firm.",
            "example": "Active"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the firm.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The status of the firm."
      },
      "FirmStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAccountStatus" }],
            "description": "The status of the firm account.",
            "example": "Active"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the firm. If left blank, an appropriate message is set depending on the status.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The status of the firm."
      },
      "FirmSubscriptionDto": {
        "type": "object",
        "properties": {
          "coupon": {
            "type": "string",
            "description": "The Coupon that will be used when the firm is subscribed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The subscription details for the firm."
      },
      "FirmUser": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the staff member.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "isFormerUser": {
            "type": "boolean",
            "description": "Returns true if this user is a former user.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "FirmUserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the associated user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member..",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          }
        },
        "additionalProperties": false
      },
      "LicenceNumber": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "State associated to the licence.",
            "nullable": true,
            "example": "IL"
          },
          "type": {
            "type": "string",
            "description": "Type of the licence.",
            "nullable": true,
            "example": ""
          },
          "number": {
            "type": "string",
            "description": "Licence number.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Staff": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the staff member.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "title": {
            "type": "string",
            "description": "Staff member's title.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Staff member's middle name (if applicable).",
            "nullable": true,
            "example": ""
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "initials": {
            "type": "string",
            "description": "Staff member's initials.",
            "nullable": true,
            "example": "JS"
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Staff member's phone details.",
            "nullable": true
          },
          "cell": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumber" }],
            "description": "Staff member's mobile details.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Staff member's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "role": {
            "type": "string",
            "description": "Staff member's role.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "avatar": {
            "type": "string",
            "description": "Staff member's avatar.",
            "nullable": true,
            "example": "https://example-avatar-url.com/image"
          },
          "former": {
            "type": "boolean",
            "description": "Whether he/she is a former member.",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether staff member is enabled.",
            "example": true
          },
          "userId": {
            "type": "string",
            "description": "Staff member's User Id, if enabled.",
            "nullable": true,
            "example": "14b5dd57-3681-420e-a483-4823424eef45"
          },
          "colorFill": {
            "type": "string",
            "description": "Staff member's fill color hex code.",
            "nullable": true,
            "example": "#797d85"
          },
          "colorStroke": {
            "type": "string",
            "description": "Staff member's stroke color hex code.",
            "nullable": true,
            "example": "#64666a"
          },
          "licenceNumbers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LicenceNumber" },
            "description": "Licence numbers of the staff member.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StaffDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the associated user. Used to map staff member to the specified user id and ignored if left blank.\r\nUse the FirmUsers API to remove a staff/user mapping.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "title": {
            "type": "string",
            "description": "Staff member's title.",
            "nullable": true,
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name.",
            "nullable": true,
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Staff member's middle name (if applicable).",
            "nullable": true,
            "example": ""
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "initials": {
            "type": "string",
            "description": "Staff member's initials.",
            "nullable": true,
            "example": "JS"
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Staff member's phone number.",
            "nullable": true
          },
          "cell": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Staff member's cell number.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Staff member's email address.",
            "nullable": true,
            "example": "john.smith@brown.com"
          },
          "role": {
            "type": "string",
            "description": "Staff member's role.",
            "nullable": true,
            "example": "Bookkeeper"
          },
          "avatar": {
            "type": "string",
            "description": "Staff member's avatar.",
            "nullable": true,
            "example": "https://example-avatar-url.com/image"
          },
          "former": {
            "type": "boolean",
            "description": "Whether he/she is a former member. \r\n\r\nCaution: Setting a staff member to former staff will also deregister them from the firm.",
            "nullable": true,
            "example": false
          },
          "colorFill": {
            "type": "string",
            "description": "Staff member's fill color hex code.",
            "nullable": true,
            "example": "#797d85"
          },
          "colorStroke": {
            "type": "string",
            "description": "Staff member's stroke color hex code.",
            "nullable": true,
            "example": "#64666a"
          }
        },
        "additionalProperties": false
      },
      "StaffPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Staff" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StylingDetails": {
        "type": "object",
        "properties": {
          "primaryColorHexCode": {
            "type": "string",
            "description": "Firm's primary color hex code.",
            "nullable": true,
            "example": "#FF000000"
          },
          "secondaryColorHexCode": {
            "type": "string",
            "description": "Firm's secondary color hex code.",
            "nullable": true,
            "example": "#FF000000"
          },
          "fontFamilyName": {
            "type": "string",
            "description": "Firm's font family name.",
            "nullable": true,
            "example": "Open Sans"
          }
        },
        "additionalProperties": false
      },
      "UpdateFirmDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The product the firm is subscribed to. Must be set when creating the firm and is optional when updating the firm.\r\n\r\nThe supported products are listed in order below, the identifier (listed in brackets) must be used.\r\n\r\nBill (SMK001)\r\n\r\nBoost (SMK004)\r\n\r\nGrow (SMK002)\r\n\r\nProsper + (SMK003)\r\n\r\nPossible values: SMK001, SMK004, SMK002, SMK003",
            "nullable": true,
            "example": "SMK001"
          },
          "addOnIds": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" },
            "description": "The optional add-ons the firm is subscribed to. Must be specified with an accompanying productId.\r\n\r\nThe supported add-ons are listed below, the identifier (listed in brackets) must be used.\r\n\r\nLeadPro (ADD001)\r\n\r\nMatterFlow (ADD002)\r\n\r\nAutoTime (ADD003)\r\n\r\nFamilyPro (ADD004)\r\n\r\nApi (ADD005)\r\n\r\nWorkflows (ADD006)\r\n\r\nPowerBI (ADD007)\r\n\r\nArchie (ADD008)\r\n\r\nPossible values: ADD01, ADD002, ADD003, ADD004, ADD005, ADD006, ADD007, ADD008",
            "nullable": true,
            "example": ["ADD01", "ADD002"]
          },
          "name": {
            "type": "string",
            "description": "The name of the firm.",
            "nullable": true,
            "example": "Brown LLC"
          },
          "email": {
            "type": "string",
            "description": "The email of the firm.\r\n\r\nOnly supported in AUS.",
            "nullable": true,
            "example": "john.smith@law.com"
          },
          "abn": {
            "type": "string",
            "description": "For AU: Australian Business Number (ABN) of the firm.\r\n\r\nFor UK: Value-added Tax Number (VAT) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "acn": {
            "type": "string",
            "description": "For AU: Australian Company Number (ACN) of the firm.\r\n\r\nFor UK: Company Registration Number (CRN) of the firm.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "1234567890"
          },
          "streetAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAddressDto" }],
            "description": "Street address of the firm.",
            "nullable": true
          },
          "mailingAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmAddressDto" }],
            "description": "Mailing address of the firm.",
            "nullable": true
          },
          "dxAddress": {
            "allOf": [{ "$ref": "#/components/schemas/FirmDxAddressDto" }],
            "description": "DX address of the firm.\r\n\r\nOnly supported in AUS.",
            "nullable": true
          },
          "phone": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Phone number of the firm.",
            "nullable": true
          },
          "fax": {
            "allOf": [{ "$ref": "#/components/schemas/PhoneNumberDto" }],
            "description": "Fax number of the firm.",
            "nullable": true
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/FirmStatusDto" }],
            "description": "The status of the firm.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationPolicyType": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "s\r\n            Name of the group.",
            "nullable": true,
            "example": "Administrators"
          },
          "principalIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Principals that are members of the group. This can be either user ids or other group ids.",
            "nullable": true,
            "example": [
              "2595a645-94a2-46be-a60d-8410851a9671",
              "2595a645-94a2-46be-a60d-8410851a9671"
            ]
          }
        },
        "additionalProperties": false
      },
      "Group": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the group.",
            "nullable": true,
            "example": "ed028979-5b64-4f63-82ef-2deef728d852"
          },
          "name": {
            "type": "string",
            "description": "Name of the group.",
            "nullable": true,
            "example": "Administrators"
          },
          "principalIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Principals that are members of the group. This can be either user ids or other group ids.",
            "nullable": true,
            "example": [
              "2595a645-94a2-46be-a60d-8410851a9671",
              "2595a645-94a2-46be-a60d-8410851a9671"
            ]
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the group is deleted.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "GroupPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Group" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Policy": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique id of the policy.",
            "nullable": true,
            "example": "eb40ac02-383c-49bd-b956-c02cba814215"
          },
          "reference": {
            "type": "string",
            "description": "Unique reference of the policy.",
            "nullable": true,
            "example": "31a9caa9-4db7-4a0e-8233-d51254975099"
          },
          "principalId": {
            "type": "string",
            "description": "Principal id associated to this policy if it is a principal based policy. This can be either a user id or a group id.\r\n\r\nThis is null if the policy is a resource based policy.",
            "nullable": true,
            "example": "a7922e80-f833-48f0-8250-c00df1ebbc16"
          },
          "resourceId": {
            "type": "string",
            "description": "Resource id associated to this policy if it is a resource based policy.\r\n\r\nThis is null if the policy is a principal based policy.",
            "nullable": true,
            "example": "54171794-5ca3-472b-889a-c03538d8c89a"
          },
          "rules": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Rule" },
            "description": "The rules associated to this policy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyDto": {
        "type": "object",
        "properties": {
          "principalId": {
            "type": "string",
            "description": "Principal id associated to this policy if it is a principal based policy. This can be either a user id or a group id.\r\n\r\nThis is null if the policy is a resource based policy.",
            "nullable": true,
            "example": "a7922e80-f833-48f0-8250-c00df1ebbc16"
          },
          "resourceId": {
            "type": "string",
            "description": "Resource id associated to this policy if it is a resource based policy.\r\n\r\nThis is null if the policy is a principal based policy.",
            "nullable": true,
            "example": "matters/54171794-5ca3-472b-889a-c03538d8c89a"
          },
          "rules": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/RuleDto" },
            "description": "The rules associated to this policy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Rule": {
        "type": "object",
        "properties": {
          "principalId": {
            "type": "string",
            "description": "Principal id associated to this rule if the rule is associated to a resource based policy. This can be either a user id or a group id.\r\n\r\nThis is null if the policy is a principal based policy.",
            "nullable": true,
            "example": "a7922e80-f833-48f0-8250-c00df1ebbc16"
          },
          "resourceId": {
            "type": "string",
            "description": "Resource id associated to this rule if it is a principal based policy. \r\n\r\nFor matter based policies, use `matters/{matterId}` for a single matter or `matters` for all matters.\r\n\r\nThis is null if the associated policy is a resource based policy.",
            "nullable": true,
            "example": "matters/69406c65-309d-4e35-a636-ad145e64770a"
          },
          "operation": {
            "type": "string",
            "description": "The operation associated to this rule.\r\n\r\nPossible values: 'Access','Execute'.",
            "example": "Access"
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/AuthorizationPolicyType" }
            ],
            "description": "The type of the rule.\r\n            \r\nPossible values: 'Deny','Allow'."
          }
        },
        "additionalProperties": false
      },
      "RuleDto": {
        "type": "object",
        "properties": {
          "principalId": {
            "type": "string",
            "description": "Principal id associated to this rule if the rule is associated to a resource based policy. This can be either a user id or a group id.\r\n\r\nThis is null if the policy is a principal based policy.",
            "nullable": true,
            "example": "a7922e80-f833-48f0-8250-c00df1ebbc16"
          },
          "resourceId": {
            "type": "string",
            "description": "Resource id associated to this rule if it is a principal based policy. \r\n\r\nFor matter based policies, use `matters/{matterId}` for a single matter or `matters` for all matters.\r\n\r\nThis is null if the associated policy is a resource based policy.",
            "nullable": true,
            "example": "matters/69406c65-309d-4e35-a636-ad145e64770a"
          },
          "operation": {
            "type": "string",
            "description": "The operation associated to this rule.\r\n\r\nPossible values: 'Access','Execute'.",
            "example": "Access"
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/AuthorizationPolicyType" }
            ],
            "description": "The type of the rule.\r\n            \r\nPossible values: 'Deny','Allow'."
          }
        },
        "additionalProperties": false
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "principalIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Principals that are members of the group. This can be either user ids or other group ids.",
            "nullable": true,
            "example": [
              "2595a645-94a2-46be-a60d-8410851a9671",
              "2595a645-94a2-46be-a60d-8410851a9671"
            ]
          }
        },
        "additionalProperties": false
      },
      "Debtor": {
        "type": "object",
        "properties": {
          "contact": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the associated contact.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Discount": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "description": "The type of discount (Fixed = 0, Percentage = 1).",
            "example": 0
          },
          "fixedDiscount": {
            "type": "number",
            "description": "The amount of fixed discount applied.",
            "format": "double",
            "example": 100
          },
          "percentage": {
            "type": "number",
            "description": "The amount of percentage discount applied.",
            "format": "double",
            "example": 0
          },
          "description": {
            "type": "string",
            "description": "Discount description.",
            "nullable": true,
            "example": "Friend of the Firm"
          }
        },
        "additionalProperties": false
      },
      "DiscountType": { "enum": [0, 1], "type": "integer", "format": "int32" },
      "Invoice": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the invoice.",
            "nullable": true,
            "example": "16567e88-784c-470e-8952-e5a70fe2eb0c"
          },
          "versionId": {
            "type": "string",
            "description": "The unique identifier of the invoice version.",
            "nullable": true,
            "example": "39ffde97-eeeb-4747-bb8f-7c7c10b3c985"
          },
          "matter": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The matter associated to the invoice.",
            "nullable": true
          },
          "matterId": {
            "type": "string",
            "description": "The unique identifier of the matter that the invoice belongs to.",
            "nullable": true,
            "example": "6398a045-509e-49a2-9268-bb8231fa9340"
          },
          "lastUpdatedByUserId": {
            "type": "string",
            "description": "The unique identifier of the user that last updated the invoice.",
            "nullable": true,
            "example": "5fc5ee85-6643-4623-b019-a0dccceafe47"
          },
          "description": {
            "type": "string",
            "description": "The invoice description.",
            "nullable": true,
            "example": "Services provided."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatus" }],
            "description": "The status of the invoice.\r\n\r\nPossible values: Draft = 0, Final = 1, Paid = 2, Deleted = 3 or Void = 4.",
            "example": 0
          },
          "invoiceNumber": {
            "type": "integer",
            "description": "The invoice number.",
            "format": "int64",
            "nullable": true,
            "example": 10001
          },
          "invoiceTitle": {
            "type": "string",
            "description": "The invoice title.",
            "nullable": true,
            "example": "My First Invoice"
          },
          "invoiceTitleLine2": {
            "type": "string",
            "description": "The invoice title.",
            "nullable": true,
            "example": "Subtitle"
          },
          "issuedDate": {
            "type": "string",
            "description": "The date the invoice has been issued.",
            "format": "date-time",
            "example": "2022-09-16T00:00:00+00:00"
          },
          "dueDate": {
            "type": "string",
            "description": "The date the invoice is due.",
            "format": "date-time",
            "example": "2022-09-25T00:00:00+00:00"
          },
          "paidDate": {
            "type": "string",
            "description": "The date the invoice was paid. This date is only available if the invoice is fully paid.",
            "format": "date-time",
            "example": "2022-09-20T00:00:00+00:00"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount settings for the invoice. See InvoiceTotals.Discount if you need the \r\nactual discount amount applied to the invoice.",
            "nullable": true
          },
          "debtors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Debtor" },
            "description": "The debtors for the invoice.",
            "nullable": true
          },
          "entries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoicedMatterEntryItem" },
            "description": "The entries on the invoice.",
            "nullable": true
          },
          "waived": {
            "type": "boolean",
            "description": "True if the invoice is waived.",
            "example": false
          },
          "invoiceTotals": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceTotals" }],
            "description": "The invoice totals.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoicedMatterEntryItem": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "versionId": { "type": "string", "nullable": true },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/EntryType" }],
            "description": "Type of the activity.\r\n\r\nPossible values: Fixed = '0', Time = '1', Expense = '2'"
          }
        },
        "additionalProperties": false
      },
      "InvoiceFileInfo": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "description": "Unique identifier of the requested invoice",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "versionId": {
            "type": "string",
            "description": "Unique identifier of the invoice version",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Link to download file",
            "nullable": true,
            "example": ""
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date/time when the download link is no longer accessible",
            "format": "date-time",
            "example": "2022-04-23T14:30:00Z"
          },
          "status": {
            "type": "string",
            "description": "Current status of the invoice",
            "nullable": true,
            "example": "Draft"
          }
        },
        "additionalProperties": false
      },
      "InvoicePagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Invoice" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceStatus": {
        "enum": [0, 1, 2, 3, 4],
        "type": "integer",
        "description": "The status of the invoice.\r\n\r\nPossible values: Draft = 0, Final = 1, Paid = 2, Deleted = 3 or Void = 4.",
        "format": "int32"
      },
      "InvoiceTotals": {
        "type": "object",
        "properties": {
          "paid": {
            "type": "number",
            "description": "Total amount paid on the invoice.",
            "format": "double",
            "example": 100
          },
          "billed": {
            "type": "number",
            "description": "Amount billed. This is the sum of all fees and expenses on the invoice, without tax.",
            "format": "double",
            "example": 200
          },
          "unpaid": {
            "type": "number",
            "description": "Amount unpaid.",
            "format": "double",
            "example": 100
          },
          "writtenOff": {
            "type": "number",
            "description": "Amount written off.",
            "format": "double",
            "example": 0
          },
          "waived": {
            "type": "number",
            "description": "Amount waived.",
            "format": "double",
            "example": 0
          },
          "discount": {
            "type": "number",
            "description": "Amount of discount.",
            "format": "double",
            "example": 0
          },
          "total": {
            "type": "number",
            "description": "Total amount for invoice, including tax and interest.",
            "format": "double",
            "example": 100
          },
          "tax": {
            "type": "number",
            "description": "Amount of Tax on the invoice.",
            "format": "double",
            "example": 10
          },
          "interest": {
            "type": "number",
            "description": "Amount of interest. This is the total interest amount, not taking into account\r\nwhat has been paid.",
            "format": "double",
            "readOnly": true,
            "example": 0
          },
          "unpaidExcInterest": {
            "type": "number",
            "description": "Amount unpaid excluding interest. For invoices in interest, if this amount is zero,\r\nit means that the principal has been fully paid, though there might still be unpaid interest.",
            "format": "double",
            "example": 100
          },
          "feeTotal": {
            "type": "number",
            "description": "All fees (written off + non written off).",
            "format": "double",
            "example": 250
          },
          "writtenOffFeeTotal": {
            "type": "number",
            "description": "Written off fees.",
            "format": "double",
            "example": 120
          },
          "expenseTotal": {
            "type": "number",
            "description": "All expenses (written off + non written off).",
            "format": "double",
            "example": 300
          },
          "writtenOffExpenseTotal": {
            "type": "number",
            "description": "Written off expenses total.",
            "format": "double",
            "example": 180
          }
        },
        "additionalProperties": false
      },
      "MatterItem": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the item on a matter.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the item.",
            "nullable": true,
            "example": "Client"
          },
          "index": {
            "type": "integer",
            "description": "Zero based number of this item in the list.",
            "format": "int32",
            "example": 0
          },
          "visible": {
            "type": "boolean",
            "description": "Boolean flag indicating if the item is visible.",
            "example": false
          },
          "subItems": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatterItem" },
            "description": "List of child items associated with the item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterItems": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatterItem" },
            "description": "List of items on a matter.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutContact": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "Unique key name for the layout contact.",
            "nullable": true,
            "example": ""
          },
          "contact": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the layout contact.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutContactData": {
        "required": ["contactId", "key"],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Name (mapping) of the layout field that contains ContactId."
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier for the layout contact.",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "LayoutDesign": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the layout design.",
            "nullable": true,
            "example": "763c3857-2ed9-4c5d-bee0-c48d48a7543e"
          },
          "name": {
            "type": "string",
            "description": "Name of the layout design.",
            "nullable": true,
            "example": "Case Details"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          },
          "description": {
            "type": "string",
            "description": "Brief description of the layout design.",
            "nullable": true,
            "example": "Property and title details"
          },
          "fields": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutDesignField" },
            "description": "Collection of layout design fields.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutDesignField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name (mapping) of the layout design field.",
            "nullable": true,
            "example": "PinAndLotSizes[]/AccountNumber"
          },
          "type": {
            "type": "string",
            "description": "Type of the layout design field.\r\n            \r\nPossible values: 'Text','Combobox','Checkbox','DateTime','Role','Number'.\r\n            \r\n'Role' type can represent a matter role (for a top-level layout item) or a matter relationship (for a sublayout item).",
            "example": "Combobox"
          },
          "possibleValues": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of possible values (e.g. for Combobox field).",
            "nullable": true,
            "example": ["Residence", "Commercial", "Factory", "Office"]
          }
        },
        "additionalProperties": false
      },
      "LayoutDesignInfo": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the layout design.",
            "nullable": true,
            "example": "763c3857-2ed9-4c5d-bee0-c48d48a7543e"
          },
          "name": {
            "type": "string",
            "description": "Name of the layout design.",
            "nullable": true,
            "example": "Case Details"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false
      },
      "LayoutDesignInfoPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutDesignInfo" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "appointmentId": { "type": "string", "nullable": true }
        },
        "additionalProperties": false
      },
      "LayoutMatter": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Layout matter id.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutMatterItem" },
            "description": "Layout matter item data.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutMatterItem": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the layout item.",
            "nullable": true,
            "example": "Item"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the layout item.",
            "nullable": true,
            "example": "Text describing item"
          },
          "itemId": {
            "type": "string",
            "description": "Unique identifier for the layout item.",
            "format": "uuid",
            "example": "59791902-6280-471b-bd18-f8439ba3042f"
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier for the parent layout design.",
            "nullable": true,
            "example": "Client"
          },
          "index": {
            "type": "integer",
            "description": "Zero-based index of the layout item.",
            "format": "int32",
            "example": 0
          },
          "layoutDesign": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the layout design.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutValue" },
            "description": "List of layout values.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutEvent" },
            "description": "List of layout events.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutMatterItemData": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "Unique identifier for the matter list item.",
            "nullable": true,
            "example": "59791902-6280-471b-bd18-f8439ba3042f"
          },
          "layoutDesignId": {
            "type": "string",
            "description": "Identifier of the layout design.",
            "nullable": true,
            "example": "414ab774-adce-4659-b18c-82d1b0e826a0"
          },
          "index": {
            "type": "integer",
            "description": "Zero-based index of the layout item.",
            "format": "int32",
            "example": 0
          },
          "parentItemId": {
            "type": "string",
            "description": "Unique identifier for the parent matter list item.",
            "nullable": true,
            "example": "59791902-6280-471b-bd18-f8439ba3042f"
          },
          "parentId": {
            "type": "string",
            "description": "Identifier of the parent matter list item specific to the provider.",
            "nullable": true,
            "example": "Client"
          },
          "parentIndex": {
            "type": "integer",
            "description": "Zero-based index of the parent matter list item.",
            "format": "int32",
            "example": 0
          },
          "name": {
            "type": "string",
            "description": "Name of the layout item.",
            "nullable": true,
            "example": "Item"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the layout item.",
            "nullable": true,
            "example": "Text describing item"
          },
          "values": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutValue" },
            "description": "List of layout values.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutEvent" },
            "description": "List of layout events.",
            "nullable": true
          },
          "isRemoved": {
            "type": "boolean",
            "description": "Boolean flag indicating if the layout item is to be removed.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "LayoutMatterItemDataCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LayoutMatterItem" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LayoutValue": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "nullable": true },
          "value": { "type": "string", "nullable": true },
          "state": {
            "description": "Gets or sets the object that contains supplemental data about the key/value pair.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IMatterItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the matter item.",
            "nullable": true,
            "readOnly": true,
            "example": "role or layout"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter item.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the matter item as it appears on the matter.",
            "nullable": true,
            "example": "Vendor"
          },
          "subItems": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/IMatterItem" }
            },
            "description": "Subitems associated to the matter item. These items vary depending on the matter.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Matter": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the matter.",
            "nullable": true,
            "example": "EXT01"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record. This can be used in the UpdatedSince query parameter.",
            "nullable": true,
            "example": "637771038395217729"
          },
          "number": {
            "type": "string",
            "description": "Human-friendly number assigned to matter.",
            "nullable": true,
            "example": "FUS-124"
          },
          "title": {
            "type": "string",
            "description": "Title of the matter.",
            "nullable": true,
            "example": "AM-0323-0005 - Smith - Sale - Jones"
          },
          "matterType": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the associated matter type.",
            "nullable": true
          },
          "clients": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "List of hypermedia links of 'Client' contacts associated with the matter.",
            "nullable": true
          },
          "otherSides": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "List of hypermedia links of 'OtherSide' contacts associated with the matter.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Brief description of the matter.",
            "nullable": true,
            "example": "This is a brief description for the matter"
          },
          "status": {
            "type": "string",
            "description": "Current status of the matter.\r\n\r\nPossible values: Open, Pending, Closed, Deleted or Cancelled.",
            "nullable": true,
            "example": "Open"
          },
          "personResponsible": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the person responsible for the matter (if applicable).",
            "nullable": true
          },
          "personAssisting": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the person assisting in the matter (if applicable).",
            "nullable": true
          },
          "originatingStaff": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the originating attorney (if in US) or introducer (if in AU) of the matter.",
            "nullable": true
          },
          "supervisor": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the supervisor of the matter.\r\n\r\nOnly supported in the UK.",
            "nullable": true
          },
          "clientCode": {
            "type": "string",
            "description": "Associates an external client code to this matter.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "Client A"
          },
          "openedDate": {
            "type": "string",
            "description": "Date the matter was opened.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "closedDate": {
            "type": "string",
            "description": "Date the matter was closed.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadOpenedDate": {
            "type": "string",
            "description": "Date the lead was opened.\r\n\r\nOnly applies if isLead is true.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadClosedDate": {
            "type": "string",
            "description": "Date the lead was closed.\r\n\r\nOnly applies if isLead is true.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadClosedReason": {
            "type": "string",
            "description": "Reason the lead was closed.\r\n\r\nOnly applies if isLead is true.",
            "nullable": true,
            "example": "No longer interested"
          },
          "isLead": {
            "type": "boolean",
            "description": "Boolean flag indicating if the matter is a lead.",
            "example": false
          },
          "branch": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the associated branch.",
            "nullable": true
          },
          "branchProviderId": {
            "type": "string",
            "description": "Unique identifier of the associated branch provider.",
            "nullable": true,
            "example": "Smokeball"
          },
          "referralType": {
            "type": "string",
            "description": "The referal type of the matter.",
            "nullable": true
          },
          "referrer": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The referrer contact of the matter.",
            "nullable": true
          },
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/IMatterItem" }
            },
            "description": "Items associated with the matter.\r\n            \r\nNote: This field is only available when using the v2.0 endpoint. See Matters documentation for further details.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterDto": {
        "type": "object",
        "properties": {
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the matter.",
            "nullable": true,
            "example": "EXT01"
          },
          "number": {
            "type": "string",
            "description": "Human-friendly number assigned to matter.",
            "nullable": true,
            "example": "FUS-124"
          },
          "matterTypeId": {
            "type": "string",
            "description": "Unique identifier of the matter type associated with the matter.\r\n            \r\nMatter types define what information can be saved to the matter, relevant to that area of law and state / location.\r\n            \r\nA pre-configured list of matter types can be obtained via the 'GET /mattertypes' API.\r\n            \r\n'Lead' matter types are different from the standard matter types used when creating a 'Matter'.\r\n            \r\nUse the 'Type' query parameter in the 'GET /mattertypes' API call to get 'Lead' specific matter types.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "clientIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of 'Client' contact id's associated with the matter.",
            "nullable": true,
            "example": ["832e778f-83df-454a-b344-768a862a7e67"]
          },
          "otherSideIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of 'OtherSide' contact id's associated with the matter.",
            "nullable": true,
            "example": ["776e778f-83df-454a-b344-768a862a6e58"]
          },
          "branchId": {
            "type": "string",
            "description": "Unique identifier of the associated branch.",
            "nullable": true,
            "example": "dd4e4381-b6a0-4c64-8feb-e8ea8016ea42"
          },
          "branchProviderId": {
            "type": "string",
            "description": "Unique identifier of the associated branch provider.",
            "nullable": true,
            "example": "Smokeball"
          },
          "clientRole": {
            "type": "string",
            "description": "'Client' matter type representative option for the matter.\r\n\r\nIf unsure, this can be left empty and the default Client role will be used.",
            "nullable": true,
            "example": "Buyer"
          },
          "otherSideRole": {
            "type": "string",
            "description": "'OtherSide' matter type representative option for the matter.\r\n\r\nIf unsure, this can be left empty and the default OtherSide role will be used.",
            "nullable": true,
            "example": "Seller"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the matter.",
            "nullable": true,
            "example": "This is a brief description for the matter"
          },
          "status": {
            "type": "string",
            "description": "Current status of matter.\r\n\r\nPossible values: Open, Pending, Closed, Deleted or Cancelled.",
            "nullable": true,
            "example": "Open"
          },
          "openedDate": {
            "type": "string",
            "description": "Date the matter was opened. This can be backdated if required.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "closedDate": {
            "type": "string",
            "description": "Date the matter was closed. This can be backdated if required.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadOpenedDate": {
            "type": "string",
            "description": "Date the lead was opened. This can be backdated if required.\r\n\r\nOnly applies if isLead is true.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadClosedDate": {
            "type": "string",
            "description": "Date the lead was closed. This can be backdated if required.\r\n\r\nOnly applies if isLead is true.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadClosedReason": {
            "type": "string",
            "description": "Reason the lead was closed.\r\n\r\nOnly applies if isLead is true.",
            "nullable": true,
            "example": "No longer interested"
          },
          "referralType": {
            "type": "string",
            "description": "Referral Type of the matter.\r\n\r\nCustom Referral Types are also supported, the name or id of the Custom Referral Type can be used. If the name is used, it is looked up and stored as the id.\r\n\r\nSee the Referral Types API for retrieval of all valid Referral Types.\r\n\r\nPossible values may also differ per region.",
            "nullable": true,
            "example": "Google"
          },
          "referrerId": {
            "type": "string",
            "description": "Contact id of the person that referred the matter.",
            "nullable": true,
            "example": "97bbe49f-6460-4bfc-b287-34ddfdbb81ef"
          },
          "personResponsibleStaffId": {
            "type": "string",
            "description": "Staff id of the person responsible for the matter (if applicable).",
            "format": "string",
            "nullable": true
          },
          "personAssistingStaffId": {
            "type": "string",
            "description": "Staff id of the person assisting in the matter (if applicable).",
            "format": "string",
            "nullable": true
          },
          "originatingStaffId": {
            "type": "string",
            "description": "Staff id of the originating attorney (if in US) or an Introducer (if in AU)",
            "format": "string",
            "nullable": true
          },
          "supervisorStaffId": {
            "type": "string",
            "description": "Staff id of the supervisor of the matter.\r\n\r\nOnly supported in the UK.",
            "format": "string",
            "nullable": true
          },
          "clientCode": {
            "type": "string",
            "description": "Associates an external client code to this matter.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "Client A"
          },
          "isLead": {
            "type": "boolean",
            "description": "Optional boolean flag indicating if a 'Lead' is being created. This must be set to 'true' when creating a 'Lead'.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "MatterDto2": {
        "type": "object",
        "properties": {
          "externalSystemId": {
            "type": "string",
            "description": "External system id for the matter.",
            "nullable": true,
            "example": "EXT01"
          },
          "number": {
            "type": "string",
            "description": "Human-friendly number assigned to matter.",
            "nullable": true,
            "example": "FUS-124"
          },
          "matterTypeId": {
            "type": "string",
            "description": "Unique identifier of the matter type associated with the matter.\r\n            \r\nMatter types define what information can be saved to the matter, relevant to that area of law and state / location.\r\n            \r\nA pre-configured list of matter types can be obtained via the 'GET /mattertypes' API.\r\n            \r\n'Lead' matter types are different from the standard matter types used when creating a 'Matter'.\r\n            \r\nUse the 'Type' query parameter in the 'GET /mattertypes' API call to get 'Lead' specific matter types.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the matter.",
            "nullable": true,
            "example": "This is a brief description for the matter"
          },
          "status": {
            "type": "string",
            "description": "Current status of matter.\r\n\r\nPossible values: Open, Pending, Closed, Deleted or Cancelled.",
            "nullable": true,
            "example": "Open"
          },
          "dateOpened": {
            "type": "string",
            "description": "Date when the matter was opened. This can be backdated if required.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "openedDate": {
            "type": "string",
            "description": "Date the matter was opened. This can be backdated if required.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "closedDate": {
            "type": "string",
            "description": "Date the matter was closed. This can be backdated if required.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadOpenedDate": {
            "type": "string",
            "description": "Date the lead was opened. This can be backdated if required.\r\n\r\nOnly applies if isLead is true.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadClosedDate": {
            "type": "string",
            "description": "Date the lead was closed. This can be backdated if required.\r\n\r\nOnly applies if isLead is true.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-23T14:00:00Z"
          },
          "leadClosedReason": {
            "type": "string",
            "description": "Reason the lead was closed.\r\n\r\nOnly applies if isLead is true.",
            "nullable": true,
            "example": "No longer interested"
          },
          "referralType": {
            "type": "string",
            "description": "Referral Type of the matter.\r\n\r\nPossible values are different per region.",
            "nullable": true,
            "example": "Google"
          },
          "referrerId": {
            "type": "string",
            "description": "Contact id of the person that referred the matter.",
            "nullable": true,
            "example": "97bbe49f-6460-4bfc-b287-34ddfdbb81ef"
          },
          "personResponsibleStaffId": {
            "type": "string",
            "description": "Staff id of the person responsible for the matter (if applicable).",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "personAssistingStaffId": {
            "type": "string",
            "description": "Staff id of the person assisting in the matter (if applicable).",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "originatingStaffId": {
            "type": "string",
            "description": "Staff id of the originating attorney (if in US) or an Introducer (if in AU)",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "supervisorStaffId": {
            "type": "string",
            "description": "Staff id of the supervisor of the matter.\r\n\r\nOnly supported in the UK.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "clientCode": {
            "type": "string",
            "description": "Associates an external client code to this matter.\r\n\r\nOnly supported in AU and UK.",
            "nullable": true,
            "example": "Client A"
          },
          "branchId": {
            "type": "string",
            "description": "Unique identifier of the associated branch.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "branchProviderId": {
            "type": "string",
            "description": "Unique identifier of the associated branch provider.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "clientRole": {
            "type": "string",
            "description": "'Client' matter type representative option for the matter.\r\n\r\nRequired and only supported when converting a 'Lead' to 'Matter'.",
            "nullable": true,
            "example": "Buyer"
          },
          "isLead": {
            "type": "boolean",
            "description": "Optional boolean flag indicating if matter is a 'Lead'.\r\n            \r\nThis must be set to 'false' when converting a 'Lead' to 'Matter'.",
            "example": false
          },
          "clientIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of unique identifiers of 'Client' contacts associated with the matter.",
            "nullable": true
          },
          "otherSideIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of unique identifiers of 'OtherSide' contacts associated with the matter.",
            "nullable": true
          },
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/MatterItemDto" }
            },
            "description": "Items associated with the matter.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterItemContactDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          }
        },
        "additionalProperties": false
      },
      "MatterItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter item.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the associated contact.\r\n\r\nOnly applicable for 'role' matter items.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "contact": {
            "allOf": [{ "$ref": "#/components/schemas/MatterItemContactDto" }],
            "description": "Associated contact.\r\n\r\nOnly applicable for 'role' matter items.",
            "nullable": true
          },
          "subItems": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/MatterItemDto" }
            },
            "description": "SubItems associated with the matter item.\r\n\r\nNot applicable for matter sub items.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Matter" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterRelationships": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "relationships": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Relationship" },
            "description": "List of associated relationships.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterRoles": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "matterId": {
            "type": "string",
            "description": "Matter id.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "description": "List of associated roles.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferralType": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the referral type.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the referral type.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Flag indicating whether the referral type has been deleted."
          }
        },
        "additionalProperties": false
      },
      "ReferralTypeCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReferralType" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the relationship.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the relationship.",
            "nullable": true,
            "example": "Solicitor"
          },
          "contact": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the associated contact.",
            "nullable": true
          },
          "representatives": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "List of hypermedia links of the associated representatives.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationshipDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the relationship.",
            "nullable": true,
            "example": "Provider"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name of the relationship.",
            "nullable": true,
            "example": "Medical Provider"
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "representativeIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of associated representative contact ids.",
            "nullable": true,
            "example": ["776e778f-83df-454a-b344-768a862a7e67"]
          },
          "isMatterItemRequired": {
            "type": "boolean",
            "description": "Boolean flag indicating if a matter item is required."
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the role.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the role.",
            "nullable": true,
            "example": "Client"
          },
          "contact": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Hypermedia link of the associated contact.",
            "nullable": true
          },
          "representatives": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "List of hypermedia links of the associated representatives.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Relationship" },
            "description": "List of associated relationships.",
            "nullable": true
          },
          "isClient": {
            "type": "boolean",
            "description": "Boolean flag indicating if role belongs to a 'Client'.",
            "example": false
          },
          "isOtherSide": {
            "type": "boolean",
            "description": "Boolean flag indicating if role belongs to an 'OtherSide'.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the role.",
            "nullable": true,
            "example": "Provider"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name of the role.",
            "nullable": true,
            "example": "Medical Provider"
          },
          "description": {
            "type": "string",
            "description": "Description of the role.",
            "nullable": true,
            "example": "Client"
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact.",
            "nullable": true,
            "example": "c85d28cb-a760-4627-aa59-0a853c2e65ed"
          },
          "representativeIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of associated representative contact ids.",
            "nullable": true,
            "example": ["776e778f-83df-454a-b344-768a862a7e67"]
          },
          "isMatterItemRequired": {
            "type": "boolean",
            "description": "Boolean flag indicating if matter item is required."
          },
          "relationships": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/RelationshipDto" },
            "description": "List if relationships associated with the role.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterListItem": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique provider-specific identifier of the item.",
            "nullable": true,
            "example": "Plaintiff"
          },
          "providerId": {
            "type": "string",
            "description": "Provider name of the item.",
            "nullable": true,
            "example": "roles_provider"
          },
          "itemId": {
            "type": "string",
            "description": "Unique identifier of the item.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "name": {
            "type": "string",
            "description": "Name of the item.",
            "nullable": true,
            "example": "Claimant"
          },
          "subItems": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatterListItem" },
            "description": "List of sub items belonging to the item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterType": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter type.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "name": {
            "type": "string",
            "description": "Name of the matter type.",
            "nullable": true,
            "example": "Federal Litigation"
          },
          "category": {
            "type": "string",
            "description": "Name of the category to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TypeCategory" }],
            "description": "Name of the category type to which the matter type belongs (i.e. MatterType or LeadType).\r\n            \r\nPossible values: Matter Type = 0, Lead Type = 1.",
            "example": 0
          },
          "representativeOptions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of possible representative types for the matter type.",
            "nullable": true,
            "example": ["Applicant", "Respondent"]
          },
          "location": {
            "type": "string",
            "description": "State to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatterListItem" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterTypeInfo": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the matter type.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "832e778f-83df-454a-b344-768a862a7e67"
          },
          "name": {
            "type": "string",
            "description": "Name of the matter type.",
            "nullable": true,
            "example": "Federal Litigation"
          },
          "category": {
            "type": "string",
            "description": "Name of the category to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TypeCategory" }],
            "description": "Name of the category type to which the matter type belongs (i.e. MatterType or LeadType).\r\n            \r\nPossible values: Matter Type = 0, Lead Type = 1.",
            "example": 0
          },
          "representativeOptions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of possible representative types for the matter type.",
            "nullable": true,
            "example": ["Applicant", "Respondent"]
          },
          "location": {
            "type": "string",
            "description": "State to which the matter type belongs.",
            "nullable": true,
            "example": "Litigation"
          }
        },
        "additionalProperties": false
      },
      "MatterTypeInfoPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatterTypeInfo" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "type": "string" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TypeCategory": {
        "enum": [0, 1],
        "type": "integer",
        "description": "Name of the category type to which the matter type belongs (i.e. MatterType or LeadType).\r\n            \r\nPossible values: Matter Type = 0, Lead Type = 1.",
        "format": "int32"
      },
      "Memo": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the memo.",
            "nullable": true,
            "example": "009f778f-83df-454a-b344-768a862a7e55"
          },
          "matterId": {
            "type": "string",
            "description": "The unique identifier of the matter.",
            "nullable": true,
            "example": "776e778f-83df-454a-b344-768a862a6e58"
          },
          "title": {
            "type": "string",
            "description": "The title of the memo.",
            "nullable": true,
            "example": "Update"
          },
          "text": {
            "type": "string",
            "description": "The text (content) of the memo.\r\n            \r\nIn RTF (Rich Text Format).",
            "nullable": true,
            "example": "{\\rtf1\\ansi\\ansicpg1252\\uc1\\htmautsp\\deff2{\\fonttbl{\\f0\\fcharset0 Times New Roman;}{\\f2\\fcharset0 Calibri;}}{\\colortbl\\red0\\green0\\blue0;\\red255\\green255\\blue255;}\\loch\\hich\\dbch\\pard\\plain\\ltrpar\\itap0{\\lang1033\\fs18\\f2\\cf0 \\cf0\\ql{\\f2 {\\ltrch There has been a recent update on this matter.}\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\sl15\\slmult0\\par}\r\n}\r\n}"
          },
          "plainText": {
            "type": "string",
            "description": "The plain text (content) of the memo.",
            "nullable": true,
            "example": "There has been a recent update on this matter."
          },
          "createdDate": {
            "type": "string",
            "description": "Date the memo was created.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "createdByUserId": {
            "type": "string",
            "description": "The unique identifier of the user who created the memo.",
            "nullable": true,
            "example": "010f7d8e-82d1-454b-c324-760a862a7e22"
          },
          "lastUpdated": {
            "type": "string",
            "description": "Date and time that the memo was last updated.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-02T16:22:02Z"
          },
          "updatedByUserId": {
            "type": "string",
            "description": "The unique identifier of the user who last updated the memo.",
            "nullable": true,
            "example": "010f7d8e-82d1-454b-c324-760a862a7e22"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether or not the memo is deleted (true if it is, false if not)."
          }
        },
        "additionalProperties": false
      },
      "MemoDto": {
        "required": ["text", "title"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the memo.",
            "example": "Update"
          },
          "text": {
            "type": "string",
            "description": "The text (content) of the memo.\r\n            \r\nSupports plain-text and RTF.",
            "example": "There has been a recent update on this matter."
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "createdDateUtc": {
            "type": "string",
            "description": "Date that the memo was created.\r\n\r\nWill default to the current date and time, if not supplied.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          }
        },
        "additionalProperties": false
      },
      "MemoPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Memo" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "application": {
            "allOf": [{ "$ref": "#/components/schemas/PluginApplication" }],
            "description": "The application that the plugin should be rendered in."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PluginType" }],
            "description": "The type of component the plugin should represent."
          },
          "version": {
            "allOf": [{ "$ref": "#/components/schemas/PluginVersion" }],
            "description": "Current version of the plugin.",
            "nullable": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp",
            "format": "int64",
            "example": 637847425252027400
          },
          "createdDate": {
            "type": "string",
            "description": "Plugin created date in UTC",
            "format": "date-time",
            "example": "2020-02-15T00:00:00Z"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "Plugin last updated date in UTC",
            "format": "date-time",
            "example": "2020-02-15T00:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "PluginApplication": {
        "enum": ["Native", "Web"],
        "type": "string",
        "description": "The application that the plugin should be rendered in."
      },
      "PluginAttributes": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to be rendered on the plugin component (where applicable).",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "The Icon to be rendered on the plugin component (where applicable).\r\nRefer to documentation for a full list of icons.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The hex color code to be rendered on the plugin component (where applicable).",
            "nullable": true
          },
          "tooltip": {
            "type": "string",
            "description": "Optional: The tooltip to display on component hover (where applicable).",
            "nullable": true
          },
          "page": {
            "allOf": [{ "$ref": "#/components/schemas/PluginPage" }],
            "description": "Page attributes for the plugin (where applicable).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PluginDto": {
        "type": "object",
        "properties": {
          "application": {
            "allOf": [{ "$ref": "#/components/schemas/PluginApplication" }],
            "description": "The application that the plugin should be rendered in."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PluginType" }],
            "description": "The type of component the plugin should represent."
          },
          "version": {
            "allOf": [{ "$ref": "#/components/schemas/PluginVersionDto" }],
            "description": "Current version of the plugin.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PluginEndpoint": {
        "type": "object",
        "properties": {
          "staging": {
            "type": "string",
            "description": "Staging URL for the endpoint.",
            "nullable": true
          },
          "production": {
            "type": "string",
            "description": "Production URL for the endpoint.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PluginPage": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Optional: The title of the page rendered by the plugin (where applicable).\r\nIf not specified, the name of the plugin will be used.",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "description": "Optional: The width of the page rendered by the plugin (where applicable).\r\nIf not specified, a default width will be used.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Optional: The height of the page rendered by the plugin (where applicable).\r\nIf not specified, a default width will be used.",
            "format": "int32"
          },
          "useDefaultBrowser": {
            "type": "boolean",
            "description": "Optional: Override browser behavior.\r\nWhen true, loads the endpoint in the internal browser (where applicable)."
          }
        },
        "additionalProperties": false
      },
      "PluginPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Plugin" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PluginSubscription": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the subscription.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "pluginId": {
            "type": "string",
            "description": "Unique identifier of the plugin.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "pluginVersionId": {
            "type": "string",
            "description": "Unique identifier of the plugin version. Can be null.",
            "nullable": true,
            "example": "b471682e-fa17-4e46-b7fe-9b2b8fdcb3c2"
          },
          "createdDate": {
            "type": "string",
            "description": "Plugin subscription created date in UTC.",
            "format": "date-time",
            "example": "2020-02-15T00:00:00Z"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "Plugin subscription last updated date in UTC.",
            "format": "date-time",
            "example": "2020-02-15T00:00:00Z"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "True when the subscription is disabled (the plugin will not function for the user)."
          }
        },
        "additionalProperties": false
      },
      "PluginSubscriptionPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PluginSubscription" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PluginType": {
        "enum": ["Button", "Tab"],
        "type": "string",
        "description": "The type of component the plugin should represent."
      },
      "PluginVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the plugin version.",
            "nullable": true
          },
          "pluginId": {
            "type": "string",
            "description": "The plugin id this version is associated to.",
            "nullable": true
          },
          "versionNumber": {
            "type": "integer",
            "description": "The associated version number.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the plugin.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the plugin.",
            "nullable": true
          },
          "placement": {
            "type": "string",
            "description": "A placement key representing where the plugin should be rendered in the UI.\r\nPlacement key must correspond to the type of the plugin.\r\nRefer to documentation for valid placement keys.",
            "nullable": true
          },
          "endpoint": {
            "allOf": [{ "$ref": "#/components/schemas/PluginEndpoint" }],
            "description": "The endpoint for the plugin.\r\nButtons will open a new page/window using the endpoint.\r\nTabs will lazy-load the endpoint in the tab when selected.",
            "nullable": true
          },
          "attributes": {
            "allOf": [{ "$ref": "#/components/schemas/PluginAttributes" }],
            "description": "Visual attributes associated to this plugin.",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Plugin version created date in UTC",
            "format": "date-time",
            "example": "2020-02-15T00:00:00Z"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "Plugin version last updated date in UTC",
            "format": "date-time",
            "example": "2020-02-15T00:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "PluginVersionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the plugin.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the plugin.",
            "nullable": true
          },
          "placement": {
            "type": "string",
            "description": "A placement key representing where the plugin should be rendered in the UI.\r\nPlacement key must correspond to the type of the plugin.\r\nRefer to documentation for valid placement keys.",
            "nullable": true
          },
          "endpoint": {
            "allOf": [{ "$ref": "#/components/schemas/PluginEndpoint" }],
            "description": "The endpoint for the plugin.\r\nButtons will open a new page/window using the endpoint.\r\nTabs will lazy-load the endpoint in the tab when selected.",
            "nullable": true
          },
          "attributes": {
            "allOf": [{ "$ref": "#/components/schemas/PluginAttributes" }],
            "description": "Visual attributes associated to this plugin.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterStage": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "matter": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Matter in which this mapping is associated to.",
            "nullable": true
          },
          "stageSet": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Current stage set of the matter.",
            "nullable": true
          },
          "stage": {
            "allOf": [{ "$ref": "#/components/schemas/Stage" }],
            "description": "Current stage of the matter.",
            "nullable": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Timestamp when the matter stage was last updated.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Contains the current stage of the matter."
      },
      "MatterStagePagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatterStage" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Stage": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the stage.",
            "nullable": true,
            "example": "45b94df1-1657-48b0-ae81-583b42ed52d6"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "09d1f360-b810-4a63-acaa-5ed81a551f06"
          },
          "name": {
            "type": "string",
            "description": "Name of the stage.",
            "nullable": true,
            "example": "Review contract"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the stage is deleted.",
            "example": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Timestamp when the stage was last updated.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Contains information of a stage in a stage set."
      },
      "StageSet": {
        "type": "object",
        "properties": {
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the stage set.",
            "nullable": true,
            "example": "6ccc033d-67c9-4090-8705-3aff0c5a8cfb"
          },
          "versionId": {
            "type": "string",
            "description": "Version id of the record.",
            "nullable": true,
            "example": "499244ff-651f-4f66-b618-9defde27c281"
          },
          "name": {
            "type": "string",
            "description": "Name of the stage set.",
            "nullable": true,
            "example": "Review contract"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the stage set is deleted.",
            "example": true
          },
          "stages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Stage" },
            "description": "Stages of the stage set.",
            "nullable": true
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Timestamp when the stage set was last updated.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Contains the stage set and stages information."
      },
      "StageSetPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StageSet" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "description": "Available document types: \"File = 0\", \"FormTemplate = 1\", \"Memo = 2\" \r\n\r\nThe FormTemplate (1) document type is not currently supported for task document creation.",
        "format": "int32"
      },
      "SubTask": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "parentTask": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The parent (task) of the subtask.",
            "nullable": true
          },
          "createdBy": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member who created the subtask.",
            "nullable": true
          },
          "completedBy": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member who completed the subtask.",
            "nullable": true
          },
          "lastUpdatedBy": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member who last updated the subtask.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "The subject - a short description of the subtask.",
            "nullable": true,
            "example": "Confer with Mary"
          },
          "completedDate": {
            "type": "string",
            "description": "When the subtask was completed.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "createdDate": {
            "type": "string",
            "description": "When the subtask was created.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "True when the subtask is completed.",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the subtask is deleted.",
            "example": false
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false,
        "description": "Subtask resource."
      },
      "SubTaskCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SubTask" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubTaskDto": {
        "required": ["subject"],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member creating or updating the subtask.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "completedByStaffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member who completed the subtask.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the subtask.",
            "example": "Confer with Mary"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "True when the subtask is completed.",
            "example": false
          },
          "completedDate": {
            "type": "string",
            "description": "Completed date of the subtask. \r\nIf not provided and IsCompleted is set to true, the current date will be used.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for a subtask."
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "matter": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "Matter associated to the task.",
            "nullable": true
          },
          "parentTask": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The parent task associated to this task. Id is missing if this task is not a sub task.",
            "nullable": true
          },
          "createdBy": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member who created the task.",
            "nullable": true
          },
          "completedBy": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member who completed the task.",
            "nullable": true
          },
          "lastUpdatedBy": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The staff member who last updated the task.",
            "nullable": true
          },
          "assignees": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "The staff member(s) assigned to the task.",
            "nullable": true
          },
          "subTasks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Link" },
            "description": "The tasks associated to the task.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "The subject - a short description of the task.",
            "nullable": true,
            "example": "Review contract for John Smith"
          },
          "note": {
            "type": "string",
            "description": "Notes on the task.",
            "nullable": true,
            "example": "Contract needs to be reviewed and discussed with John"
          },
          "categories": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Categories for the task.",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "completedDate": {
            "type": "string",
            "description": "When the task was completed.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "createdDate": {
            "type": "string",
            "description": "When the task was created.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-02-15T00:00:00Z"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "True when the task is completed.",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the task is deleted.",
            "example": false
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp.",
            "format": "int64",
            "example": 637847425252027400
          },
          "duration": {
            "type": "string",
            "description": "Duration of the task in ISO 8601 duration format.",
            "nullable": true,
            "example": "PT4H33M"
          }
        },
        "additionalProperties": false
      },
      "TaskDocument": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "task": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "description": "The associated task.",
            "nullable": true
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DocumentType" }],
            "description": "The type of the document.\r\n\r\nPossible values: File = 0, FormTemplate = 1, Memo = 2.",
            "example": 0
          },
          "isDeleted": {
            "type": "boolean",
            "description": "True when the task document has been deleted.",
            "example": false
          },
          "document": {
            "description": "Link to the the document.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Task document resource."
      },
      "TaskDocumentCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TaskDocument" },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskDocumentDto": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "Unique identifier of the document (file or memo).\r\n\r\nIf a file, the type must be 0 (File). \r\n\r\nIf a memo, the type must be 2 (Memo).\r\n\r\nThe FormTemplate (1) document type is not currently supported for task document creation.",
            "nullable": true,
            "example": "cf666f06-3ff2-4a41-8c7f-ab5a8bc6a277"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DocumentType" }],
            "description": "The type of the document.\r\n\r\nPossible values: File = 0, FormTemplate = 1, Memo = 2.\r\n\r\nThe FormTemplate (1) document type is not currently supported for task document creation.",
            "example": 0
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for a task document."
      },
      "TaskDto": {
        "type": "object",
        "properties": {
          "matterId": {
            "type": "string",
            "description": "Unique identifier of the matter associated to the task.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "staffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member creating or updating the task.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "completedByStaffId": {
            "type": "string",
            "description": "Unique identifier of the associated staff member completing the task.",
            "nullable": true,
            "example": "750eb5c5-ac0b-7d11-4997-e0ce9d8896c8"
          },
          "assigneeIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Unique identifier(s) of the associated staff member(s) assigned to the task.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "The subject - this should be a short description of the task.",
            "nullable": true,
            "example": "Review contract for John Smith"
          },
          "note": {
            "type": "string",
            "description": "Notes on the task.",
            "nullable": true,
            "example": "Contract needs to be reviewed and discussed with John"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "True when the task is completed.",
            "example": false
          },
          "categories": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Categories for the task.",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "description": "Completed date of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-01"
          },
          "duration": {
            "type": "string",
            "description": "Duration of the task in ISO 8601 duration format.",
            "nullable": true,
            "example": "PT4H33M"
          }
        },
        "additionalProperties": false
      },
      "TaskPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Task" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "nullable": true,
            "example": "23d2a4bc-8529-462e-8560-dfbf4fa24e49"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": true,
            "example": "user@domain.com"
          },
          "isInternal": {
            "type": "boolean",
            "description": "Returns true if the user is flagged as an internal user.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "example": "user@domain.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the user.\r\n\r\nPassword must include atleast one lowercase character, uppercase character, numeric character as well as a special character.",
            "nullable": true
          },
          "expireAfterDays": {
            "type": "integer",
            "description": "Expire after the specified days. Must be left blank for users that do not expire.",
            "format": "int32",
            "nullable": true,
            "example": 7
          },
          "isInternal": {
            "type": "boolean",
            "description": "Creates the user as an internal user.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "description": "Unique identifier of the associated account.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "name": {
            "type": "string",
            "description": "Name or description of the subscription.",
            "nullable": true,
            "example": "Listen to matter and contact changes"
          },
          "eventTypes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The event types that the webhook subscription is subscribed to.",
            "nullable": true,
            "example": ["matter.updated", "contact.created"]
          },
          "eventNotificationUrl": {
            "type": "string",
            "description": "The uri to notify when an event has occurred.",
            "nullable": true,
            "example": "http://yourdomain.com/notify"
          },
          "createdDateUtc": {
            "type": "string",
            "description": "The webhook subscription creation date.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "updatedDateUtc": {
            "type": "string",
            "description": "The webhook subscription last updated date.",
            "format": "date-time",
            "example": "2022-04-23T14:00:00Z"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Last updated timestamp",
            "format": "int64",
            "example": 637847425252027400
          }
        },
        "additionalProperties": false
      },
      "SubscriptionDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key used for creating signature header in webhook notification requests.",
            "nullable": true,
            "example": "da4e7fd1-5394-4ca9-b1c6-e18c4e2bf262"
          },
          "name": {
            "type": "string",
            "description": "Name or description of the webhook subscription.",
            "nullable": true,
            "example": "Listen to matter and contact changes"
          },
          "eventTypes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The event types that the webhook subscription should be subscribed to.",
            "nullable": true,
            "example": ["matter.updated", "contact.created"]
          },
          "eventNotificationUrl": {
            "type": "string",
            "description": "The uri to notify when an event has occurred.",
            "nullable": true,
            "example": "http://yourdomain.com/notify"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionPagedCollection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "nullable": true },
          "href": { "type": "string", "nullable": true },
          "relation": { "type": "string", "nullable": true },
          "method": { "type": "string", "default": "GET", "nullable": true },
          "self": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Subscription" },
            "nullable": true
          },
          "offset": { "type": "integer", "format": "int32", "nullable": true },
          "limit": { "type": "integer", "format": "int32", "nullable": true },
          "size": { "type": "integer", "format": "int64" },
          "first": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "previous": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "next": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          },
          "last": {
            "allOf": [{ "$ref": "#/components/schemas/Link" }],
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "api-key": { "type": "apiKey", "name": "x-api-key", "in": "header" },
      "token": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools"
      }
    }
  },
  "servers": [{ "url": "https://api.smokeball.com", "description": "API" }],
  "security": [{ "api-key": [], "token": [] }]
}
